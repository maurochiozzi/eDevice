
eDevice_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c20  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013b8  08011ec0  08011ec0  00021ec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013278  08013278  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08013278  08013278  00023278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013280  08013280  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013280  08013280  00023280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013284  08013284  00023284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  08013288  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005040  240001e4  0801346c  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24005224  0801346c  00035224  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dfaf  00000000  00000000  00030212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bf8  00000000  00000000  0005e1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002198  00000000  00000000  00063dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f00  00000000  00000000  00065f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004080a  00000000  00000000  00067e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d9dd  00000000  00000000  000a8662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00193e93  00000000  00000000  000d603f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00269ed2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a04c  00000000  00000000  00269f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  00273f70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011ea8 	.word	0x08011ea8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	08011ea8 	.word	0x08011ea8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 babe 	b.w	8000924 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f950 	bl	8000654 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__mulsc3>:
 80003c0:	ee60 6a01 	vmul.f32	s13, s0, s2
 80003c4:	ee20 6aa1 	vmul.f32	s12, s1, s3
 80003c8:	ee20 5a21 	vmul.f32	s10, s0, s3
 80003cc:	ee76 7ac6 	vsub.f32	s15, s13, s12
 80003d0:	ee61 5a20 	vmul.f32	s11, s2, s1
 80003d4:	eef4 7a67 	vcmp.f32	s15, s15
 80003d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003dc:	ee35 7a25 	vadd.f32	s14, s10, s11
 80003e0:	d604      	bvs.n	80003ec <__mulsc3+0x2c>
 80003e2:	eeb0 0a67 	vmov.f32	s0, s15
 80003e6:	eef0 0a47 	vmov.f32	s1, s14
 80003ea:	4770      	bx	lr
 80003ec:	eeb4 7a47 	vcmp.f32	s14, s14
 80003f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003f4:	d7f5      	bvc.n	80003e2 <__mulsc3+0x22>
 80003f6:	eddf 4a93 	vldr	s9, [pc, #588]	; 8000644 <__mulsc3+0x284>
 80003fa:	eeb0 4ac0 	vabs.f32	s8, s0
 80003fe:	eeb4 4a64 	vcmp.f32	s8, s9
 8000402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000406:	bfcc      	ite	gt
 8000408:	2301      	movgt	r3, #1
 800040a:	2300      	movle	r3, #0
 800040c:	eeb0 4ae0 	vabs.f32	s8, s1
 8000410:	f300 809d 	bgt.w	800054e <__mulsc3+0x18e>
 8000414:	eeb4 4a64 	vcmp.f32	s8, s9
 8000418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800041c:	f300 8097 	bgt.w	800054e <__mulsc3+0x18e>
 8000420:	2300      	movs	r3, #0
 8000422:	eddf 4a88 	vldr	s9, [pc, #544]	; 8000644 <__mulsc3+0x284>
 8000426:	eeb0 4ac1 	vabs.f32	s8, s2
 800042a:	eeb4 4a64 	vcmp.f32	s8, s9
 800042e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000432:	eef0 3ae1 	vabs.f32	s7, s3
 8000436:	dc48      	bgt.n	80004ca <__mulsc3+0x10a>
 8000438:	eef4 3a64 	vcmp.f32	s7, s9
 800043c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000440:	dc43      	bgt.n	80004ca <__mulsc3+0x10a>
 8000442:	bb9b      	cbnz	r3, 80004ac <__mulsc3+0xec>
 8000444:	eef0 6ae6 	vabs.f32	s13, s13
 8000448:	eef4 6a64 	vcmp.f32	s13, s9
 800044c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000450:	dc14      	bgt.n	800047c <__mulsc3+0xbc>
 8000452:	eeb0 6ac6 	vabs.f32	s12, s12
 8000456:	eeb4 6a64 	vcmp.f32	s12, s9
 800045a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800045e:	dc0d      	bgt.n	800047c <__mulsc3+0xbc>
 8000460:	eeb0 5ac5 	vabs.f32	s10, s10
 8000464:	eeb4 5a64 	vcmp.f32	s10, s9
 8000468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800046c:	dc06      	bgt.n	800047c <__mulsc3+0xbc>
 800046e:	eef0 5ae5 	vabs.f32	s11, s11
 8000472:	eef4 5a64 	vcmp.f32	s11, s9
 8000476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800047a:	ddb2      	ble.n	80003e2 <__mulsc3+0x22>
 800047c:	eeb4 0a40 	vcmp.f32	s0, s0
 8000480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000484:	f180 80d3 	bvs.w	800062e <__mulsc3+0x26e>
 8000488:	eef4 0a60 	vcmp.f32	s1, s1
 800048c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000490:	f180 80c3 	bvs.w	800061a <__mulsc3+0x25a>
 8000494:	eeb4 1a41 	vcmp.f32	s2, s2
 8000498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049c:	f180 80b3 	bvs.w	8000606 <__mulsc3+0x246>
 80004a0:	eef4 1a61 	vcmp.f32	s3, s3
 80004a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004a8:	f180 80a3 	bvs.w	80005f2 <__mulsc3+0x232>
 80004ac:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 80004b0:	ee60 0a81 	vmul.f32	s1, s1, s2
 80004b4:	eee0 7a01 	vfma.f32	s15, s0, s2
 80004b8:	eee0 0a21 	vfma.f32	s1, s0, s3
 80004bc:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8000648 <__mulsc3+0x288>
 80004c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80004c4:	ee20 7a87 	vmul.f32	s14, s1, s14
 80004c8:	e78b      	b.n	80003e2 <__mulsc3+0x22>
 80004ca:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8000644 <__mulsc3+0x284>
 80004ce:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8000644 <__mulsc3+0x284>
 80004d2:	eeb4 4a67 	vcmp.f32	s8, s15
 80004d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004da:	bfcc      	ite	gt
 80004dc:	2301      	movgt	r3, #1
 80004de:	2300      	movle	r3, #0
 80004e0:	ee07 3a90 	vmov	s15, r3
 80004e4:	ee11 3a10 	vmov	r3, s2
 80004e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	eef0 7ae7 	vabs.f32	s15, s15
 80004f2:	eef4 3a47 	vcmp.f32	s7, s14
 80004f6:	bfb8      	it	lt
 80004f8:	eef1 7a67 	vneglt.f32	s15, s15
 80004fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000500:	bfcc      	ite	gt
 8000502:	2301      	movgt	r3, #1
 8000504:	2300      	movle	r3, #0
 8000506:	eeb0 1a67 	vmov.f32	s2, s15
 800050a:	ee07 3a90 	vmov	s15, r3
 800050e:	ee11 3a90 	vmov	r3, s3
 8000512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000516:	2b00      	cmp	r3, #0
 8000518:	eef0 7ae7 	vabs.f32	s15, s15
 800051c:	eeb4 0a40 	vcmp.f32	s0, s0
 8000520:	bfb8      	it	lt
 8000522:	eef1 7a67 	vneglt.f32	s15, s15
 8000526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800052a:	eef0 1a67 	vmov.f32	s3, s15
 800052e:	d64c      	bvs.n	80005ca <__mulsc3+0x20a>
 8000530:	eef4 0a60 	vcmp.f32	s1, s1
 8000534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000538:	d7b8      	bvc.n	80004ac <__mulsc3+0xec>
 800053a:	ee10 3a90 	vmov	r3, s1
 800053e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800064c <__mulsc3+0x28c>
 8000542:	eddf 7a43 	vldr	s15, [pc, #268]	; 8000650 <__mulsc3+0x290>
 8000546:	2b00      	cmp	r3, #0
 8000548:	fe67 0a27 	vselge.f32	s1, s14, s15
 800054c:	e7ae      	b.n	80004ac <__mulsc3+0xec>
 800054e:	ee04 3a90 	vmov	s9, r3
 8000552:	eddf 3a3c 	vldr	s7, [pc, #240]	; 8000644 <__mulsc3+0x284>
 8000556:	ee10 3a10 	vmov	r3, s0
 800055a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800055e:	2b00      	cmp	r3, #0
 8000560:	eef0 4ae4 	vabs.f32	s9, s9
 8000564:	eeb4 4a63 	vcmp.f32	s8, s7
 8000568:	bfb8      	it	lt
 800056a:	eef1 4a64 	vneglt.f32	s9, s9
 800056e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000572:	bfcc      	ite	gt
 8000574:	2301      	movgt	r3, #1
 8000576:	2300      	movle	r3, #0
 8000578:	eeb0 0a64 	vmov.f32	s0, s9
 800057c:	ee04 3a90 	vmov	s9, r3
 8000580:	ee10 3a90 	vmov	r3, s1
 8000584:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000588:	2b00      	cmp	r3, #0
 800058a:	eef0 4ae4 	vabs.f32	s9, s9
 800058e:	eeb4 1a41 	vcmp.f32	s2, s2
 8000592:	bfb8      	it	lt
 8000594:	eef1 4a64 	vneglt.f32	s9, s9
 8000598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059c:	eef0 0a64 	vmov.f32	s1, s9
 80005a0:	d61d      	bvs.n	80005de <__mulsc3+0x21e>
 80005a2:	eef4 1a61 	vcmp.f32	s3, s3
 80005a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005aa:	bf78      	it	vc
 80005ac:	2301      	movvc	r3, #1
 80005ae:	f5ff af38 	bvc.w	8000422 <__mulsc3+0x62>
 80005b2:	ee11 3a90 	vmov	r3, s3
 80005b6:	ed9f 4a25 	vldr	s8, [pc, #148]	; 800064c <__mulsc3+0x28c>
 80005ba:	eddf 4a25 	vldr	s9, [pc, #148]	; 8000650 <__mulsc3+0x290>
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f04f 0301 	mov.w	r3, #1
 80005c4:	fe64 1a24 	vselge.f32	s3, s8, s9
 80005c8:	e72b      	b.n	8000422 <__mulsc3+0x62>
 80005ca:	ee10 3a10 	vmov	r3, s0
 80005ce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800064c <__mulsc3+0x28c>
 80005d2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8000650 <__mulsc3+0x290>
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	fe27 0a27 	vselge.f32	s0, s14, s15
 80005dc:	e7a8      	b.n	8000530 <__mulsc3+0x170>
 80005de:	ee11 3a10 	vmov	r3, s2
 80005e2:	ed9f 4a1a 	vldr	s8, [pc, #104]	; 800064c <__mulsc3+0x28c>
 80005e6:	eddf 4a1a 	vldr	s9, [pc, #104]	; 8000650 <__mulsc3+0x290>
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	fe24 1a24 	vselge.f32	s2, s8, s9
 80005f0:	e7d7      	b.n	80005a2 <__mulsc3+0x1e2>
 80005f2:	ee11 3a90 	vmov	r3, s3
 80005f6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800064c <__mulsc3+0x28c>
 80005fa:	eddf 7a15 	vldr	s15, [pc, #84]	; 8000650 <__mulsc3+0x290>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	fe67 1a27 	vselge.f32	s3, s14, s15
 8000604:	e752      	b.n	80004ac <__mulsc3+0xec>
 8000606:	ee11 3a10 	vmov	r3, s2
 800060a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800064c <__mulsc3+0x28c>
 800060e:	eddf 7a10 	vldr	s15, [pc, #64]	; 8000650 <__mulsc3+0x290>
 8000612:	2b00      	cmp	r3, #0
 8000614:	fe27 1a27 	vselge.f32	s2, s14, s15
 8000618:	e742      	b.n	80004a0 <__mulsc3+0xe0>
 800061a:	ee10 3a90 	vmov	r3, s1
 800061e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800064c <__mulsc3+0x28c>
 8000622:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8000650 <__mulsc3+0x290>
 8000626:	2b00      	cmp	r3, #0
 8000628:	fe67 0a27 	vselge.f32	s1, s14, s15
 800062c:	e732      	b.n	8000494 <__mulsc3+0xd4>
 800062e:	ee10 3a10 	vmov	r3, s0
 8000632:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800064c <__mulsc3+0x28c>
 8000636:	eddf 7a06 	vldr	s15, [pc, #24]	; 8000650 <__mulsc3+0x290>
 800063a:	2b00      	cmp	r3, #0
 800063c:	fe27 0a27 	vselge.f32	s0, s14, s15
 8000640:	e722      	b.n	8000488 <__mulsc3+0xc8>
 8000642:	bf00      	nop
 8000644:	7f7fffff 	.word	0x7f7fffff
 8000648:	7f800000 	.word	0x7f800000
 800064c:	00000000 	.word	0x00000000
 8000650:	80000000 	.word	0x80000000

08000654 <__udivmoddi4>:
 8000654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000658:	9d08      	ldr	r5, [sp, #32]
 800065a:	4604      	mov	r4, r0
 800065c:	468e      	mov	lr, r1
 800065e:	2b00      	cmp	r3, #0
 8000660:	d14d      	bne.n	80006fe <__udivmoddi4+0xaa>
 8000662:	428a      	cmp	r2, r1
 8000664:	4694      	mov	ip, r2
 8000666:	d969      	bls.n	800073c <__udivmoddi4+0xe8>
 8000668:	fab2 f282 	clz	r2, r2
 800066c:	b152      	cbz	r2, 8000684 <__udivmoddi4+0x30>
 800066e:	fa01 f302 	lsl.w	r3, r1, r2
 8000672:	f1c2 0120 	rsb	r1, r2, #32
 8000676:	fa20 f101 	lsr.w	r1, r0, r1
 800067a:	fa0c fc02 	lsl.w	ip, ip, r2
 800067e:	ea41 0e03 	orr.w	lr, r1, r3
 8000682:	4094      	lsls	r4, r2
 8000684:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000688:	0c21      	lsrs	r1, r4, #16
 800068a:	fbbe f6f8 	udiv	r6, lr, r8
 800068e:	fa1f f78c 	uxth.w	r7, ip
 8000692:	fb08 e316 	mls	r3, r8, r6, lr
 8000696:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800069a:	fb06 f107 	mul.w	r1, r6, r7
 800069e:	4299      	cmp	r1, r3
 80006a0:	d90a      	bls.n	80006b8 <__udivmoddi4+0x64>
 80006a2:	eb1c 0303 	adds.w	r3, ip, r3
 80006a6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006aa:	f080 811f 	bcs.w	80008ec <__udivmoddi4+0x298>
 80006ae:	4299      	cmp	r1, r3
 80006b0:	f240 811c 	bls.w	80008ec <__udivmoddi4+0x298>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	1a5b      	subs	r3, r3, r1
 80006ba:	b2a4      	uxth	r4, r4
 80006bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006c0:	fb08 3310 	mls	r3, r8, r0, r3
 80006c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c8:	fb00 f707 	mul.w	r7, r0, r7
 80006cc:	42a7      	cmp	r7, r4
 80006ce:	d90a      	bls.n	80006e6 <__udivmoddi4+0x92>
 80006d0:	eb1c 0404 	adds.w	r4, ip, r4
 80006d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80006d8:	f080 810a 	bcs.w	80008f0 <__udivmoddi4+0x29c>
 80006dc:	42a7      	cmp	r7, r4
 80006de:	f240 8107 	bls.w	80008f0 <__udivmoddi4+0x29c>
 80006e2:	4464      	add	r4, ip
 80006e4:	3802      	subs	r0, #2
 80006e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ea:	1be4      	subs	r4, r4, r7
 80006ec:	2600      	movs	r6, #0
 80006ee:	b11d      	cbz	r5, 80006f8 <__udivmoddi4+0xa4>
 80006f0:	40d4      	lsrs	r4, r2
 80006f2:	2300      	movs	r3, #0
 80006f4:	e9c5 4300 	strd	r4, r3, [r5]
 80006f8:	4631      	mov	r1, r6
 80006fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fe:	428b      	cmp	r3, r1
 8000700:	d909      	bls.n	8000716 <__udivmoddi4+0xc2>
 8000702:	2d00      	cmp	r5, #0
 8000704:	f000 80ef 	beq.w	80008e6 <__udivmoddi4+0x292>
 8000708:	2600      	movs	r6, #0
 800070a:	e9c5 0100 	strd	r0, r1, [r5]
 800070e:	4630      	mov	r0, r6
 8000710:	4631      	mov	r1, r6
 8000712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000716:	fab3 f683 	clz	r6, r3
 800071a:	2e00      	cmp	r6, #0
 800071c:	d14a      	bne.n	80007b4 <__udivmoddi4+0x160>
 800071e:	428b      	cmp	r3, r1
 8000720:	d302      	bcc.n	8000728 <__udivmoddi4+0xd4>
 8000722:	4282      	cmp	r2, r0
 8000724:	f200 80f9 	bhi.w	800091a <__udivmoddi4+0x2c6>
 8000728:	1a84      	subs	r4, r0, r2
 800072a:	eb61 0303 	sbc.w	r3, r1, r3
 800072e:	2001      	movs	r0, #1
 8000730:	469e      	mov	lr, r3
 8000732:	2d00      	cmp	r5, #0
 8000734:	d0e0      	beq.n	80006f8 <__udivmoddi4+0xa4>
 8000736:	e9c5 4e00 	strd	r4, lr, [r5]
 800073a:	e7dd      	b.n	80006f8 <__udivmoddi4+0xa4>
 800073c:	b902      	cbnz	r2, 8000740 <__udivmoddi4+0xec>
 800073e:	deff      	udf	#255	; 0xff
 8000740:	fab2 f282 	clz	r2, r2
 8000744:	2a00      	cmp	r2, #0
 8000746:	f040 8092 	bne.w	800086e <__udivmoddi4+0x21a>
 800074a:	eba1 010c 	sub.w	r1, r1, ip
 800074e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000752:	fa1f fe8c 	uxth.w	lr, ip
 8000756:	2601      	movs	r6, #1
 8000758:	0c20      	lsrs	r0, r4, #16
 800075a:	fbb1 f3f7 	udiv	r3, r1, r7
 800075e:	fb07 1113 	mls	r1, r7, r3, r1
 8000762:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000766:	fb0e f003 	mul.w	r0, lr, r3
 800076a:	4288      	cmp	r0, r1
 800076c:	d908      	bls.n	8000780 <__udivmoddi4+0x12c>
 800076e:	eb1c 0101 	adds.w	r1, ip, r1
 8000772:	f103 38ff 	add.w	r8, r3, #4294967295
 8000776:	d202      	bcs.n	800077e <__udivmoddi4+0x12a>
 8000778:	4288      	cmp	r0, r1
 800077a:	f200 80cb 	bhi.w	8000914 <__udivmoddi4+0x2c0>
 800077e:	4643      	mov	r3, r8
 8000780:	1a09      	subs	r1, r1, r0
 8000782:	b2a4      	uxth	r4, r4
 8000784:	fbb1 f0f7 	udiv	r0, r1, r7
 8000788:	fb07 1110 	mls	r1, r7, r0, r1
 800078c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000790:	fb0e fe00 	mul.w	lr, lr, r0
 8000794:	45a6      	cmp	lr, r4
 8000796:	d908      	bls.n	80007aa <__udivmoddi4+0x156>
 8000798:	eb1c 0404 	adds.w	r4, ip, r4
 800079c:	f100 31ff 	add.w	r1, r0, #4294967295
 80007a0:	d202      	bcs.n	80007a8 <__udivmoddi4+0x154>
 80007a2:	45a6      	cmp	lr, r4
 80007a4:	f200 80bb 	bhi.w	800091e <__udivmoddi4+0x2ca>
 80007a8:	4608      	mov	r0, r1
 80007aa:	eba4 040e 	sub.w	r4, r4, lr
 80007ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007b2:	e79c      	b.n	80006ee <__udivmoddi4+0x9a>
 80007b4:	f1c6 0720 	rsb	r7, r6, #32
 80007b8:	40b3      	lsls	r3, r6
 80007ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80007be:	ea4c 0c03 	orr.w	ip, ip, r3
 80007c2:	fa20 f407 	lsr.w	r4, r0, r7
 80007c6:	fa01 f306 	lsl.w	r3, r1, r6
 80007ca:	431c      	orrs	r4, r3
 80007cc:	40f9      	lsrs	r1, r7
 80007ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007d2:	fa00 f306 	lsl.w	r3, r0, r6
 80007d6:	fbb1 f8f9 	udiv	r8, r1, r9
 80007da:	0c20      	lsrs	r0, r4, #16
 80007dc:	fa1f fe8c 	uxth.w	lr, ip
 80007e0:	fb09 1118 	mls	r1, r9, r8, r1
 80007e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007e8:	fb08 f00e 	mul.w	r0, r8, lr
 80007ec:	4288      	cmp	r0, r1
 80007ee:	fa02 f206 	lsl.w	r2, r2, r6
 80007f2:	d90b      	bls.n	800080c <__udivmoddi4+0x1b8>
 80007f4:	eb1c 0101 	adds.w	r1, ip, r1
 80007f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80007fc:	f080 8088 	bcs.w	8000910 <__udivmoddi4+0x2bc>
 8000800:	4288      	cmp	r0, r1
 8000802:	f240 8085 	bls.w	8000910 <__udivmoddi4+0x2bc>
 8000806:	f1a8 0802 	sub.w	r8, r8, #2
 800080a:	4461      	add	r1, ip
 800080c:	1a09      	subs	r1, r1, r0
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb1 f0f9 	udiv	r0, r1, r9
 8000814:	fb09 1110 	mls	r1, r9, r0, r1
 8000818:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800081c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000820:	458e      	cmp	lr, r1
 8000822:	d908      	bls.n	8000836 <__udivmoddi4+0x1e2>
 8000824:	eb1c 0101 	adds.w	r1, ip, r1
 8000828:	f100 34ff 	add.w	r4, r0, #4294967295
 800082c:	d26c      	bcs.n	8000908 <__udivmoddi4+0x2b4>
 800082e:	458e      	cmp	lr, r1
 8000830:	d96a      	bls.n	8000908 <__udivmoddi4+0x2b4>
 8000832:	3802      	subs	r0, #2
 8000834:	4461      	add	r1, ip
 8000836:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800083a:	fba0 9402 	umull	r9, r4, r0, r2
 800083e:	eba1 010e 	sub.w	r1, r1, lr
 8000842:	42a1      	cmp	r1, r4
 8000844:	46c8      	mov	r8, r9
 8000846:	46a6      	mov	lr, r4
 8000848:	d356      	bcc.n	80008f8 <__udivmoddi4+0x2a4>
 800084a:	d053      	beq.n	80008f4 <__udivmoddi4+0x2a0>
 800084c:	b15d      	cbz	r5, 8000866 <__udivmoddi4+0x212>
 800084e:	ebb3 0208 	subs.w	r2, r3, r8
 8000852:	eb61 010e 	sbc.w	r1, r1, lr
 8000856:	fa01 f707 	lsl.w	r7, r1, r7
 800085a:	fa22 f306 	lsr.w	r3, r2, r6
 800085e:	40f1      	lsrs	r1, r6
 8000860:	431f      	orrs	r7, r3
 8000862:	e9c5 7100 	strd	r7, r1, [r5]
 8000866:	2600      	movs	r6, #0
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	40d8      	lsrs	r0, r3
 8000874:	fa0c fc02 	lsl.w	ip, ip, r2
 8000878:	fa21 f303 	lsr.w	r3, r1, r3
 800087c:	4091      	lsls	r1, r2
 800087e:	4301      	orrs	r1, r0
 8000880:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000884:	fa1f fe8c 	uxth.w	lr, ip
 8000888:	fbb3 f0f7 	udiv	r0, r3, r7
 800088c:	fb07 3610 	mls	r6, r7, r0, r3
 8000890:	0c0b      	lsrs	r3, r1, #16
 8000892:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000896:	fb00 f60e 	mul.w	r6, r0, lr
 800089a:	429e      	cmp	r6, r3
 800089c:	fa04 f402 	lsl.w	r4, r4, r2
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0x260>
 80008a2:	eb1c 0303 	adds.w	r3, ip, r3
 80008a6:	f100 38ff 	add.w	r8, r0, #4294967295
 80008aa:	d22f      	bcs.n	800090c <__udivmoddi4+0x2b8>
 80008ac:	429e      	cmp	r6, r3
 80008ae:	d92d      	bls.n	800090c <__udivmoddi4+0x2b8>
 80008b0:	3802      	subs	r0, #2
 80008b2:	4463      	add	r3, ip
 80008b4:	1b9b      	subs	r3, r3, r6
 80008b6:	b289      	uxth	r1, r1
 80008b8:	fbb3 f6f7 	udiv	r6, r3, r7
 80008bc:	fb07 3316 	mls	r3, r7, r6, r3
 80008c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c4:	fb06 f30e 	mul.w	r3, r6, lr
 80008c8:	428b      	cmp	r3, r1
 80008ca:	d908      	bls.n	80008de <__udivmoddi4+0x28a>
 80008cc:	eb1c 0101 	adds.w	r1, ip, r1
 80008d0:	f106 38ff 	add.w	r8, r6, #4294967295
 80008d4:	d216      	bcs.n	8000904 <__udivmoddi4+0x2b0>
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d914      	bls.n	8000904 <__udivmoddi4+0x2b0>
 80008da:	3e02      	subs	r6, #2
 80008dc:	4461      	add	r1, ip
 80008de:	1ac9      	subs	r1, r1, r3
 80008e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008e4:	e738      	b.n	8000758 <__udivmoddi4+0x104>
 80008e6:	462e      	mov	r6, r5
 80008e8:	4628      	mov	r0, r5
 80008ea:	e705      	b.n	80006f8 <__udivmoddi4+0xa4>
 80008ec:	4606      	mov	r6, r0
 80008ee:	e6e3      	b.n	80006b8 <__udivmoddi4+0x64>
 80008f0:	4618      	mov	r0, r3
 80008f2:	e6f8      	b.n	80006e6 <__udivmoddi4+0x92>
 80008f4:	454b      	cmp	r3, r9
 80008f6:	d2a9      	bcs.n	800084c <__udivmoddi4+0x1f8>
 80008f8:	ebb9 0802 	subs.w	r8, r9, r2
 80008fc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000900:	3801      	subs	r0, #1
 8000902:	e7a3      	b.n	800084c <__udivmoddi4+0x1f8>
 8000904:	4646      	mov	r6, r8
 8000906:	e7ea      	b.n	80008de <__udivmoddi4+0x28a>
 8000908:	4620      	mov	r0, r4
 800090a:	e794      	b.n	8000836 <__udivmoddi4+0x1e2>
 800090c:	4640      	mov	r0, r8
 800090e:	e7d1      	b.n	80008b4 <__udivmoddi4+0x260>
 8000910:	46d0      	mov	r8, sl
 8000912:	e77b      	b.n	800080c <__udivmoddi4+0x1b8>
 8000914:	3b02      	subs	r3, #2
 8000916:	4461      	add	r1, ip
 8000918:	e732      	b.n	8000780 <__udivmoddi4+0x12c>
 800091a:	4630      	mov	r0, r6
 800091c:	e709      	b.n	8000732 <__udivmoddi4+0xde>
 800091e:	4464      	add	r4, ip
 8000920:	3802      	subs	r0, #2
 8000922:	e742      	b.n	80007aa <__udivmoddi4+0x156>

08000924 <__aeabi_idiv0>:
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800092c:	4b3d      	ldr	r3, [pc, #244]	; (8000a24 <SystemInit+0xfc>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a3c      	ldr	r2, [pc, #240]	; (8000a24 <SystemInit+0xfc>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800093c:	4b39      	ldr	r3, [pc, #228]	; (8000a24 <SystemInit+0xfc>)
 800093e:	691b      	ldr	r3, [r3, #16]
 8000940:	4a38      	ldr	r2, [pc, #224]	; (8000a24 <SystemInit+0xfc>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000948:	4b37      	ldr	r3, [pc, #220]	; (8000a28 <SystemInit+0x100>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 030f 	and.w	r3, r3, #15
 8000950:	2b06      	cmp	r3, #6
 8000952:	d807      	bhi.n	8000964 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000954:	4b34      	ldr	r3, [pc, #208]	; (8000a28 <SystemInit+0x100>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f023 030f 	bic.w	r3, r3, #15
 800095c:	4a32      	ldr	r2, [pc, #200]	; (8000a28 <SystemInit+0x100>)
 800095e:	f043 0307 	orr.w	r3, r3, #7
 8000962:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000964:	4b31      	ldr	r3, [pc, #196]	; (8000a2c <SystemInit+0x104>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a30      	ldr	r2, [pc, #192]	; (8000a2c <SystemInit+0x104>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000970:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <SystemInit+0x104>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000976:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <SystemInit+0x104>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	492c      	ldr	r1, [pc, #176]	; (8000a2c <SystemInit+0x104>)
 800097c:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <SystemInit+0x108>)
 800097e:	4013      	ands	r3, r2
 8000980:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000982:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <SystemInit+0x100>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	2b00      	cmp	r3, #0
 800098c:	d007      	beq.n	800099e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800098e:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <SystemInit+0x100>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f023 030f 	bic.w	r3, r3, #15
 8000996:	4a24      	ldr	r2, [pc, #144]	; (8000a28 <SystemInit+0x100>)
 8000998:	f043 0307 	orr.w	r3, r3, #7
 800099c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <SystemInit+0x104>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <SystemInit+0x104>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <SystemInit+0x104>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <SystemInit+0x104>)
 80009b2:	4a20      	ldr	r2, [pc, #128]	; (8000a34 <SystemInit+0x10c>)
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <SystemInit+0x104>)
 80009b8:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <SystemInit+0x110>)
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <SystemInit+0x104>)
 80009be:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <SystemInit+0x114>)
 80009c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <SystemInit+0x104>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <SystemInit+0x104>)
 80009ca:	4a1c      	ldr	r2, [pc, #112]	; (8000a3c <SystemInit+0x114>)
 80009cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <SystemInit+0x104>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <SystemInit+0x104>)
 80009d6:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <SystemInit+0x114>)
 80009d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <SystemInit+0x104>)
 80009dc:	2200      	movs	r2, #0
 80009de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <SystemInit+0x104>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <SystemInit+0x104>)
 80009e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <SystemInit+0x104>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <SystemInit+0x118>)
 80009f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <SystemInit+0x118>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <SystemInit+0x11c>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <SystemInit+0x120>)
 8000a04:	4013      	ands	r3, r2
 8000a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a0a:	d202      	bcs.n	8000a12 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <SystemInit+0x124>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <SystemInit+0x128>)
 8000a14:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a18:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00
 8000a28:	52002000 	.word	0x52002000
 8000a2c:	58024400 	.word	0x58024400
 8000a30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a34:	02020200 	.word	0x02020200
 8000a38:	01ff0000 	.word	0x01ff0000
 8000a3c:	01010280 	.word	0x01010280
 8000a40:	580000c0 	.word	0x580000c0
 8000a44:	5c001000 	.word	0x5c001000
 8000a48:	ffff0000 	.word	0xffff0000
 8000a4c:	51008108 	.word	0x51008108
 8000a50:	52004000 	.word	0x52004000

08000a54 <dynamic_device_beacon_survey>:
#include "../mock/mock.h"
#include "../navigation/navigation.h"

#define OUTPUT_RESULTS 0

static char *dynamic_device_beacon_survey() {
 8000a54:	b5b0      	push	{r4, r5, r7, lr}
 8000a56:	b0e8      	sub	sp, #416	; 0x1a0
 8000a58:	af04      	add	r7, sp, #16
    // Auxiliary variables to help during simulations
    int with_error = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178


    float device_heading = 45.0;
 8000a60:	4b9e      	ldr	r3, [pc, #632]	; (8000cdc <dynamic_device_beacon_survey+0x288>)
 8000a62:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174



    const int amount_of_buffers = 2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    const int sample_size = 110;
 8000a6c:	236e      	movs	r3, #110	; 0x6e
 8000a6e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    const int sample_rate = 220;
 8000a72:	23dc      	movs	r3, #220	; 0xdc
 8000a74:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    const float error_check = 0.1;
 8000a78:	4b99      	ldr	r3, [pc, #612]	; (8000ce0 <dynamic_device_beacon_survey+0x28c>)
 8000a7a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    float norm_est;
    float norm_real;

    Coordinate origin = {0};
 8000a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]

    // Device velocity, in m/s
    Vector velocity_step = {.x = -0.02, .y = 0.03, .z = 0};
 8000a8a:	4a96      	ldr	r2, [pc, #600]	; (8000ce4 <dynamic_device_beacon_survey+0x290>)
 8000a8c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000a90:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Vector device_velocity = {.x = 0.0, .y = 0.0, .z = 0};
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000aa6:	f04f 0300 	mov.w	r3, #0
 8000aaa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    Vector device_position_offset = {0};
 8000aae:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
    Coordinate final_device_position = {0};
 8000aba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]

    // Mocked environment will be used to mock beacons and get the magnetic
    // field intensity from them.
    Environment mocked_environment = {0};
 8000ac6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
 8000ad6:	615a      	str	r2, [r3, #20]
 8000ad8:	619a      	str	r2, [r3, #24]
    Beacon *mocked_beacons;

    Coordinate mocked_beacons_positions[] = {
 8000ada:	4b83      	ldr	r3, [pc, #524]	; (8000ce8 <dynamic_device_beacon_survey+0x294>)
 8000adc:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000ae0:	461d      	mov	r5, r3
 8000ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000aee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        [1] = {.x = -1.5, .y = +1.5, .z = 0},
        [2] = {.x = +2.5, .y = +0.5, .z = 0},
        [3] = {.x = +1.5, .y = -1.5, .z = 0}};

    // Define device and its sensors
    Device device = {0};
 8000af2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000af6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000afa:	4618      	mov	r0, r3
 8000afc:	2340      	movs	r3, #64	; 0x40
 8000afe:	461a      	mov	r2, r3
 8000b00:	2100      	movs	r1, #0
 8000b02:	f00d fa35 	bl	800df70 <memset>

    Baseline baseline = {0};
 8000b06:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000b0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000b0e:	461a      	mov	r2, r3
 8000b10:	2300      	movs	r3, #0
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	6053      	str	r3, [r2, #4]

    const int amount_of_magnetic_sensors = 3;
 8000b16:	2303      	movs	r3, #3
 8000b18:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    MagneticSensor *device_sensors;

    Coordinate device_sensors_position[] = {
 8000b1c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000b20:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000b24:	4a71      	ldr	r2, [pc, #452]	; (8000cec <dynamic_device_beacon_survey+0x298>)
 8000b26:	461c      	mov	r4, r3
 8000b28:	4615      	mov	r5, r2
 8000b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b32:	682b      	ldr	r3, [r5, #0]
 8000b34:	6023      	str	r3, [r4, #0]
        [0] = {.x = -0.5, .y = -0.2886751345948, .z = 0},
        [1] = {.x = +0.0, .y = +0.5773502691869, .z = 0},
        [2] = {.x = +0.5, .y = -0.2886751345948, .z = 0}};

    const int sensors_i2c_address[] = {0xE1, 0xE2, 0xE3};
 8000b36:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000b3a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8000b3e:	4a6c      	ldr	r2, [pc, #432]	; (8000cf0 <dynamic_device_beacon_survey+0x29c>)
 8000b40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    const int sensors_i2c_interface[] = {0xE1, 0xE2, 0xE3};
 8000b46:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000b4a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8000b4e:	4a68      	ldr	r2, [pc, #416]	; (8000cf0 <dynamic_device_beacon_survey+0x29c>)
 8000b50:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b52:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Define environment with its beacons. No edges will be used at this moment
    Environment environment = {0};
 8000b56:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000b5a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000b5e:	461a      	mov	r2, r3
 8000b60:	2300      	movs	r3, #0
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	6053      	str	r3, [r2, #4]
 8000b66:	6093      	str	r3, [r2, #8]
 8000b68:	60d3      	str	r3, [r2, #12]
 8000b6a:	6113      	str	r3, [r2, #16]
 8000b6c:	6153      	str	r3, [r2, #20]
 8000b6e:	6193      	str	r3, [r2, #24]

    const int amount_of_beacons = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    Beacon *beacons;

    const float beacons_source_magnetic_moment = 6.999 * pow(10, -8);
 8000b76:	4b5f      	ldr	r3, [pc, #380]	; (8000cf4 <dynamic_device_beacon_survey+0x2a0>)
 8000b78:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    const float beacons_source_frequency[] = {36, 40, 80, 52};
 8000b7c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000b80:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000b84:	4a5c      	ldr	r2, [pc, #368]	; (8000cf8 <dynamic_device_beacon_survey+0x2a4>)
 8000b86:	461c      	mov	r4, r3
 8000b88:	4613      	mov	r3, r2
 8000b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    const int amount_of_edges = 10;
 8000b90:	230a      	movs	r3, #10
 8000b92:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    Coordinate *edges;

    // Initialize sensors, devices, beacons and environment
    device_sensors = (MagneticSensor *)malloc(sizeof(MagneticSensor) * amount_of_magnetic_sensors);
 8000b96:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	1a9b      	subs	r3, r3, r2
 8000ba0:	011b      	lsls	r3, r3, #4
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f00d f9c6 	bl	800df34 <malloc>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    for (int index = 0; index < amount_of_magnetic_sensors; index++) {
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8000bb4:	e041      	b.n	8000c3a <dynamic_device_beacon_survey+0x1e6>
        device_sensors[index].device_position = device_sensors_position[index];
 8000bb6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8000bba:	4613      	mov	r3, r2
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	1a9b      	subs	r3, r3, r2
 8000bc0:	011b      	lsls	r3, r3, #4
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000bc8:	1899      	adds	r1, r3, r2
 8000bca:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000bce:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 8000bd2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4413      	add	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	18c2      	adds	r2, r0, r3
 8000be0:	f101 0308 	add.w	r3, r1, #8
 8000be4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000be6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        initMagneticSensor(&device_sensors[index], sample_size, amount_of_buffers,
 8000bea:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8000bee:	4613      	mov	r3, r2
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	1a9b      	subs	r3, r3, r2
 8000bf4:	011b      	lsls	r3, r3, #4
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000bfc:	1898      	adds	r0, r3, r2
 8000bfe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000c02:	f8d7 4170 	ldr.w	r4, [r7, #368]	; 0x170
 8000c06:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000c0a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8000c0e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8000c12:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8000c16:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000c1a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8000c1e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8000c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	462b      	mov	r3, r5
 8000c2a:	4622      	mov	r2, r4
 8000c2c:	f002 ffb4 	bl	8003b98 <initMagneticSensor>
    for (int index = 0; index < amount_of_magnetic_sensors; index++) {
 8000c30:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000c34:	3301      	adds	r3, #1
 8000c36:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8000c3a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8000c3e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000c42:	429a      	cmp	r2, r3
 8000c44:	dbb7      	blt.n	8000bb6 <dynamic_device_beacon_survey+0x162>
                           sensors_i2c_address[index], sensors_i2c_interface[index]);
    }

    baseline.initial_point = &device_sensors[0].local_position;
 8000c46:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000c4a:	f103 0214 	add.w	r2, r3, #20
 8000c4e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000c52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c56:	601a      	str	r2, [r3, #0]
    baseline.ending_point = &device_sensors[2].local_position;
 8000c58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000c5c:	33e0      	adds	r3, #224	; 0xe0
 8000c5e:	f103 0214 	add.w	r2, r3, #20
 8000c62:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000c66:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c6a:	605a      	str	r2, [r3, #4]

    initDevice(&device, device_sensors, amount_of_magnetic_sensors);
 8000c6c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c70:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000c74:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 fad7 	bl	800322c <initDevice>
    setBaseline(&device, &baseline);
 8000c7e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000c82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 fb27 	bl	80032dc <setBaseline>

    // Check if device was correctly initialized
    mu_assert("error, beacon survey - device initialization",
 8000c8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 fb33 	bl	80032fe <isDeviceInitialized>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d001      	beq.n	8000ca2 <dynamic_device_beacon_survey+0x24e>
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <dynamic_device_beacon_survey+0x2a8>)
 8000ca0:	e197      	b.n	8000fd2 <dynamic_device_beacon_survey+0x57e>
              isDeviceInitialized(&device) == 1);

    beacons = (Beacon *)malloc(sizeof(Beacon) * amount_of_beacons);
 8000ca2:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	1a9b      	subs	r3, r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f00d f940 	bl	800df34 <malloc>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    mocked_beacons = (Beacon *)malloc(sizeof(Beacon) * amount_of_beacons);
 8000cba:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	1a9b      	subs	r3, r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f00d f934 	bl	800df34 <malloc>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

    for (int index = 0; index < amount_of_beacons; index++) {
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000cd8:	e06d      	b.n	8000db6 <dynamic_device_beacon_survey+0x362>
 8000cda:	bf00      	nop
 8000cdc:	42340000 	.word	0x42340000
 8000ce0:	3dcccccd 	.word	0x3dcccccd
 8000ce4:	08011f38 	.word	0x08011f38
 8000ce8:	08011f44 	.word	0x08011f44
 8000cec:	08011f74 	.word	0x08011f74
 8000cf0:	08011f98 	.word	0x08011f98
 8000cf4:	33964d69 	.word	0x33964d69
 8000cf8:	08011fa4 	.word	0x08011fa4
 8000cfc:	08011ec0 	.word	0x08011ec0
        initBeacon(&beacons[index],
 8000d00:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8000d04:	4613      	mov	r3, r2
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	1a9b      	subs	r3, r3, r2
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000d12:	1898      	adds	r0, r3, r2
 8000d14:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d18:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8000d1c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	edd3 7a00 	vldr	s15, [r3]
 8000d28:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8000d2c:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8000d30:	eef0 0a67 	vmov.f32	s1, s15
 8000d34:	ed97 0a56 	vldr	s0, [r7, #344]	; 0x158
 8000d38:	f002 f977 	bl	800302a <initBeacon>
                   beacons_source_magnetic_moment,
                   beacons_source_frequency[index],
                   sample_rate, sample_size);

        initBeacon(&mocked_beacons[index],
 8000d3c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8000d40:	4613      	mov	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	1a9b      	subs	r3, r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	461a      	mov	r2, r3
 8000d4a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000d4e:	1898      	adds	r0, r3, r2
 8000d50:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d54:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8000d58:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	edd3 7a00 	vldr	s15, [r3]
 8000d64:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8000d68:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8000d6c:	eef0 0a67 	vmov.f32	s1, s15
 8000d70:	ed97 0a56 	vldr	s0, [r7, #344]	; 0x158
 8000d74:	f002 f959 	bl	800302a <initBeacon>
                   beacons_source_magnetic_moment,
                   beacons_source_frequency[index],
                   sample_rate, sample_size);

        mocked_beacons[index].magnetic_field_source.position = mocked_beacons_positions[index];
 8000d78:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	1a9b      	subs	r3, r3, r2
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	461a      	mov	r2, r3
 8000d86:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000d8a:	1899      	adds	r1, r3, r2
 8000d8c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000d9c:	443b      	add	r3, r7
 8000d9e:	f1a3 02dc 	sub.w	r2, r3, #220	; 0xdc
 8000da2:	f101 0308 	add.w	r3, r1, #8
 8000da6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000da8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    for (int index = 0; index < amount_of_beacons; index++) {
 8000dac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000db0:	3301      	adds	r3, #1
 8000db2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000db6:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8000dba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	db9e      	blt.n	8000d00 <dynamic_device_beacon_survey+0x2ac>
    }

    initEnvironment(&environment, beacons, edges, amount_of_beacons, amount_of_edges);
 8000dc2:	f107 0010 	add.w	r0, r7, #16
 8000dc6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000dd0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000dd4:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8000dd8:	f002 fc16 	bl	8003608 <initEnvironment>
    initEnvironment(&mocked_environment, mocked_beacons, edges, amount_of_beacons, amount_of_edges);
 8000ddc:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 8000de0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000dea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000dee:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8000df2:	f002 fc09 	bl	8003608 <initEnvironment>

    // Check if environment was correctly initialized
    mu_assert("error, beacon survey - environment initialization",
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 fc5d 	bl	80036ba <isEnvironmentInitialized>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d001      	beq.n	8000e0a <dynamic_device_beacon_survey+0x3b6>
 8000e06:	4b75      	ldr	r3, [pc, #468]	; (8000fdc <dynamic_device_beacon_survey+0x588>)
 8000e08:	e0e3      	b.n	8000fd2 <dynamic_device_beacon_survey+0x57e>
              isEnvironmentInitialized(&environment) == 1);

    // start surveying beacons
    mockBeaconSurveyRun(
 8000e0a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8000e0e:	f107 0110 	add.w	r1, r7, #16
 8000e12:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000e16:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000e26:	f003 f986 	bl	8004136 <mockBeaconSurveyRun>
        &device, &environment,
        &mocked_environment,
        sample_rate, sample_size, with_error);

    estimateMagneticBeaconSourcePosition(&device, &environment);
 8000e2a:	f107 0210 	add.w	r2, r7, #16
 8000e2e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f003 fae1 	bl	80043fc <estimateMagneticBeaconSourcePosition>

    // check beacons surveyed

    for (int index = 0; index < amount_of_beacons; index++) {
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000e40:	e031      	b.n	8000ea6 <dynamic_device_beacon_survey+0x452>
        mu_assert("beacon survey error",
 8000e42:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000e46:	4613      	mov	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	1a9b      	subs	r3, r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	461a      	mov	r2, r3
 8000e50:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000e54:	4413      	add	r3, r2
 8000e56:	f103 0008 	add.w	r0, r3, #8
 8000e5a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000e5e:	4613      	mov	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	461a      	mov	r2, r3
 8000e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000e6c:	4413      	add	r3, r2
 8000e6e:	3308      	adds	r3, #8
 8000e70:	4619      	mov	r1, r3
 8000e72:	f003 fe85 	bl	8004b80 <calculatePositionError>
 8000e76:	eeb0 7a40 	vmov.f32	s14, s0
 8000e7a:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8000e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e86:	bfcc      	ite	gt
 8000e88:	2301      	movgt	r3, #1
 8000e8a:	2300      	movle	r3, #0
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	f083 0301 	eor.w	r3, r3, #1
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <dynamic_device_beacon_survey+0x448>
 8000e98:	4b51      	ldr	r3, [pc, #324]	; (8000fe0 <dynamic_device_beacon_survey+0x58c>)
 8000e9a:	e09a      	b.n	8000fd2 <dynamic_device_beacon_survey+0x57e>
    for (int index = 0; index < amount_of_beacons; index++) {
 8000e9c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ea6:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000eaa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	dbc7      	blt.n	8000e42 <dynamic_device_beacon_survey+0x3ee>

    if (OUTPUT_RESULTS == 1) {
        printf("interation, vx, vy, vz, attitude_x, attitude_y, attitude_z, heading, heading_error, est_position_x, est_position_y, est_position_z, real_position_x, real_position_y, real_position_z, norm_est, norm_real, norm_error, error\r\n");
    }

    for (int velocity_increase = 1; velocity_increase < 10; velocity_increase++) {
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000eb8:	e073      	b.n	8000fa2 <dynamic_device_beacon_survey+0x54e>
        device_velocity.x += velocity_step.x;
 8000eba:	ed97 7a46 	vldr	s14, [r7, #280]	; 0x118
 8000ebe:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8000ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec6:	edc7 7a46 	vstr	s15, [r7, #280]	; 0x118
        device_velocity.y += velocity_step.y;
 8000eca:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 8000ece:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 8000ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed6:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
        device_velocity.z += velocity_step.z;
 8000eda:	ed97 7a48 	vldr	s14, [r7, #288]	; 0x120
 8000ede:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8000ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee6:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120

        // final_device_position.x = 0;
        // final_device_position.y = 0;
        // final_device_position.z = 0;

        device_position_offset.x = 0;
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        device_position_offset.y = 0;
 8000ef2:	f04f 0300 	mov.w	r3, #0
 8000ef6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        device_position_offset.z = 0;
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

        for (int interation = 0; interation < 50; interation++) {
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000f08:	e042      	b.n	8000f90 <dynamic_device_beacon_survey+0x53c>
            // Start sampling environment magnetic field from the new position
            mockMagneticFieldSampleRun(
 8000f0a:	f107 0410 	add.w	r4, r7, #16
 8000f0e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8000f12:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8000f16:	edd7 6a46 	vldr	s13, [r7, #280]	; 0x118
 8000f1a:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 8000f1e:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8000f22:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000f26:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	4623      	mov	r3, r4
 8000f3a:	edd7 1a5d 	vldr	s3, [r7, #372]	; 0x174
 8000f3e:	eeb0 0a66 	vmov.f32	s0, s13
 8000f42:	eef0 0a47 	vmov.f32	s1, s14
 8000f46:	eeb0 1a67 	vmov.f32	s2, s15
 8000f4a:	f003 f953 	bl	80041f4 <mockMagneticFieldSampleRun>
                &device, device_velocity, device_heading,
                &final_device_position, &device_position_offset,
                &environment, sample_rate, sample_size, with_error);

            // Update device position with sensors estimations
            updateDevicePosition(&device, &environment);
 8000f4e:	f107 0210 	add.w	r2, r7, #16
 8000f52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f002 fa4c 	bl	80033f6 <updateDevicePosition>

            norm_est = euclideanDistance2(&origin, &device.position);
 8000f5e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f003 fd27 	bl	80049bc <euclideanDistance2>
 8000f6e:	ed87 0a50 	vstr	s0, [r7, #320]	; 0x140
            norm_real = euclideanDistance2(&origin, &final_device_position);
 8000f72:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 fd1d 	bl	80049bc <euclideanDistance2>
 8000f82:	ed87 0a4f 	vstr	s0, [r7, #316]	; 0x13c
        for (int interation = 0; interation < 50; interation++) {
 8000f86:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000f90:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000f94:	2b31      	cmp	r3, #49	; 0x31
 8000f96:	ddb8      	ble.n	8000f0a <dynamic_device_beacon_survey+0x4b6>
    for (int velocity_increase = 1; velocity_increase < 10; velocity_increase++) {
 8000f98:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000fa2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000fa6:	2b09      	cmp	r3, #9
 8000fa8:	dd87      	ble.n	8000eba <dynamic_device_beacon_survey+0x466>
            }
        }
    }

    // Reset global variables and free variables
    phases_initialized = 0;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <dynamic_device_beacon_survey+0x590>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
    amount_of_phases = 0;
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <dynamic_device_beacon_survey+0x594>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]

    free(phases);
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <dynamic_device_beacon_survey+0x598>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f00c ffc2 	bl	800df44 <free>
    free(device_sensors);
 8000fc0:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000fc4:	f00c ffbe 	bl	800df44 <free>
    free(beacons);
 8000fc8:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8000fcc:	f00c ffba 	bl	800df44 <free>

    return 0;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bdb0      	pop	{r4, r5, r7, pc}
 8000fdc:	08011ef0 	.word	0x08011ef0
 8000fe0:	08011f24 	.word	0x08011f24
 8000fe4:	240007f8 	.word	0x240007f8
 8000fe8:	240007fc 	.word	0x240007fc
 8000fec:	240007f4 	.word	0x240007f4

08000ff0 <all_dynamic_tests>:
/**
 * @brief Runs all dynamic tests
 *
 * @return char* NULL
 */
static char *all_dynamic_tests() {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
    mu_run_test(dynamic_device_beacon_survey);
 8000ff6:	f7ff fd2d 	bl	8000a54 <dynamic_device_beacon_survey>
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <all_dynamic_tests+0x2c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	4a06      	ldr	r2, [pc, #24]	; (800101c <all_dynamic_tests+0x2c>)
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <all_dynamic_tests+0x20>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	e000      	b.n	8001012 <all_dynamic_tests+0x22>

    return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	24000200 	.word	0x24000200

08001020 <all_static_tests>:
/**
 * @brief Runs all static tests
 *
 * @return char* NULL
 */
static char *all_static_tests() {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
    mu_run_test(static_device_beacon_survey_no_error);
 8001026:	f000 f81f 	bl	8001068 <static_device_beacon_survey_no_error>
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <all_static_tests+0x44>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <all_static_tests+0x44>)
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <all_static_tests+0x20>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	e00d      	b.n	800105c <all_static_tests+0x3c>
    mu_run_test(static_device_beacon_survey_with_error);
 8001040:	f000 fb58 	bl	80016f4 <static_device_beacon_survey_with_error>
 8001044:	6038      	str	r0, [r7, #0]
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <all_static_tests+0x44>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	4a05      	ldr	r2, [pc, #20]	; (8001064 <all_static_tests+0x44>)
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <all_static_tests+0x3a>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	e000      	b.n	800105c <all_static_tests+0x3c>

    return 0;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	24000200 	.word	0x24000200

08001068 <static_device_beacon_survey_no_error>:
 * positions are compared to the actual positions of the beacons to check if
 * the functionality works correctly.
 *
 * @return char* - Null if the test passed, an error message otherwise.
 */
static char *static_device_beacon_survey_no_error() {
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b0de      	sub	sp, #376	; 0x178
 800106c:	af04      	add	r7, sp, #16
    // Auxiliary variables to help during simulations
    int with_error = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    const float error_check = 0.1;
 8001074:	4bd4      	ldr	r3, [pc, #848]	; (80013c8 <static_device_beacon_survey_no_error+0x360>)
 8001076:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

    const int amount_of_buffers = 2;
 800107a:	2302      	movs	r3, #2
 800107c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    const int sample_size = 110;
 8001080:	236e      	movs	r3, #110	; 0x6e
 8001082:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    const int sample_rate = 220;
 8001086:	23dc      	movs	r3, #220	; 0xdc
 8001088:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

    float device_heading = 0.0;
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    Vector device_velocity = {0};
 8001094:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
    Vector device_position_offset = {0};
 80010a0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
    Coordinate final_device_position = {0};
 80010ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]

    // Mocked environment will be used to mock beacons and get the magnetic
    // field intensity from them.
    Environment mocked_environment = {0};
 80010b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
 80010c8:	615a      	str	r2, [r3, #20]
 80010ca:	619a      	str	r2, [r3, #24]
    Beacon *mocked_beacons;

    const int amount_of_beacons = 4;
 80010cc:	2304      	movs	r3, #4
 80010ce:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    const float beacons_source_magnetic_moment = 0.6997897635871264 * 1.257 * pow(10, -6);
 80010d2:	4bbe      	ldr	r3, [pc, #760]	; (80013cc <static_device_beacon_survey_no_error+0x364>)
 80010d4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    const float beacons_source_frequency[] = {36, 40, 80, 52};
 80010d8:	4bbd      	ldr	r3, [pc, #756]	; (80013d0 <static_device_beacon_survey_no_error+0x368>)
 80010da:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 80010de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    const int amount_of_edges = 10;
 80010e4:	230a      	movs	r3, #10
 80010e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    Coordinate *edges;

    Coordinate mocked_beacons_positions[] = {
 80010ea:	4bba      	ldr	r3, [pc, #744]	; (80013d4 <static_device_beacon_survey_no_error+0x36c>)
 80010ec:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 80010f0:	461d      	mov	r5, r3
 80010f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        [1] = {.x = -1.5, .y = +1.5, .z = 0},
        [2] = {.x = +2.5, .y = +0.5, .z = 0},
        [3] = {.x = +1.5, .y = -1.5, .z = 0}};

    // Define device and its sensors
    Device device = {0};
 8001102:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800110a:	4618      	mov	r0, r3
 800110c:	2340      	movs	r3, #64	; 0x40
 800110e:	461a      	mov	r2, r3
 8001110:	2100      	movs	r1, #0
 8001112:	f00c ff2d 	bl	800df70 <memset>

    Baseline baseline = {0};
 8001116:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800111a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800111e:	461a      	mov	r2, r3
 8001120:	2300      	movs	r3, #0
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	6053      	str	r3, [r2, #4]

    const int amount_of_magnetic_sensors = 3;
 8001126:	2303      	movs	r3, #3
 8001128:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    MagneticSensor *device_sensors;

    Coordinate device_sensors_position[] = {
 800112c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001130:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001134:	4aa8      	ldr	r2, [pc, #672]	; (80013d8 <static_device_beacon_survey_no_error+0x370>)
 8001136:	461c      	mov	r4, r3
 8001138:	4615      	mov	r5, r2
 800113a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001142:	682b      	ldr	r3, [r5, #0]
 8001144:	6023      	str	r3, [r4, #0]
        [0] = {.x = -0.5, .y = -0.2886751345948, .z = 0},
        [1] = {.x = +0.0, .y = +0.5773502691869, .z = 0},
        [2] = {.x = +0.5, .y = -0.2886751345948, .z = 0}};

    const int sensors_i2c_address[] = {0xE1, 0xE2, 0xE3};
 8001146:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800114a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800114e:	4aa3      	ldr	r2, [pc, #652]	; (80013dc <static_device_beacon_survey_no_error+0x374>)
 8001150:	ca07      	ldmia	r2, {r0, r1, r2}
 8001152:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    const int sensors_i2c_interface[] = {0xE1, 0xE2, 0xE3};
 8001156:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800115a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800115e:	4a9f      	ldr	r2, [pc, #636]	; (80013dc <static_device_beacon_survey_no_error+0x374>)
 8001160:	ca07      	ldmia	r2, {r0, r1, r2}
 8001162:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Define environment with its beacons. No edges will be used at this moment
    Environment environment = {0};
 8001166:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800116a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800116e:	461a      	mov	r2, r3
 8001170:	2300      	movs	r3, #0
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	6053      	str	r3, [r2, #4]
 8001176:	6093      	str	r3, [r2, #8]
 8001178:	60d3      	str	r3, [r2, #12]
 800117a:	6113      	str	r3, [r2, #16]
 800117c:	6153      	str	r3, [r2, #20]
 800117e:	6193      	str	r3, [r2, #24]

    Beacon *beacons;

    // Initialize sensors, devices, beacons and environment
    device_sensors = (MagneticSensor *)malloc(sizeof(MagneticSensor) * amount_of_magnetic_sensors);
 8001180:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	4618      	mov	r0, r3
 800118e:	f00c fed1 	bl	800df34 <malloc>
 8001192:	4603      	mov	r3, r0
 8001194:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    for (int index = 0; index < amount_of_magnetic_sensors; index++) {
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800119e:	e041      	b.n	8001224 <static_device_beacon_survey_no_error+0x1bc>
        device_sensors[index].device_position = device_sensors_position[index];
 80011a0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	1a9b      	subs	r3, r3, r2
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	461a      	mov	r2, r3
 80011ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80011b2:	1899      	adds	r1, r3, r2
 80011b4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80011b8:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 80011bc:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	18c2      	adds	r2, r0, r3
 80011ca:	f101 0308 	add.w	r3, r1, #8
 80011ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80011d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        initMagneticSensor(&device_sensors[index], sample_size, amount_of_buffers,
 80011d4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80011d8:	4613      	mov	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	461a      	mov	r2, r3
 80011e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80011e6:	1898      	adds	r0, r3, r2
 80011e8:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80011ec:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 80011f0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80011f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80011f8:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80011fc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8001200:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001204:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001208:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800120c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	462b      	mov	r3, r5
 8001214:	4622      	mov	r2, r4
 8001216:	f002 fcbf 	bl	8003b98 <initMagneticSensor>
    for (int index = 0; index < amount_of_magnetic_sensors; index++) {
 800121a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800121e:	3301      	adds	r3, #1
 8001220:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001224:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001228:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800122c:	429a      	cmp	r2, r3
 800122e:	dbb7      	blt.n	80011a0 <static_device_beacon_survey_no_error+0x138>
                           sensors_i2c_address[index], sensors_i2c_interface[index]);
    }

    baseline.initial_point = &device_sensors[0].local_position;
 8001230:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001234:	f103 0214 	add.w	r2, r3, #20
 8001238:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800123c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001240:	601a      	str	r2, [r3, #0]
    baseline.ending_point = &device_sensors[2].local_position;
 8001242:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001246:	33e0      	adds	r3, #224	; 0xe0
 8001248:	f103 0214 	add.w	r2, r3, #20
 800124c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001250:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001254:	605a      	str	r2, [r3, #4]

    initDevice(&device, device_sensors, amount_of_magnetic_sensors);
 8001256:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800125a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800125e:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8001262:	4618      	mov	r0, r3
 8001264:	f001 ffe2 	bl	800322c <initDevice>
    setBaseline(&device, &baseline);
 8001268:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800126c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f002 f832 	bl	80032dc <setBaseline>

    // Check if device was correctly initialized
    mu_assert("error, beacon survey - device initialization",
 8001278:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800127c:	4618      	mov	r0, r3
 800127e:	f002 f83e 	bl	80032fe <isDeviceInitialized>
 8001282:	4603      	mov	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	d001      	beq.n	800128c <static_device_beacon_survey_no_error+0x224>
 8001288:	4b55      	ldr	r3, [pc, #340]	; (80013e0 <static_device_beacon_survey_no_error+0x378>)
 800128a:	e214      	b.n	80016b6 <static_device_beacon_survey_no_error+0x64e>
              isDeviceInitialized(&device) == 1);

    beacons = (Beacon *)malloc(sizeof(Beacon) * amount_of_beacons);
 800128c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4618      	mov	r0, r3
 800129a:	f00c fe4b 	bl	800df34 <malloc>
 800129e:	4603      	mov	r3, r0
 80012a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    mocked_beacons = (Beacon *)malloc(sizeof(Beacon) * amount_of_beacons);
 80012a4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80012a8:	4613      	mov	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	1a9b      	subs	r3, r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4618      	mov	r0, r3
 80012b2:	f00c fe3f 	bl	800df34 <malloc>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

    for (int index = 0; index < amount_of_beacons; index++) {
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80012c2:	e058      	b.n	8001376 <static_device_beacon_survey_no_error+0x30e>
        initBeacon(&beacons[index],
 80012c4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80012c8:	4613      	mov	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	1a9b      	subs	r3, r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	461a      	mov	r2, r3
 80012d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012d6:	1898      	adds	r0, r3, r2
 80012d8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012e2:	443b      	add	r3, r7
 80012e4:	3b94      	subs	r3, #148	; 0x94
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80012ee:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80012f2:	eef0 0a67 	vmov.f32	s1, s15
 80012f6:	ed97 0a4f 	vldr	s0, [r7, #316]	; 0x13c
 80012fa:	f001 fe96 	bl	800302a <initBeacon>
                   beacons_source_magnetic_moment,
                   beacons_source_frequency[index],
                   sample_rate, sample_size);

        initBeacon(&mocked_beacons[index],
 80012fe:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8001302:	4613      	mov	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	1a9b      	subs	r3, r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	461a      	mov	r2, r3
 800130c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001310:	1898      	adds	r0, r3, r2
 8001312:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800131c:	443b      	add	r3, r7
 800131e:	3b94      	subs	r3, #148	; 0x94
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001328:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800132c:	eef0 0a67 	vmov.f32	s1, s15
 8001330:	ed97 0a4f 	vldr	s0, [r7, #316]	; 0x13c
 8001334:	f001 fe79 	bl	800302a <initBeacon>
                   beacons_source_magnetic_moment,
                   beacons_source_frequency[index],
                   sample_rate, sample_size);

        mocked_beacons[index].magnetic_field_source.position = mocked_beacons_positions[index];
 8001338:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	461a      	mov	r2, r3
 8001346:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800134a:	1899      	adds	r1, r3, r2
 800134c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800135c:	443b      	add	r3, r7
 800135e:	f1a3 02c4 	sub.w	r2, r3, #196	; 0xc4
 8001362:	f101 0308 	add.w	r3, r1, #8
 8001366:	ca07      	ldmia	r2, {r0, r1, r2}
 8001368:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    for (int index = 0; index < amount_of_beacons; index++) {
 800136c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001370:	3301      	adds	r3, #1
 8001372:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001376:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800137a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800137e:	429a      	cmp	r2, r3
 8001380:	dba0      	blt.n	80012c4 <static_device_beacon_survey_no_error+0x25c>
    }

    initEnvironment(&environment, beacons, edges, amount_of_beacons, amount_of_edges);
 8001382:	4638      	mov	r0, r7
 8001384:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800138e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001392:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8001396:	f002 f937 	bl	8003608 <initEnvironment>
    initEnvironment(&mocked_environment, mocked_beacons, edges, amount_of_beacons, amount_of_edges);
 800139a:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 800139e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80013a8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80013ac:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80013b0:	f002 f92a 	bl	8003608 <initEnvironment>

    // Check if environment was correctly initialized
    mu_assert("error, beacon survey - environment initialization",
 80013b4:	463b      	mov	r3, r7
 80013b6:	4618      	mov	r0, r3
 80013b8:	f002 f97f 	bl	80036ba <isEnvironmentInitialized>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d012      	beq.n	80013e8 <static_device_beacon_survey_no_error+0x380>
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <static_device_beacon_survey_no_error+0x37c>)
 80013c4:	e177      	b.n	80016b6 <static_device_beacon_survey_no_error+0x64e>
 80013c6:	bf00      	nop
 80013c8:	3dcccccd 	.word	0x3dcccccd
 80013cc:	356c201b 	.word	0x356c201b
 80013d0:	08011fa4 	.word	0x08011fa4
 80013d4:	08011f44 	.word	0x08011f44
 80013d8:	08011f74 	.word	0x08011f74
 80013dc:	08011f98 	.word	0x08011f98
 80013e0:	08011ec0 	.word	0x08011ec0
 80013e4:	08011ef0 	.word	0x08011ef0
              isEnvironmentInitialized(&environment) == 1);

    // start surveying beacons
    mockBeaconSurveyRun(
 80013e8:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80013ec:	4639      	mov	r1, r7
 80013ee:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80013f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001402:	f002 fe98 	bl	8004136 <mockBeaconSurveyRun>
        &device, &environment,
        &mocked_environment,
        sample_rate, sample_size, with_error);

    estimateMagneticBeaconSourcePosition(&device, &environment);
 8001406:	463a      	mov	r2, r7
 8001408:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fff4 	bl	80043fc <estimateMagneticBeaconSourcePosition>

    // check beacons surveyed
    for (int index = 0; index < amount_of_beacons; index++) {
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800141a:	e031      	b.n	8001480 <static_device_beacon_survey_no_error+0x418>
        mu_assert("beacon survey error",
 800141c:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001420:	4613      	mov	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	1a9b      	subs	r3, r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	461a      	mov	r2, r3
 800142a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800142e:	4413      	add	r3, r2
 8001430:	f103 0008 	add.w	r0, r3, #8
 8001434:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001438:	4613      	mov	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	1a9b      	subs	r3, r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	461a      	mov	r2, r3
 8001442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001446:	4413      	add	r3, r2
 8001448:	3308      	adds	r3, #8
 800144a:	4619      	mov	r1, r3
 800144c:	f003 fb98 	bl	8004b80 <calculatePositionError>
 8001450:	eeb0 7a40 	vmov.f32	s14, s0
 8001454:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8001458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	bfcc      	ite	gt
 8001462:	2301      	movgt	r3, #1
 8001464:	2300      	movle	r3, #0
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f083 0301 	eor.w	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <static_device_beacon_survey_no_error+0x40e>
 8001472:	4b93      	ldr	r3, [pc, #588]	; (80016c0 <static_device_beacon_survey_no_error+0x658>)
 8001474:	e11f      	b.n	80016b6 <static_device_beacon_survey_no_error+0x64e>
    for (int index = 0; index < amount_of_beacons; index++) {
 8001476:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800147a:	3301      	adds	r3, #1
 800147c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001480:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001484:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001488:	429a      	cmp	r2, r3
 800148a:	dbc7      	blt.n	800141c <static_device_beacon_survey_no_error+0x3b4>
                  calculatePositionError(&mocked_beacons[index].magnetic_field_source.position,
                                         &beacons[index].magnetic_field_source.position) < error_check);
    }

    // now update device position after move
    device_position_offset.x = 2.4;
 800148c:	4b8d      	ldr	r3, [pc, #564]	; (80016c4 <static_device_beacon_survey_no_error+0x65c>)
 800148e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    device_position_offset.y = 1.8;
 8001492:	4b8d      	ldr	r3, [pc, #564]	; (80016c8 <static_device_beacon_survey_no_error+0x660>)
 8001494:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    device_position_offset.z = 0.0;
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    // Start sampling environment magnetic field from the new position
    mockMagneticFieldSampleRun(
 80014a0:	463c      	mov	r4, r7
 80014a2:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80014a6:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80014aa:	edd7 6a46 	vldr	s13, [r7, #280]	; 0x118
 80014ae:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 80014b2:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 80014b6:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80014ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014be:	9302      	str	r3, [sp, #8]
 80014c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	4623      	mov	r3, r4
 80014ce:	edd7 1a51 	vldr	s3, [r7, #324]	; 0x144
 80014d2:	eeb0 0a66 	vmov.f32	s0, s13
 80014d6:	eef0 0a47 	vmov.f32	s1, s14
 80014da:	eeb0 1a67 	vmov.f32	s2, s15
 80014de:	f002 fe89 	bl	80041f4 <mockMagneticFieldSampleRun>
        &device, device_velocity, device_heading,
        &final_device_position, &device_position_offset,
        &environment, sample_rate, sample_size, with_error);

    // Update device position with sensors estimations
    updateDevicePosition(&device, &environment);
 80014e2:	463a      	mov	r2, r7
 80014e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014e8:	4611      	mov	r1, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f001 ff83 	bl	80033f6 <updateDevicePosition>

    mu_assert("device survey 01 error",
 80014f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80014f4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 fb40 	bl	8004b80 <calculatePositionError>
 8001500:	eeb0 7a40 	vmov.f32	s14, s0
 8001504:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8001508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001510:	bfcc      	ite	gt
 8001512:	2301      	movgt	r3, #1
 8001514:	2300      	movle	r3, #0
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f083 0301 	eor.w	r3, r3, #1
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <static_device_beacon_survey_no_error+0x4be>
 8001522:	4b6a      	ldr	r3, [pc, #424]	; (80016cc <static_device_beacon_survey_no_error+0x664>)
 8001524:	e0c7      	b.n	80016b6 <static_device_beacon_survey_no_error+0x64e>
              calculatePositionError(&final_device_position,
                                     &device.position) < error_check);

    // now update device position after move
    device_position_offset.x = 0.2;
 8001526:	4b6a      	ldr	r3, [pc, #424]	; (80016d0 <static_device_beacon_survey_no_error+0x668>)
 8001528:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    device_position_offset.y = 1.2;
 800152c:	4b69      	ldr	r3, [pc, #420]	; (80016d4 <static_device_beacon_survey_no_error+0x66c>)
 800152e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    device_position_offset.z = 0.0;
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    // Start sampling environment magnetic field from the new position
    mockMagneticFieldSampleRun(
 800153a:	463c      	mov	r4, r7
 800153c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001540:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001544:	edd7 6a46 	vldr	s13, [r7, #280]	; 0x118
 8001548:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 800154c:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8001550:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001554:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	4623      	mov	r3, r4
 8001568:	edd7 1a51 	vldr	s3, [r7, #324]	; 0x144
 800156c:	eeb0 0a66 	vmov.f32	s0, s13
 8001570:	eef0 0a47 	vmov.f32	s1, s14
 8001574:	eeb0 1a67 	vmov.f32	s2, s15
 8001578:	f002 fe3c 	bl	80041f4 <mockMagneticFieldSampleRun>
        &device, device_velocity, device_heading,
        &final_device_position, &device_position_offset,
        &environment, sample_rate, sample_size, with_error);

    // Update device position with sensors estimations
    updateDevicePosition(&device, &environment);
 800157c:	463a      	mov	r2, r7
 800157e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f001 ff36 	bl	80033f6 <updateDevicePosition>

    mu_assert("device survey 02 error",
 800158a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800158e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f003 faf3 	bl	8004b80 <calculatePositionError>
 800159a:	eeb0 7a40 	vmov.f32	s14, s0
 800159e:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 80015a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	bfcc      	ite	gt
 80015ac:	2301      	movgt	r3, #1
 80015ae:	2300      	movle	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f083 0301 	eor.w	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <static_device_beacon_survey_no_error+0x558>
 80015bc:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <static_device_beacon_survey_no_error+0x670>)
 80015be:	e07a      	b.n	80016b6 <static_device_beacon_survey_no_error+0x64e>
              calculatePositionError(&final_device_position,
                                     &device.position) < error_check);

    // Rotate device position to check attitude and heading
    device_heading = 45;
 80015c0:	4b46      	ldr	r3, [pc, #280]	; (80016dc <static_device_beacon_survey_no_error+0x674>)
 80015c2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    // Start sampling environment magnetic field from the new position
    mockMagneticFieldSampleRun(
 80015c6:	463c      	mov	r4, r7
 80015c8:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80015cc:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80015d0:	edd7 6a46 	vldr	s13, [r7, #280]	; 0x118
 80015d4:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 80015d8:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 80015dc:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80015e0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80015e4:	9302      	str	r3, [sp, #8]
 80015e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	4623      	mov	r3, r4
 80015f4:	edd7 1a51 	vldr	s3, [r7, #324]	; 0x144
 80015f8:	eeb0 0a66 	vmov.f32	s0, s13
 80015fc:	eef0 0a47 	vmov.f32	s1, s14
 8001600:	eeb0 1a67 	vmov.f32	s2, s15
 8001604:	f002 fdf6 	bl	80041f4 <mockMagneticFieldSampleRun>
        &device, device_velocity, device_heading,
        &final_device_position, &device_position_offset,
        &environment, sample_rate, sample_size, with_error);

    // Update device position with sensors estimations
    updateDevicePosition(&device, &environment);
 8001608:	463a      	mov	r2, r7
 800160a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f001 fef0 	bl	80033f6 <updateDevicePosition>

    mu_assert("device survey 03 position error",
 8001616:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800161a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f003 faad 	bl	8004b80 <calculatePositionError>
 8001626:	eeb0 7a40 	vmov.f32	s14, s0
 800162a:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 800162e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	bfcc      	ite	gt
 8001638:	2301      	movgt	r3, #1
 800163a:	2300      	movle	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f083 0301 	eor.w	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <static_device_beacon_survey_no_error+0x5e4>
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <static_device_beacon_survey_no_error+0x678>)
 800164a:	e034      	b.n	80016b6 <static_device_beacon_survey_no_error+0x64e>
              calculatePositionError(&final_device_position,
                                     &device.position) < error_check);

    mu_assert("device survey 03 heading error",
 800164c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001654:	ed93 7b06 	vldr	d7, [r3, #24]
 8001658:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800165c:	eef0 0a67 	vmov.f32	s1, s15
 8001660:	ed97 0a51 	vldr	s0, [r7, #324]	; 0x144
 8001664:	f003 fac4 	bl	8004bf0 <calculateError>
 8001668:	eeb0 7a40 	vmov.f32	s14, s0
 800166c:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8001670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	bfcc      	ite	gt
 800167a:	2301      	movgt	r3, #1
 800167c:	2300      	movle	r3, #0
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f083 0301 	eor.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <static_device_beacon_survey_no_error+0x626>
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <static_device_beacon_survey_no_error+0x67c>)
 800168c:	e013      	b.n	80016b6 <static_device_beacon_survey_no_error+0x64e>
              calculateError(device_heading,
                             device.heading) < error_check);

    // Reset global variables and free variables
    phases_initialized = 0;
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <static_device_beacon_survey_no_error+0x680>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
    amount_of_phases = 0;
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <static_device_beacon_survey_no_error+0x684>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]

    free(phases);
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <static_device_beacon_survey_no_error+0x688>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f00c fc50 	bl	800df44 <free>
    free(device_sensors);
 80016a4:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80016a8:	f00c fc4c 	bl	800df44 <free>
    free(beacons);
 80016ac:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80016b0:	f00c fc48 	bl	800df44 <free>

    return 0;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 80016bc:	46bd      	mov	sp, r7
 80016be:	bdb0      	pop	{r4, r5, r7, pc}
 80016c0:	08011f24 	.word	0x08011f24
 80016c4:	4019999a 	.word	0x4019999a
 80016c8:	3fe66666 	.word	0x3fe66666
 80016cc:	08011fb4 	.word	0x08011fb4
 80016d0:	3e4ccccd 	.word	0x3e4ccccd
 80016d4:	3f99999a 	.word	0x3f99999a
 80016d8:	08011fcc 	.word	0x08011fcc
 80016dc:	42340000 	.word	0x42340000
 80016e0:	08011fe4 	.word	0x08011fe4
 80016e4:	08012004 	.word	0x08012004
 80016e8:	240007f8 	.word	0x240007f8
 80016ec:	240007fc 	.word	0x240007fc
 80016f0:	240007f4 	.word	0x240007f4

080016f4 <static_device_beacon_survey_with_error>:

static char *static_device_beacon_survey_with_error() {
 80016f4:	b5b0      	push	{r4, r5, r7, lr}
 80016f6:	b0e4      	sub	sp, #400	; 0x190
 80016f8:	af04      	add	r7, sp, #16
    // Auxiliary variables to help during simulations
    int with_error = 1;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    const float error_check = 0.1;
 8001700:	4ba3      	ldr	r3, [pc, #652]	; (8001990 <static_device_beacon_survey_with_error+0x29c>)
 8001702:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

    const int amount_of_buffers = 2;
 8001706:	2302      	movs	r3, #2
 8001708:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    const int sample_size = 110;
 800170c:	236e      	movs	r3, #110	; 0x6e
 800170e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    const int sample_rate = 220;
 8001712:	23dc      	movs	r3, #220	; 0xdc
 8001714:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

    float device_heading = 0.0;
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    Vector device_velocity = {0};
 8001720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
    Vector device_position_offset = {0};
 800172c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
    Coordinate final_device_position = {0};
 8001738:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]

    // Mocked environment will be used to mock beacons and get the magnetic
    // field intensity from them.
    Environment mocked_environment = {0};
 8001744:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
 8001754:	615a      	str	r2, [r3, #20]
 8001756:	619a      	str	r2, [r3, #24]
    Beacon *mocked_beacons;

    const int amount_of_beacons = 4;
 8001758:	2304      	movs	r3, #4
 800175a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    const float beacons_source_magnetic_moment = 0.6997897635871264 * 1.257 * pow(10, -6);
 800175e:	4b8d      	ldr	r3, [pc, #564]	; (8001994 <static_device_beacon_survey_with_error+0x2a0>)
 8001760:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    const float beacons_source_frequency[] = {36, 40, 80, 52};
 8001764:	4b8c      	ldr	r3, [pc, #560]	; (8001998 <static_device_beacon_survey_with_error+0x2a4>)
 8001766:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 800176a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800176c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    const int amount_of_edges = 10;
 8001770:	230a      	movs	r3, #10
 8001772:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    Coordinate *edges;

    Coordinate mocked_beacons_positions[] = {
 8001776:	4b89      	ldr	r3, [pc, #548]	; (800199c <static_device_beacon_survey_with_error+0x2a8>)
 8001778:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 800177c:	461d      	mov	r5, r3
 800177e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001786:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800178a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        [1] = {.x = -1.5, .y = +1.5, .z = 0},
        [2] = {.x = +2.5, .y = +0.5, .z = 0},
        [3] = {.x = +1.5, .y = -1.5, .z = 0}};

    // Define device and its sensors
    Device device = {0};
 800178e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001796:	4618      	mov	r0, r3
 8001798:	2340      	movs	r3, #64	; 0x40
 800179a:	461a      	mov	r2, r3
 800179c:	2100      	movs	r1, #0
 800179e:	f00c fbe7 	bl	800df70 <memset>

    Baseline baseline = {0};
 80017a2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80017a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017aa:	461a      	mov	r2, r3
 80017ac:	2300      	movs	r3, #0
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	6053      	str	r3, [r2, #4]

    const int amount_of_magnetic_sensors = 3;
 80017b2:	2303      	movs	r3, #3
 80017b4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    MagneticSensor *device_sensors;
    MagneticSensorCharacteristic sensor_characteristic = {
 80017b8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80017bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017c0:	4a77      	ldr	r2, [pc, #476]	; (80019a0 <static_device_beacon_survey_with_error+0x2ac>)
 80017c2:	461c      	mov	r4, r3
 80017c4:	4615      	mov	r5, r2
 80017c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ca:	682b      	ldr	r3, [r5, #0]
 80017cc:	6023      	str	r3, [r4, #0]
            .upper = 8.1 * pow(10, -4)},
        .resolution = 2.0 * pow(10, -7),
        .noise_amplitude = 2,
        .overflow_mode = 0};

    Coordinate device_sensors_position[] = {
 80017ce:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80017d2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017d6:	4a73      	ldr	r2, [pc, #460]	; (80019a4 <static_device_beacon_survey_with_error+0x2b0>)
 80017d8:	461c      	mov	r4, r3
 80017da:	4615      	mov	r5, r2
 80017dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e4:	682b      	ldr	r3, [r5, #0]
 80017e6:	6023      	str	r3, [r4, #0]
        [0] = {.x = -0.5, .y = -0.2886751345948, .z = 0},
        [1] = {.x = +0.0, .y = +0.5773502691869, .z = 0},
        [2] = {.x = +0.5, .y = -0.2886751345948, .z = 0}};

    const int sensors_i2c_address[] = {0xE1, 0xE2, 0xE3};
 80017e8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80017ec:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017f0:	4a6d      	ldr	r2, [pc, #436]	; (80019a8 <static_device_beacon_survey_with_error+0x2b4>)
 80017f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80017f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    const int sensors_i2c_interface[] = {0xE1, 0xE2, 0xE3};
 80017f8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80017fc:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001800:	4a69      	ldr	r2, [pc, #420]	; (80019a8 <static_device_beacon_survey_with_error+0x2b4>)
 8001802:	ca07      	ldmia	r2, {r0, r1, r2}
 8001804:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Define environment with its beacons. No edges will be used at this moment
    Environment environment = {0};
 8001808:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800180c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001810:	461a      	mov	r2, r3
 8001812:	2300      	movs	r3, #0
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	6053      	str	r3, [r2, #4]
 8001818:	6093      	str	r3, [r2, #8]
 800181a:	60d3      	str	r3, [r2, #12]
 800181c:	6113      	str	r3, [r2, #16]
 800181e:	6153      	str	r3, [r2, #20]
 8001820:	6193      	str	r3, [r2, #24]

    Beacon *beacons;

    // Initialize sensors, devices, beacons and environment
    device_sensors = (MagneticSensor *)malloc(sizeof(MagneticSensor) * amount_of_magnetic_sensors);
 8001822:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	1a9b      	subs	r3, r3, r2
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	4618      	mov	r0, r3
 8001830:	f00c fb80 	bl	800df34 <malloc>
 8001834:	4603      	mov	r3, r0
 8001836:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

    for (int index = 0; index < amount_of_magnetic_sensors; index++) {
 800183a:	2300      	movs	r3, #0
 800183c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001840:	e056      	b.n	80018f0 <static_device_beacon_survey_with_error+0x1fc>
        device_sensors[index].device_position = device_sensors_position[index];
 8001842:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001846:	4613      	mov	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	1a9b      	subs	r3, r3, r2
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	461a      	mov	r2, r3
 8001850:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001854:	1899      	adds	r1, r3, r2
 8001856:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800185a:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 800185e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	18c2      	adds	r2, r0, r3
 800186c:	f101 0308 	add.w	r3, r1, #8
 8001870:	ca07      	ldmia	r2, {r0, r1, r2}
 8001872:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        initMagneticSensor(&device_sensors[index], sample_size, amount_of_buffers,
 8001876:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800187a:	4613      	mov	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	1a9b      	subs	r3, r3, r2
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	461a      	mov	r2, r3
 8001884:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001888:	1898      	adds	r0, r3, r2
 800188a:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 800188e:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 8001892:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001896:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800189a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800189e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80018a2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80018a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018aa:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80018ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	462b      	mov	r3, r5
 80018b6:	4622      	mov	r2, r4
 80018b8:	f002 f96e 	bl	8003b98 <initMagneticSensor>
                           sensors_i2c_address[index], sensors_i2c_interface[index]);

        device_sensors[index].characteristic = sensor_characteristic;
 80018bc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80018c0:	4613      	mov	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	461a      	mov	r2, r3
 80018ca:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80018ce:	4413      	add	r3, r2
 80018d0:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80018d4:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 80018d8:	f103 0458 	add.w	r4, r3, #88	; 0x58
 80018dc:	4615      	mov	r5, r2
 80018de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018e2:	682b      	ldr	r3, [r5, #0]
 80018e4:	6023      	str	r3, [r4, #0]
    for (int index = 0; index < amount_of_magnetic_sensors; index++) {
 80018e6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80018ea:	3301      	adds	r3, #1
 80018ec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80018f0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80018f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dba2      	blt.n	8001842 <static_device_beacon_survey_with_error+0x14e>
    }

    baseline.initial_point = &device_sensors[0].local_position;
 80018fc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001900:	f103 0214 	add.w	r2, r3, #20
 8001904:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001908:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800190c:	601a      	str	r2, [r3, #0]
    baseline.ending_point = &device_sensors[2].local_position;
 800190e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001912:	33e0      	adds	r3, #224	; 0xe0
 8001914:	f103 0214 	add.w	r2, r3, #20
 8001918:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800191c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001920:	605a      	str	r2, [r3, #4]

    initDevice(&device, device_sensors, amount_of_magnetic_sensors);
 8001922:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001926:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800192a:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800192e:	4618      	mov	r0, r3
 8001930:	f001 fc7c 	bl	800322c <initDevice>
    setBaseline(&device, &baseline);
 8001934:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001938:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f001 fccc 	bl	80032dc <setBaseline>

    // Check if device was correctly initialized
    mu_assert("error, beacon survey - device initialization",
 8001944:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001948:	4618      	mov	r0, r3
 800194a:	f001 fcd8 	bl	80032fe <isDeviceInitialized>
 800194e:	4603      	mov	r3, r0
 8001950:	2b01      	cmp	r3, #1
 8001952:	d001      	beq.n	8001958 <static_device_beacon_survey_with_error+0x264>
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <static_device_beacon_survey_with_error+0x2b8>)
 8001956:	e213      	b.n	8001d80 <static_device_beacon_survey_with_error+0x68c>
              isDeviceInitialized(&device) == 1);

    beacons = (Beacon *)malloc(sizeof(Beacon) * amount_of_beacons);
 8001958:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800195c:	4613      	mov	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4618      	mov	r0, r3
 8001966:	f00c fae5 	bl	800df34 <malloc>
 800196a:	4603      	mov	r3, r0
 800196c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    mocked_beacons = (Beacon *)malloc(sizeof(Beacon) * amount_of_beacons);
 8001970:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8001974:	4613      	mov	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4618      	mov	r0, r3
 800197e:	f00c fad9 	bl	800df34 <malloc>
 8001982:	4603      	mov	r3, r0
 8001984:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

    for (int index = 0; index < amount_of_beacons; index++) {
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800198e:	e068      	b.n	8001a62 <static_device_beacon_survey_with_error+0x36e>
 8001990:	3dcccccd 	.word	0x3dcccccd
 8001994:	356c201b 	.word	0x356c201b
 8001998:	08011fa4 	.word	0x08011fa4
 800199c:	08011f44 	.word	0x08011f44
 80019a0:	08012024 	.word	0x08012024
 80019a4:	08011f74 	.word	0x08011f74
 80019a8:	08011f98 	.word	0x08011f98
 80019ac:	08011ec0 	.word	0x08011ec0
        initBeacon(&beacons[index],
 80019b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	461a      	mov	r2, r3
 80019be:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80019c2:	1898      	adds	r0, r3, r2
 80019c4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80019ce:	443b      	add	r3, r7
 80019d0:	3b94      	subs	r3, #148	; 0x94
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80019da:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80019de:	eef0 0a67 	vmov.f32	s1, s15
 80019e2:	ed97 0a55 	vldr	s0, [r7, #340]	; 0x154
 80019e6:	f001 fb20 	bl	800302a <initBeacon>
                   beacons_source_magnetic_moment,
                   beacons_source_frequency[index],
                   sample_rate, sample_size);

        initBeacon(&mocked_beacons[index],
 80019ea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	461a      	mov	r2, r3
 80019f8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80019fc:	1898      	adds	r0, r3, r2
 80019fe:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a08:	443b      	add	r3, r7
 8001a0a:	3b94      	subs	r3, #148	; 0x94
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001a14:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8001a18:	eef0 0a67 	vmov.f32	s1, s15
 8001a1c:	ed97 0a55 	vldr	s0, [r7, #340]	; 0x154
 8001a20:	f001 fb03 	bl	800302a <initBeacon>
                   beacons_source_magnetic_moment,
                   beacons_source_frequency[index],
                   sample_rate, sample_size);

        mocked_beacons[index].magnetic_field_source.position = mocked_beacons_positions[index];
 8001a24:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	461a      	mov	r2, r3
 8001a32:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001a36:	1899      	adds	r1, r3, r2
 8001a38:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a48:	443b      	add	r3, r7
 8001a4a:	f1a3 02c4 	sub.w	r2, r3, #196	; 0xc4
 8001a4e:	f101 0308 	add.w	r3, r1, #8
 8001a52:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    for (int index = 0; index < amount_of_beacons; index++) {
 8001a58:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001a62:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a66:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	dba0      	blt.n	80019b0 <static_device_beacon_survey_with_error+0x2bc>
    }

    initEnvironment(&environment, beacons, edges, amount_of_beacons, amount_of_edges);
 8001a6e:	1d38      	adds	r0, r7, #4
 8001a70:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a7a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001a7e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001a82:	f001 fdc1 	bl	8003608 <initEnvironment>
    initEnvironment(&mocked_environment, mocked_beacons, edges, amount_of_beacons, amount_of_edges);
 8001a86:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8001a8a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a94:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001a98:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a9c:	f001 fdb4 	bl	8003608 <initEnvironment>

    // Check if environment was correctly initialized
    mu_assert("error, beacon survey - environment initialization",
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 fe09 	bl	80036ba <isEnvironmentInitialized>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d001      	beq.n	8001ab2 <static_device_beacon_survey_with_error+0x3be>
 8001aae:	4bb7      	ldr	r3, [pc, #732]	; (8001d8c <static_device_beacon_survey_with_error+0x698>)
 8001ab0:	e166      	b.n	8001d80 <static_device_beacon_survey_with_error+0x68c>
              isEnvironmentInitialized(&environment) == 1);

    // start surveying beacons
    mockBeaconSurveyRun(
 8001ab2:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8001ab6:	1d39      	adds	r1, r7, #4
 8001ab8:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001abc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001acc:	f002 fb33 	bl	8004136 <mockBeaconSurveyRun>
        &device, &environment,
        &mocked_environment,
        sample_rate, sample_size, with_error);

    estimateMagneticBeaconSourcePosition(&device, &environment);
 8001ad0:	1d3a      	adds	r2, r7, #4
 8001ad2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 fc8f 	bl	80043fc <estimateMagneticBeaconSourcePosition>

    // check beacons surveyed
    for (int index = 0; index < amount_of_beacons; index++) {
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001ae4:	e031      	b.n	8001b4a <static_device_beacon_survey_with_error+0x456>
        mu_assert("beacon survey error",
 8001ae6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	1a9b      	subs	r3, r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	461a      	mov	r2, r3
 8001af4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001af8:	4413      	add	r3, r2
 8001afa:	f103 0008 	add.w	r0, r3, #8
 8001afe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b02:	4613      	mov	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	1a9b      	subs	r3, r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001b10:	4413      	add	r3, r2
 8001b12:	3308      	adds	r3, #8
 8001b14:	4619      	mov	r1, r3
 8001b16:	f003 f833 	bl	8004b80 <calculatePositionError>
 8001b1a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b1e:	edd7 7a5b 	vldr	s15, [r7, #364]	; 0x16c
 8001b22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2a:	bfcc      	ite	gt
 8001b2c:	2301      	movgt	r3, #1
 8001b2e:	2300      	movle	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	f083 0301 	eor.w	r3, r3, #1
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <static_device_beacon_survey_with_error+0x44c>
 8001b3c:	4b94      	ldr	r3, [pc, #592]	; (8001d90 <static_device_beacon_survey_with_error+0x69c>)
 8001b3e:	e11f      	b.n	8001d80 <static_device_beacon_survey_with_error+0x68c>
    for (int index = 0; index < amount_of_beacons; index++) {
 8001b40:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001b44:	3301      	adds	r3, #1
 8001b46:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001b4a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b4e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b52:	429a      	cmp	r2, r3
 8001b54:	dbc7      	blt.n	8001ae6 <static_device_beacon_survey_with_error+0x3f2>
                  calculatePositionError(&mocked_beacons[index].magnetic_field_source.position,
                                         &beacons[index].magnetic_field_source.position) < error_check);
    }

    // now update device position after move
    device_position_offset.x = 2.4;
 8001b56:	4b8f      	ldr	r3, [pc, #572]	; (8001d94 <static_device_beacon_survey_with_error+0x6a0>)
 8001b58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    device_position_offset.y = 1.8;
 8001b5c:	4b8e      	ldr	r3, [pc, #568]	; (8001d98 <static_device_beacon_survey_with_error+0x6a4>)
 8001b5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    device_position_offset.z = 0.0;
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    // Start sampling environment magnetic field from the new position
    mockMagneticFieldSampleRun(
 8001b6a:	1d3c      	adds	r4, r7, #4
 8001b6c:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8001b70:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001b74:	edd7 6a4c 	vldr	s13, [r7, #304]	; 0x130
 8001b78:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 8001b7c:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 8001b80:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001b84:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001b88:	9302      	str	r3, [sp, #8]
 8001b8a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	4623      	mov	r3, r4
 8001b98:	edd7 1a57 	vldr	s3, [r7, #348]	; 0x15c
 8001b9c:	eeb0 0a66 	vmov.f32	s0, s13
 8001ba0:	eef0 0a47 	vmov.f32	s1, s14
 8001ba4:	eeb0 1a67 	vmov.f32	s2, s15
 8001ba8:	f002 fb24 	bl	80041f4 <mockMagneticFieldSampleRun>
        &device, device_velocity, device_heading,
        &final_device_position, &device_position_offset,
        &environment, sample_rate, sample_size, with_error);

    // Update device position with sensors estimations
    updateDevicePosition(&device, &environment);
 8001bac:	1d3a      	adds	r2, r7, #4
 8001bae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 fc1e 	bl	80033f6 <updateDevicePosition>

    mu_assert("device survey 01 error",
 8001bba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001bbe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 ffdb 	bl	8004b80 <calculatePositionError>
 8001bca:	eeb0 7a40 	vmov.f32	s14, s0
 8001bce:	edd7 7a5b 	vldr	s15, [r7, #364]	; 0x16c
 8001bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	bfcc      	ite	gt
 8001bdc:	2301      	movgt	r3, #1
 8001bde:	2300      	movle	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f083 0301 	eor.w	r3, r3, #1
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <static_device_beacon_survey_with_error+0x4fc>
 8001bec:	4b6b      	ldr	r3, [pc, #428]	; (8001d9c <static_device_beacon_survey_with_error+0x6a8>)
 8001bee:	e0c7      	b.n	8001d80 <static_device_beacon_survey_with_error+0x68c>
              calculatePositionError(&final_device_position,
                                     &device.position) < error_check);

    // now update device position after move
    device_position_offset.x = 0.2;
 8001bf0:	4b6b      	ldr	r3, [pc, #428]	; (8001da0 <static_device_beacon_survey_with_error+0x6ac>)
 8001bf2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    device_position_offset.y = 1.2;
 8001bf6:	4b6b      	ldr	r3, [pc, #428]	; (8001da4 <static_device_beacon_survey_with_error+0x6b0>)
 8001bf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    device_position_offset.z = 0.0;
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    // Start sampling environment magnetic field from the new position
    mockMagneticFieldSampleRun(
 8001c04:	1d3c      	adds	r4, r7, #4
 8001c06:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8001c0a:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001c0e:	edd7 6a4c 	vldr	s13, [r7, #304]	; 0x130
 8001c12:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 8001c16:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 8001c1a:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001c1e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001c22:	9302      	str	r3, [sp, #8]
 8001c24:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	4623      	mov	r3, r4
 8001c32:	edd7 1a57 	vldr	s3, [r7, #348]	; 0x15c
 8001c36:	eeb0 0a66 	vmov.f32	s0, s13
 8001c3a:	eef0 0a47 	vmov.f32	s1, s14
 8001c3e:	eeb0 1a67 	vmov.f32	s2, s15
 8001c42:	f002 fad7 	bl	80041f4 <mockMagneticFieldSampleRun>
        &device, device_velocity, device_heading,
        &final_device_position, &device_position_offset,
        &environment, sample_rate, sample_size, with_error);

    // Update device position with sensors estimations
    updateDevicePosition(&device, &environment);
 8001c46:	1d3a      	adds	r2, r7, #4
 8001c48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f001 fbd1 	bl	80033f6 <updateDevicePosition>

    mu_assert("device survey 02 error",
 8001c54:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001c58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f002 ff8e 	bl	8004b80 <calculatePositionError>
 8001c64:	eeb0 7a40 	vmov.f32	s14, s0
 8001c68:	edd7 7a5b 	vldr	s15, [r7, #364]	; 0x16c
 8001c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c74:	bfcc      	ite	gt
 8001c76:	2301      	movgt	r3, #1
 8001c78:	2300      	movle	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f083 0301 	eor.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <static_device_beacon_survey_with_error+0x596>
 8001c86:	4b48      	ldr	r3, [pc, #288]	; (8001da8 <static_device_beacon_survey_with_error+0x6b4>)
 8001c88:	e07a      	b.n	8001d80 <static_device_beacon_survey_with_error+0x68c>
              calculatePositionError(&final_device_position,
                                     &device.position) < error_check);

    // Rotate device position to check attitude and heading
    device_heading = 45;
 8001c8a:	4b48      	ldr	r3, [pc, #288]	; (8001dac <static_device_beacon_survey_with_error+0x6b8>)
 8001c8c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    // Start sampling environment magnetic field from the new position
    mockMagneticFieldSampleRun(
 8001c90:	1d3c      	adds	r4, r7, #4
 8001c92:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8001c96:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001c9a:	edd7 6a4c 	vldr	s13, [r7, #304]	; 0x130
 8001c9e:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 8001ca2:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 8001ca6:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001caa:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001cae:	9302      	str	r3, [sp, #8]
 8001cb0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	4623      	mov	r3, r4
 8001cbe:	edd7 1a57 	vldr	s3, [r7, #348]	; 0x15c
 8001cc2:	eeb0 0a66 	vmov.f32	s0, s13
 8001cc6:	eef0 0a47 	vmov.f32	s1, s14
 8001cca:	eeb0 1a67 	vmov.f32	s2, s15
 8001cce:	f002 fa91 	bl	80041f4 <mockMagneticFieldSampleRun>
        &device, device_velocity, device_heading,
        &final_device_position, &device_position_offset,
        &environment, sample_rate, sample_size, with_error);

    // Update device position with sensors estimations
    updateDevicePosition(&device, &environment);
 8001cd2:	1d3a      	adds	r2, r7, #4
 8001cd4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001cd8:	4611      	mov	r1, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 fb8b 	bl	80033f6 <updateDevicePosition>

    mu_assert("device survey 03 position error",
 8001ce0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001ce4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f002 ff48 	bl	8004b80 <calculatePositionError>
 8001cf0:	eeb0 7a40 	vmov.f32	s14, s0
 8001cf4:	edd7 7a5b 	vldr	s15, [r7, #364]	; 0x16c
 8001cf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d00:	bfcc      	ite	gt
 8001d02:	2301      	movgt	r3, #1
 8001d04:	2300      	movle	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	f083 0301 	eor.w	r3, r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <static_device_beacon_survey_with_error+0x622>
 8001d12:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <static_device_beacon_survey_with_error+0x6bc>)
 8001d14:	e034      	b.n	8001d80 <static_device_beacon_survey_with_error+0x68c>
              calculatePositionError(&final_device_position,
                                     &device.position) < error_check);

    mu_assert("device survey 03 heading error",
 8001d16:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d1e:	ed93 7b06 	vldr	d7, [r3, #24]
 8001d22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d26:	eef0 0a67 	vmov.f32	s1, s15
 8001d2a:	ed97 0a57 	vldr	s0, [r7, #348]	; 0x15c
 8001d2e:	f002 ff5f 	bl	8004bf0 <calculateError>
 8001d32:	eeb0 7a40 	vmov.f32	s14, s0
 8001d36:	edd7 7a5b 	vldr	s15, [r7, #364]	; 0x16c
 8001d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	bfcc      	ite	gt
 8001d44:	2301      	movgt	r3, #1
 8001d46:	2300      	movle	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f083 0301 	eor.w	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <static_device_beacon_survey_with_error+0x664>
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <static_device_beacon_survey_with_error+0x6c0>)
 8001d56:	e013      	b.n	8001d80 <static_device_beacon_survey_with_error+0x68c>
              calculateError(device_heading,
                             device.heading) < error_check);

    // Reset global variables and free variables
    phases_initialized = 0;
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <static_device_beacon_survey_with_error+0x6c4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
    amount_of_phases = 0;
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <static_device_beacon_survey_with_error+0x6c8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]

    free(phases);
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <static_device_beacon_survey_with_error+0x6cc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f00c f8eb 	bl	800df44 <free>
    free(device_sensors);
 8001d6e:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8001d72:	f00c f8e7 	bl	800df44 <free>
    free(beacons);
 8001d76:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8001d7a:	f00c f8e3 	bl	800df44 <free>

    return 0;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bdb0      	pop	{r4, r5, r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	08011ef0 	.word	0x08011ef0
 8001d90:	08011f24 	.word	0x08011f24
 8001d94:	4019999a 	.word	0x4019999a
 8001d98:	3fe66666 	.word	0x3fe66666
 8001d9c:	08011fb4 	.word	0x08011fb4
 8001da0:	3e4ccccd 	.word	0x3e4ccccd
 8001da4:	3f99999a 	.word	0x3f99999a
 8001da8:	08011fcc 	.word	0x08011fcc
 8001dac:	42340000 	.word	0x42340000
 8001db0:	08011fe4 	.word	0x08011fe4
 8001db4:	08012004 	.word	0x08012004
 8001db8:	240007f8 	.word	0x240007f8
 8001dbc:	240007fc 	.word	0x240007fc
 8001dc0:	240007f4 	.word	0x240007f4

08001dc4 <test_beacon_initialization>:
/**
 * @brief Tests that a Beacon can be initialized correctly
 *
 * @return char* Returns 0 if the test passes, an error message otherwise
 */
static char *test_beacon_initialization() {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08e      	sub	sp, #56	; 0x38
 8001dc8:	af00      	add	r7, sp, #0
    Beacon beacon = {0};
 8001dca:	463b      	mov	r3, r7
 8001dcc:	2238      	movs	r2, #56	; 0x38
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f00c f8cd 	bl	800df70 <memset>

    initBeacon(&beacon, 0.2, 30, 220, 110);
 8001dd6:	463b      	mov	r3, r7
 8001dd8:	226e      	movs	r2, #110	; 0x6e
 8001dda:	21dc      	movs	r1, #220	; 0xdc
 8001ddc:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8001de0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001e08 <test_beacon_initialization+0x44>
 8001de4:	4618      	mov	r0, r3
 8001de6:	f001 f920 	bl	800302a <initBeacon>

    // Check that the Beacon is initialized correctly
    mu_assert("error, beacon initialization",
 8001dea:	463b      	mov	r3, r7
 8001dec:	4618      	mov	r0, r3
 8001dee:	f001 f9ab 	bl	8003148 <isBeaconInitialized>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d001      	beq.n	8001dfc <test_beacon_initialization+0x38>
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <test_beacon_initialization+0x48>)
 8001dfa:	e000      	b.n	8001dfe <test_beacon_initialization+0x3a>
              isBeaconInitialized(&beacon) == 1);

    return 0;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3738      	adds	r7, #56	; 0x38
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	3e4ccccd 	.word	0x3e4ccccd
 8001e0c:	08012038 	.word	0x08012038

08001e10 <test_beacon_not_initialized>:
/**
 * @brief Tests that an uninitialized Beacon is detected correctly
 *
 * @return char* Returns 0 if the test passes, an error message otherwise
 */
static char *test_beacon_not_initialized() {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08e      	sub	sp, #56	; 0x38
 8001e14:	af00      	add	r7, sp, #0
    Beacon beacon = {0};
 8001e16:	463b      	mov	r3, r7
 8001e18:	2238      	movs	r2, #56	; 0x38
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f00c f8a7 	bl	800df70 <memset>

    // Check that the uninitialized Beacon is detected correctly
    mu_assert("error, beacon initialization misinterpreting",
 8001e22:	463b      	mov	r3, r7
 8001e24:	4618      	mov	r0, r3
 8001e26:	f001 f98f 	bl	8003148 <isBeaconInitialized>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <test_beacon_not_initialized+0x24>
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <test_beacon_not_initialized+0x30>)
 8001e32:	e000      	b.n	8001e36 <test_beacon_not_initialized+0x26>
              isBeaconInitialized(&beacon) == 0);

    return 0;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3738      	adds	r7, #56	; 0x38
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	08012058 	.word	0x08012058

08001e44 <beacon_all_tests>:
/**
 * @brief Runs all of the Beacon unit tests
 *
 * @return char* Returns 0 if all of the tests pass, an error message otherwise
 */
static char *beacon_all_tests() {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
    mu_run_test(test_beacon_not_initialized);
 8001e4a:	f7ff ffe1 	bl	8001e10 <test_beacon_not_initialized>
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <beacon_all_tests+0x44>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	4a0c      	ldr	r2, [pc, #48]	; (8001e88 <beacon_all_tests+0x44>)
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <beacon_all_tests+0x20>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	e00d      	b.n	8001e80 <beacon_all_tests+0x3c>
    mu_run_test(test_beacon_initialization);
 8001e64:	f7ff ffae 	bl	8001dc4 <test_beacon_initialization>
 8001e68:	6038      	str	r0, [r7, #0]
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <beacon_all_tests+0x44>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <beacon_all_tests+0x44>)
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <beacon_all_tests+0x3a>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	e000      	b.n	8001e80 <beacon_all_tests+0x3c>

    return 0;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	24000200 	.word	0x24000200

08001e8c <test_device_initialization>:
/**
 * @brief Tests the initialization of a device with magnetic sensors.
 *
 * @return char* - Returns NULL if test passes, or an error message if it fails.
 */
static char *test_device_initialization() {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b09c      	sub	sp, #112	; 0x70
 8001e90:	af02      	add	r7, sp, #8
    Device device = {0};
 8001e92:	f107 0318 	add.w	r3, r7, #24
 8001e96:	2240      	movs	r2, #64	; 0x40
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f00c f868 	bl	800df70 <memset>

    const int amount_of_magnetic_sensors = 3;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
    MagneticSensor *sensors;

    const int sensors_i2c_adress[] = {0xE1, 0xE2, 0xE3};
 8001ea4:	4a39      	ldr	r2, [pc, #228]	; (8001f8c <test_device_initialization+0x100>)
 8001ea6:	f107 030c 	add.w	r3, r7, #12
 8001eaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    const int sensors_i2c_interface[] = {0xE1, 0xE2, 0xE3};
 8001eb0:	4a36      	ldr	r2, [pc, #216]	; (8001f8c <test_device_initialization+0x100>)
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    sensors = (MagneticSensor *)malloc(sizeof(MagneticSensor) * amount_of_magnetic_sensors);
 8001eba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f00c f835 	bl	800df34 <malloc>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	65bb      	str	r3, [r7, #88]	; 0x58

    for (int index = 0; index < amount_of_magnetic_sensors; index++) {
 8001ece:	2300      	movs	r3, #0
 8001ed0:	667b      	str	r3, [r7, #100]	; 0x64
 8001ed2:	e01c      	b.n	8001f0e <test_device_initialization+0x82>
        initMagneticSensor(&sensors[index], 110, 2, sensors_i2c_adress[index],
 8001ed4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	1a9b      	subs	r3, r3, r2
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	461a      	mov	r2, r3
 8001ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ee2:	1898      	adds	r0, r3, r2
 8001ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	3368      	adds	r3, #104	; 0x68
 8001eea:	443b      	add	r3, r7
 8001eec:	f853 2c5c 	ldr.w	r2, [r3, #-92]
 8001ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	3368      	adds	r3, #104	; 0x68
 8001ef6:	443b      	add	r3, r7
 8001ef8:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	4613      	mov	r3, r2
 8001f00:	2202      	movs	r2, #2
 8001f02:	216e      	movs	r1, #110	; 0x6e
 8001f04:	f001 fe48 	bl	8003b98 <initMagneticSensor>
    for (int index = 0; index < amount_of_magnetic_sensors; index++) {
 8001f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	667b      	str	r3, [r7, #100]	; 0x64
 8001f0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f12:	429a      	cmp	r2, r3
 8001f14:	dbde      	blt.n	8001ed4 <test_device_initialization+0x48>
                           sensors_i2c_interface[index]);
    }

    initDevice(&device, sensors, amount_of_magnetic_sensors);
 8001f16:	f107 0318 	add.w	r3, r7, #24
 8001f1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f001 f984 	bl	800322c <initDevice>

    mu_assert("error, device initialization",
 8001f24:	f107 0318 	add.w	r3, r7, #24
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f001 f9e8 	bl	80032fe <isDeviceInitialized>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d001      	beq.n	8001f38 <test_device_initialization+0xac>
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <test_device_initialization+0x104>)
 8001f36:	e024      	b.n	8001f82 <test_device_initialization+0xf6>
              isDeviceInitialized(&device) == 1);

    // Reset global variables and free variables
    phases_initialized = 0;
 8001f38:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <test_device_initialization+0x108>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
    amount_of_phases = 0;
 8001f3e:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <test_device_initialization+0x10c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

    free(phases);
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <test_device_initialization+0x110>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f00b fffb 	bl	800df44 <free>

    for (int i = 0; i < amount_of_magnetic_sensors; i++) {
 8001f4e:	2300      	movs	r3, #0
 8001f50:	663b      	str	r3, [r7, #96]	; 0x60
 8001f52:	e00e      	b.n	8001f72 <test_device_initialization+0xe6>
        free(sensors[i].samples);
 8001f54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	461a      	mov	r2, r3
 8001f60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f62:	4413      	add	r3, r2
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	4618      	mov	r0, r3
 8001f68:	f00b ffec 	bl	800df44 <free>
    for (int i = 0; i < amount_of_magnetic_sensors; i++) {
 8001f6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f6e:	3301      	adds	r3, #1
 8001f70:	663b      	str	r3, [r7, #96]	; 0x60
 8001f72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f76:	429a      	cmp	r2, r3
 8001f78:	dbec      	blt.n	8001f54 <test_device_initialization+0xc8>
    }

    free(sensors);
 8001f7a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001f7c:	f00b ffe2 	bl	800df44 <free>

    return 0;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3768      	adds	r7, #104	; 0x68
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	08011f98 	.word	0x08011f98
 8001f90:	08012088 	.word	0x08012088
 8001f94:	240007f8 	.word	0x240007f8
 8001f98:	240007fc 	.word	0x240007fc
 8001f9c:	240007f4 	.word	0x240007f4

08001fa0 <test_device_not_initialized>:
/**
 * @brief Tests that a device is not initialized if it has not been properly initialized.
 *
 * @return char* - Returns NULL if test passes, or an error message if it fails.
 */
static char *test_device_not_initialized() {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b090      	sub	sp, #64	; 0x40
 8001fa4:	af00      	add	r7, sp, #0
    Device device = {0};
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	2240      	movs	r2, #64	; 0x40
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f00b ffdf 	bl	800df70 <memset>

    mu_assert("error, device initialization misinterpreting",
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f001 f9a2 	bl	80032fe <isDeviceInitialized>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <test_device_not_initialized+0x24>
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <test_device_not_initialized+0x30>)
 8001fc2:	e000      	b.n	8001fc6 <test_device_not_initialized+0x26>
              isDeviceInitialized(&device) == 0);

    return 0;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3740      	adds	r7, #64	; 0x40
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	080120a8 	.word	0x080120a8

08001fd4 <device_all_tests>:
/**
 * @brief Runs all the tests for the device.
 *
 * @return char* - Returns NULL if all tests pass, or an error message if any of the tests fail.
 */
static char *device_all_tests() {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
    mu_run_test(test_device_not_initialized);
 8001fda:	f7ff ffe1 	bl	8001fa0 <test_device_not_initialized>
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <device_all_tests+0x44>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <device_all_tests+0x44>)
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <device_all_tests+0x20>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	e00d      	b.n	8002010 <device_all_tests+0x3c>
    mu_run_test(test_device_initialization);
 8001ff4:	f7ff ff4a 	bl	8001e8c <test_device_initialization>
 8001ff8:	6038      	str	r0, [r7, #0]
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <device_all_tests+0x44>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	3301      	adds	r3, #1
 8002000:	4a05      	ldr	r2, [pc, #20]	; (8002018 <device_all_tests+0x44>)
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <device_all_tests+0x3a>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	e000      	b.n	8002010 <device_all_tests+0x3c>

    return 0;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	24000200 	.word	0x24000200

0800201c <test_environment_initialization>:
 *
 * Test if the environment is properly initialized with the given parameters
 *
 * @return char* - NULL if the test passed, an error message otherwise
 */
static char *test_environment_initialization() {
 800201c:	b580      	push	{r7, lr}
 800201e:	b08e      	sub	sp, #56	; 0x38
 8002020:	af02      	add	r7, sp, #8
    Environment environment = {0};
 8002022:	463b      	mov	r3, r7
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
 8002030:	615a      	str	r2, [r3, #20]
 8002032:	619a      	str	r2, [r3, #24]

    int amount_of_beacons = 3;
 8002034:	2303      	movs	r3, #3
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
    Beacon *beacons;

    int amount_of_edges = 10;
 8002038:	230a      	movs	r3, #10
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
    Coordinate *edges;

    beacons = (Beacon *)malloc(sizeof(Beacon) * amount_of_beacons);
 800203c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4618      	mov	r0, r3
 8002048:	f00b ff74 	bl	800df34 <malloc>
 800204c:	4603      	mov	r3, r0
 800204e:	623b      	str	r3, [r7, #32]

    for (int index = 0; index < amount_of_beacons; index++) {
 8002050:	2300      	movs	r3, #0
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002054:	e013      	b.n	800207e <test_environment_initialization+0x62>
        initBeacon(&beacons[index], 0.1, 55.0, 220, 110);
 8002056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	461a      	mov	r2, r3
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	4413      	add	r3, r2
 8002066:	226e      	movs	r2, #110	; 0x6e
 8002068:	21dc      	movs	r1, #220	; 0xdc
 800206a:	eddf 0a13 	vldr	s1, [pc, #76]	; 80020b8 <test_environment_initialization+0x9c>
 800206e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80020bc <test_environment_initialization+0xa0>
 8002072:	4618      	mov	r0, r3
 8002074:	f000 ffd9 	bl	800302a <initBeacon>
    for (int index = 0; index < amount_of_beacons; index++) {
 8002078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207a:	3301      	adds	r3, #1
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800207e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002082:	429a      	cmp	r2, r3
 8002084:	dbe7      	blt.n	8002056 <test_environment_initialization+0x3a>
    }

    initEnvironment(&environment, beacons, edges, amount_of_beacons, amount_of_edges);
 8002086:	4638      	mov	r0, r7
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	6a39      	ldr	r1, [r7, #32]
 8002092:	f001 fab9 	bl	8003608 <initEnvironment>

    mu_assert("error, environment initialization",
 8002096:	463b      	mov	r3, r7
 8002098:	4618      	mov	r0, r3
 800209a:	f001 fb0e 	bl	80036ba <isEnvironmentInitialized>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d001      	beq.n	80020a8 <test_environment_initialization+0x8c>
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <test_environment_initialization+0xa4>)
 80020a6:	e003      	b.n	80020b0 <test_environment_initialization+0x94>
              isEnvironmentInitialized(&environment) == 1);

    free(beacons);
 80020a8:	6a38      	ldr	r0, [r7, #32]
 80020aa:	f00b ff4b 	bl	800df44 <free>

    return 0;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3730      	adds	r7, #48	; 0x30
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	425c0000 	.word	0x425c0000
 80020bc:	3dcccccd 	.word	0x3dcccccd
 80020c0:	080120d8 	.word	0x080120d8

080020c4 <test_environment_not_initialized>:
 *
 * Test if the environment is not initialized when its variables are set to 0
 *
 * @return char* - NULL if the test passed, an error message otherwise
 */
static char *test_environment_not_initialized() {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
    Environment environment = {0};
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
 80020d8:	615a      	str	r2, [r3, #20]
 80020da:	619a      	str	r2, [r3, #24]

    mu_assert("error, environment initialization misinterpreting",
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	4618      	mov	r0, r3
 80020e0:	f001 faeb 	bl	80036ba <isEnvironmentInitialized>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <test_environment_not_initialized+0x2a>
 80020ea:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <test_environment_not_initialized+0x34>)
 80020ec:	e000      	b.n	80020f0 <test_environment_not_initialized+0x2c>
              isEnvironmentInitialized(&environment) == 0);

    return 0;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	080120fc 	.word	0x080120fc

080020fc <environment_all_tests>:
 *
 * Run all unit tests for the environment module
 *
 * @return char* - NULL
 */
static char *environment_all_tests() {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
    mu_run_test(test_environment_not_initialized);
 8002102:	f7ff ffdf 	bl	80020c4 <test_environment_not_initialized>
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <environment_all_tests+0x44>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3301      	adds	r3, #1
 800210e:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <environment_all_tests+0x44>)
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <environment_all_tests+0x20>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	e00d      	b.n	8002138 <environment_all_tests+0x3c>
    mu_run_test(test_environment_initialization);
 800211c:	f7ff ff7e 	bl	800201c <test_environment_initialization>
 8002120:	6038      	str	r0, [r7, #0]
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <environment_all_tests+0x44>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	4a05      	ldr	r2, [pc, #20]	; (8002140 <environment_all_tests+0x44>)
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <environment_all_tests+0x3a>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	e000      	b.n	8002138 <environment_all_tests+0x3c>

    return 0;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	24000200 	.word	0x24000200

08002144 <test_indexer_initialized>:
 * @return Returns 0 if the test passes, and a failure message otherwise.
 *
 * This function initializes an Indexer object with valid parameters, and checks
 * if the function isIndexerInitialized returns true.
 */
static char *test_indexer_initialized() {
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
    Indexer indexer = {0};
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]

    initIndexer(&indexer, 110, 2);
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2202      	movs	r2, #2
 800215c:	216e      	movs	r1, #110	; 0x6e
 800215e:	4618      	mov	r0, r3
 8002160:	f001 fb3f 	bl	80037e2 <initIndexer>

    mu_assert("error, indexer initialization",
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	4618      	mov	r0, r3
 8002168:	f001 fb5d 	bl	8003826 <isIndexerInitialized>
 800216c:	4603      	mov	r3, r0
 800216e:	2b01      	cmp	r3, #1
 8002170:	d001      	beq.n	8002176 <test_indexer_initialized+0x32>
 8002172:	4b03      	ldr	r3, [pc, #12]	; (8002180 <test_indexer_initialized+0x3c>)
 8002174:	e000      	b.n	8002178 <test_indexer_initialized+0x34>
              isIndexerInitialized(&indexer) == 1);

    return 0;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	08012130 	.word	0x08012130

08002184 <test_indexer_not_initialized>:
 * @return Returns 0 if the test passes, and a failure message otherwise.
 *
 * This function creates an Indexer object with default values, and checks if the
 * function isIndexerInitialized returns false.
 */
static char *test_indexer_not_initialized() {
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
    Indexer indexer = {0};
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]

    mu_assert("error, indexer initialization misinterpreting",
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	4618      	mov	r0, r3
 800219c:	f001 fb43 	bl	8003826 <isIndexerInitialized>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <test_indexer_not_initialized+0x26>
 80021a6:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <test_indexer_not_initialized+0x30>)
 80021a8:	e000      	b.n	80021ac <test_indexer_not_initialized+0x28>
              isIndexerInitialized(&indexer) == 0);

    return 0;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	08012150 	.word	0x08012150

080021b8 <indexer_all_tests>:
 * @return Returns 0 if all the tests pass, and a failure message otherwise.
 *
 * This function runs all the unit tests for the Indexer module, and returns
 * a failure message if any of the tests fail.
 */
static char *indexer_all_tests() {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
    mu_run_test(test_indexer_not_initialized);
 80021be:	f7ff ffe1 	bl	8002184 <test_indexer_not_initialized>
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <indexer_all_tests+0x44>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <indexer_all_tests+0x44>)
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <indexer_all_tests+0x20>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	e00d      	b.n	80021f4 <indexer_all_tests+0x3c>
    mu_run_test(test_indexer_initialized);
 80021d8:	f7ff ffb4 	bl	8002144 <test_indexer_initialized>
 80021dc:	6038      	str	r0, [r7, #0]
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <indexer_all_tests+0x44>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	4a05      	ldr	r2, [pc, #20]	; (80021fc <indexer_all_tests+0x44>)
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <indexer_all_tests+0x3a>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	e000      	b.n	80021f4 <indexer_all_tests+0x3c>

    return 0;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	24000200 	.word	0x24000200

08002200 <test_magnetic_field_source_initialized>:
 * This function tests whether a magnetic field source has been correctly initialized
 * by the initMagneticFieldSource function.
 *
 * @return NULL if the test passes, otherwise an error message.
 */
static char *test_magnetic_field_source_initialized() {
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
    MagneticFieldSource source = {0};
 8002206:	463b      	mov	r3, r7
 8002208:	2220      	movs	r2, #32
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f00b feaf 	bl	800df70 <memset>

    initMagneticFieldSource(&source, 0.2, 30);
 8002212:	463b      	mov	r3, r7
 8002214:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8002218:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002240 <test_magnetic_field_source_initialized+0x40>
 800221c:	4618      	mov	r0, r3
 800221e:	f001 fb67 	bl	80038f0 <initMagneticFieldSource>

    mu_assert("error, magnetic field source initialization",
 8002222:	463b      	mov	r3, r7
 8002224:	4618      	mov	r0, r3
 8002226:	f001 fbdc 	bl	80039e2 <isMagneticFieldSourceInitialized>
 800222a:	4603      	mov	r3, r0
 800222c:	2b01      	cmp	r3, #1
 800222e:	d001      	beq.n	8002234 <test_magnetic_field_source_initialized+0x34>
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <test_magnetic_field_source_initialized+0x44>)
 8002232:	e000      	b.n	8002236 <test_magnetic_field_source_initialized+0x36>
              isMagneticFieldSourceInitialized(&source) == 1);

    return 0;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3720      	adds	r7, #32
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	3e4ccccd 	.word	0x3e4ccccd
 8002244:	08012180 	.word	0x08012180

08002248 <test_magnetic_field_source_not_initialized>:
 * This function tests whether a magnetic field source has been correctly not initialized
 * by the isMagneticFieldSourceInitialized function.
 *
 * @return NULL if the test passes, otherwise an error message.
 */
static char *test_magnetic_field_source_not_initialized() {
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
    MagneticFieldSource source = {0};
 800224e:	463b      	mov	r3, r7
 8002250:	2220      	movs	r2, #32
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f00b fe8b 	bl	800df70 <memset>

    mu_assert("error, magnetic field source initialization misinterpreting",
 800225a:	463b      	mov	r3, r7
 800225c:	4618      	mov	r0, r3
 800225e:	f001 fbc0 	bl	80039e2 <isMagneticFieldSourceInitialized>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <test_magnetic_field_source_not_initialized+0x24>
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <test_magnetic_field_source_not_initialized+0x30>)
 800226a:	e000      	b.n	800226e <test_magnetic_field_source_not_initialized+0x26>
              isMagneticFieldSourceInitialized(&source) == 0);

    return 0;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3720      	adds	r7, #32
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	080121ac 	.word	0x080121ac

0800227c <magnetic_field_all_tests>:
 *
 * This function runs all magnetic field tests.
 *
 * @return NULL if all tests pass, otherwise an error message.
 */
static char *magnetic_field_all_tests() {
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
    mu_run_test(test_magnetic_field_source_not_initialized);
 8002282:	f7ff ffe1 	bl	8002248 <test_magnetic_field_source_not_initialized>
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <magnetic_field_all_tests+0x44>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <magnetic_field_all_tests+0x44>)
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <magnetic_field_all_tests+0x20>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	e00d      	b.n	80022b8 <magnetic_field_all_tests+0x3c>
    mu_run_test(test_magnetic_field_source_initialized);
 800229c:	f7ff ffb0 	bl	8002200 <test_magnetic_field_source_initialized>
 80022a0:	6038      	str	r0, [r7, #0]
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <magnetic_field_all_tests+0x44>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <magnetic_field_all_tests+0x44>)
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <magnetic_field_all_tests+0x3a>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	e000      	b.n	80022b8 <magnetic_field_all_tests+0x3c>

    return 0;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	24000200 	.word	0x24000200

080022c4 <test_magnetic_sensor_initialized>:
/**
 * @brief Unit test to check if a MagneticSensor struct is initialized correctly
 *
 * @return char* NULL if the test passes, error message otherwise
 */
static char *test_magnetic_sensor_initialized() {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b09e      	sub	sp, #120	; 0x78
 80022c8:	af02      	add	r7, sp, #8
    MagneticSensor sensor = {0};
 80022ca:	463b      	mov	r3, r7
 80022cc:	2270      	movs	r2, #112	; 0x70
 80022ce:	2100      	movs	r1, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f00b fe4d 	bl	800df70 <memset>

    initMagneticSensor(&sensor, 110, 2, 0xE2, 2);
 80022d6:	4638      	mov	r0, r7
 80022d8:	2302      	movs	r3, #2
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	23e2      	movs	r3, #226	; 0xe2
 80022de:	2202      	movs	r2, #2
 80022e0:	216e      	movs	r1, #110	; 0x6e
 80022e2:	f001 fc59 	bl	8003b98 <initMagneticSensor>

    mu_assert("error, sensor initialization",
 80022e6:	463b      	mov	r3, r7
 80022e8:	4618      	mov	r0, r3
 80022ea:	f001 fc9d 	bl	8003c28 <isMagneticSensorInitialized>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d001      	beq.n	80022f8 <test_magnetic_sensor_initialized+0x34>
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <test_magnetic_sensor_initialized+0x5c>)
 80022f6:	e00f      	b.n	8002318 <test_magnetic_sensor_initialized+0x54>
              isMagneticSensorInitialized(&sensor) == 1);

    // Reset global variables and free variables
    phases_initialized = 0;
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <test_magnetic_sensor_initialized+0x60>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
    amount_of_phases = 0;
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <test_magnetic_sensor_initialized+0x64>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

    free(phases);
 8002304:	4b09      	ldr	r3, [pc, #36]	; (800232c <test_magnetic_sensor_initialized+0x68>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f00b fe1b 	bl	800df44 <free>
    free(sensor.samples);
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	4618      	mov	r0, r3
 8002312:	f00b fe17 	bl	800df44 <free>

    return 0;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3770      	adds	r7, #112	; 0x70
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	080121e8 	.word	0x080121e8
 8002324:	240007f8 	.word	0x240007f8
 8002328:	240007fc 	.word	0x240007fc
 800232c:	240007f4 	.word	0x240007f4

08002330 <test_magnetic_sensor_not_initialized>:
/**
 * @brief Unit test to check if a MagneticSensor struct is not initialized
 *
 * @return char* NULL if the test passes, error message otherwise
 */
static char *test_magnetic_sensor_not_initialized() {
 8002330:	b580      	push	{r7, lr}
 8002332:	b09c      	sub	sp, #112	; 0x70
 8002334:	af00      	add	r7, sp, #0
    MagneticSensor sensor = {0};
 8002336:	463b      	mov	r3, r7
 8002338:	2270      	movs	r2, #112	; 0x70
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f00b fe17 	bl	800df70 <memset>

    mu_assert("error, sensor initialization misinterpreting",
 8002342:	463b      	mov	r3, r7
 8002344:	4618      	mov	r0, r3
 8002346:	f001 fc6f 	bl	8003c28 <isMagneticSensorInitialized>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <test_magnetic_sensor_not_initialized+0x24>
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <test_magnetic_sensor_not_initialized+0x30>)
 8002352:	e000      	b.n	8002356 <test_magnetic_sensor_not_initialized+0x26>
              isMagneticSensorInitialized(&sensor) == 0);

    return 0;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3770      	adds	r7, #112	; 0x70
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	08012208 	.word	0x08012208

08002364 <magnetic_sensor_all_tests>:
/**
 * @brief Run all magnetic sensor unit tests
 *
 * @return char* NULL if all tests pass, error message otherwise
 */
static char *magnetic_sensor_all_tests() {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
    mu_run_test(test_magnetic_sensor_not_initialized);
 800236a:	f7ff ffe1 	bl	8002330 <test_magnetic_sensor_not_initialized>
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <magnetic_sensor_all_tests+0x44>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3301      	adds	r3, #1
 8002376:	4a0c      	ldr	r2, [pc, #48]	; (80023a8 <magnetic_sensor_all_tests+0x44>)
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <magnetic_sensor_all_tests+0x20>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	e00d      	b.n	80023a0 <magnetic_sensor_all_tests+0x3c>
    mu_run_test(test_magnetic_sensor_initialized);
 8002384:	f7ff ff9e 	bl	80022c4 <test_magnetic_sensor_initialized>
 8002388:	6038      	str	r0, [r7, #0]
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <magnetic_sensor_all_tests+0x44>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3301      	adds	r3, #1
 8002390:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <magnetic_sensor_all_tests+0x44>)
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <magnetic_sensor_all_tests+0x3a>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	e000      	b.n	80023a0 <magnetic_sensor_all_tests+0x3c>

    return 0;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	24000200 	.word	0x24000200

080023ac <test_calculate_position_by_trilateration_three_references>:
 * @brief Test for the function `calculatePositionByTrilateration` with three references.
 *
 * This test checks if the `calculatePositionByTrilateration` function calculates the position correctly
 * using three references.
 */
static char *test_calculate_position_by_trilateration_three_references() {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b090      	sub	sp, #64	; 0x40
 80023b0:	af00      	add	r7, sp, #0
    Segment segments[3];
    Coordinate position_estimated = {0};
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]

    // beacons at (0,0), (4,4) and (8,0) with location at (4,2)

    segments[0].reference.x = 0;
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
    segments[0].reference.y = 0;
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
    segments[0].reference.z = 0;
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
    segments[0].magnitude = sqrt(4 * 4 + 2 * 2);
 80023ce:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <test_calculate_position_by_trilateration_three_references+0x128>)
 80023d0:	61fb      	str	r3, [r7, #28]

    segments[1].reference.x = 4;
 80023d2:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80023d6:	623b      	str	r3, [r7, #32]
    segments[1].reference.y = 4;
 80023d8:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
    segments[1].reference.z = 0;
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
    segments[1].magnitude = sqrt(0 * 0 + 2 * 2);
 80023e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    segments[2].reference.x = 8;
 80023ea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80023ee:	633b      	str	r3, [r7, #48]	; 0x30
    segments[2].reference.y = 0;
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
    segments[2].reference.z = 0;
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	63bb      	str	r3, [r7, #56]	; 0x38
    segments[2].magnitude = sqrt(4 * 4 + 2 * 2);
 80023fc:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <test_calculate_position_by_trilateration_three_references+0x128>)
 80023fe:	63fb      	str	r3, [r7, #60]	; 0x3c

    calculatePositionByTrilateration(segments, &position_estimated, 3);
 8002400:	1d39      	adds	r1, r7, #4
 8002402:	f107 0310 	add.w	r3, r7, #16
 8002406:	2203      	movs	r2, #3
 8002408:	4618      	mov	r0, r3
 800240a:	f002 f93e 	bl	800468a <calculatePositionByTrilateration>

    mu_assert("error, trilateration test 01",
 800240e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002412:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002416:	eef4 7a47 	vcmp.f32	s15, s14
 800241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241e:	d10f      	bne.n	8002440 <test_calculate_position_by_trilateration_three_references+0x94>
 8002420:	edd7 7a02 	vldr	s15, [r7, #8]
 8002424:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002428:	eef4 7a47 	vcmp.f32	s15, s14
 800242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002430:	d106      	bne.n	8002440 <test_calculate_position_by_trilateration_three_references+0x94>
 8002432:	edd7 7a03 	vldr	s15, [r7, #12]
 8002436:	eef5 7a40 	vcmp.f32	s15, #0.0
 800243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243e:	d001      	beq.n	8002444 <test_calculate_position_by_trilateration_three_references+0x98>
 8002440:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <test_calculate_position_by_trilateration_three_references+0x12c>)
 8002442:	e043      	b.n	80024cc <test_calculate_position_by_trilateration_three_references+0x120>
                  position_estimated.y == 2.0 &&
                  position_estimated.z == 0.0);

    // beacons at (2,2), (4,6) and (6,0) with location at (2,4)

    segments[0].reference.x = 2;
 8002444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002448:	613b      	str	r3, [r7, #16]
    segments[0].reference.y = 2;
 800244a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800244e:	617b      	str	r3, [r7, #20]
    segments[0].reference.z = 0;
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
    segments[0].magnitude = sqrt(0 * 0 + 2 * 2);
 8002456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800245a:	61fb      	str	r3, [r7, #28]

    segments[1].reference.x = 6;
 800245c:	4b1f      	ldr	r3, [pc, #124]	; (80024dc <test_calculate_position_by_trilateration_three_references+0x130>)
 800245e:	623b      	str	r3, [r7, #32]
    segments[1].reference.y = 4;
 8002460:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
    segments[1].reference.z = 0;
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
    segments[1].magnitude = sqrt(4 * 4 + 0 * 0);
 800246c:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c

    segments[2].reference.x = 6;
 8002472:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <test_calculate_position_by_trilateration_three_references+0x130>)
 8002474:	633b      	str	r3, [r7, #48]	; 0x30
    segments[2].reference.y = 0;
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	637b      	str	r3, [r7, #52]	; 0x34
    segments[2].reference.z = 0;
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	63bb      	str	r3, [r7, #56]	; 0x38
    segments[2].magnitude = sqrt(4 * 4 + 4 * 4);
 8002482:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <test_calculate_position_by_trilateration_three_references+0x134>)
 8002484:	63fb      	str	r3, [r7, #60]	; 0x3c

    calculatePositionByTrilateration(segments, &position_estimated, 3);
 8002486:	1d39      	adds	r1, r7, #4
 8002488:	f107 0310 	add.w	r3, r7, #16
 800248c:	2203      	movs	r2, #3
 800248e:	4618      	mov	r0, r3
 8002490:	f002 f8fb 	bl	800468a <calculatePositionByTrilateration>

    mu_assert("error, trilateration test 02",
 8002494:	edd7 7a01 	vldr	s15, [r7, #4]
 8002498:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800249c:	eef4 7a47 	vcmp.f32	s15, s14
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	d10f      	bne.n	80024c6 <test_calculate_position_by_trilateration_three_references+0x11a>
 80024a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80024aa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024ae:	eef4 7a47 	vcmp.f32	s15, s14
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	d106      	bne.n	80024c6 <test_calculate_position_by_trilateration_three_references+0x11a>
 80024b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c4:	d001      	beq.n	80024ca <test_calculate_position_by_trilateration_three_references+0x11e>
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <test_calculate_position_by_trilateration_three_references+0x138>)
 80024c8:	e000      	b.n	80024cc <test_calculate_position_by_trilateration_three_references+0x120>
              position_estimated.x == 2.0 &&
                  position_estimated.y == 4.0 &&
                  position_estimated.z == 0.0);

    return 0;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3740      	adds	r7, #64	; 0x40
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	408f1bbd 	.word	0x408f1bbd
 80024d8:	08012238 	.word	0x08012238
 80024dc:	40c00000 	.word	0x40c00000
 80024e0:	40b504f3 	.word	0x40b504f3
 80024e4:	08012258 	.word	0x08012258

080024e8 <navigation_all_tests>:

/**
 * @brief Runs all navigation module unit tests.
 */
static char *navigation_all_tests() {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
    mu_run_test(test_calculate_position_by_trilateration_three_references);
 80024ee:	f7ff ff5d 	bl	80023ac <test_calculate_position_by_trilateration_three_references>
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <navigation_all_tests+0x2c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	4a06      	ldr	r2, [pc, #24]	; (8002514 <navigation_all_tests+0x2c>)
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <navigation_all_tests+0x20>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	e000      	b.n	800250a <navigation_all_tests+0x22>

    return 0;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	24000200 	.word	0x24000200

08002518 <test_spectrum_initialized>:
 * Initializes a Spectrum struct and checks if its initialization
 * status is correctly reported.
 *
 * @return NULL if test passes, an error message if it fails.
 */
static char *test_spectrum_initialized() {
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
    Spectrum spectrum = {0};
 800251e:	463b      	mov	r3, r7
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
 800252c:	615a      	str	r2, [r3, #20]

    initSpectrum(&spectrum, 110, 2);
 800252e:	463b      	mov	r3, r7
 8002530:	2202      	movs	r2, #2
 8002532:	216e      	movs	r1, #110	; 0x6e
 8002534:	4618      	mov	r0, r3
 8002536:	f002 fb75 	bl	8004c24 <initSpectrum>

    mu_assert("error, spectrum initialization",
 800253a:	463b      	mov	r3, r7
 800253c:	4618      	mov	r0, r3
 800253e:	f002 fc55 	bl	8004dec <isSpectrumInitialized>
 8002542:	4603      	mov	r3, r0
 8002544:	2b01      	cmp	r3, #1
 8002546:	d001      	beq.n	800254c <test_spectrum_initialized+0x34>
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <test_spectrum_initialized+0x54>)
 800254a:	e00b      	b.n	8002564 <test_spectrum_initialized+0x4c>
              isSpectrumInitialized(&spectrum) == 1);

    // Reset global variables and free variables
    phases_initialized = 0;
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <test_spectrum_initialized+0x58>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
    amount_of_phases = 0;
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <test_spectrum_initialized+0x5c>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

    free(phases);
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <test_spectrum_initialized+0x60>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f00b fcf1 	bl	800df44 <free>

    return 0;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	08012278 	.word	0x08012278
 8002570:	240007f8 	.word	0x240007f8
 8002574:	240007fc 	.word	0x240007fc
 8002578:	240007f4 	.word	0x240007f4

0800257c <test_spectrum_not_initialized>:
 * Creates a zero-initialized Spectrum struct and checks if its initialization
 * status is correctly reported as not initialized.
 *
 * @return NULL if test passes, an error message if it fails.
 */
static char *test_spectrum_not_initialized() {
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
    Spectrum spectrum = {0};
 8002582:	463b      	mov	r3, r7
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
 8002590:	615a      	str	r2, [r3, #20]

    mu_assert("error, spectrum initialization misinterpreting",
 8002592:	463b      	mov	r3, r7
 8002594:	4618      	mov	r0, r3
 8002596:	f002 fc29 	bl	8004dec <isSpectrumInitialized>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <test_spectrum_not_initialized+0x28>
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <test_spectrum_not_initialized+0x34>)
 80025a2:	e000      	b.n	80025a6 <test_spectrum_not_initialized+0x2a>
              isSpectrumInitialized(&spectrum) == 0);

    return 0;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	08012298 	.word	0x08012298

080025b4 <spectrum_all_tests>:
/**
 * @brief Run all tests related to the Spectrum struct.
 *
 * @return NULL if all tests pass, an error message if at least one test fails.
 */
static char *spectrum_all_tests() {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
    mu_run_test(test_spectrum_not_initialized);
 80025ba:	f7ff ffdf 	bl	800257c <test_spectrum_not_initialized>
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <spectrum_all_tests+0x44>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3301      	adds	r3, #1
 80025c6:	4a0c      	ldr	r2, [pc, #48]	; (80025f8 <spectrum_all_tests+0x44>)
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <spectrum_all_tests+0x20>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	e00d      	b.n	80025f0 <spectrum_all_tests+0x3c>
    mu_run_test(test_spectrum_initialized);
 80025d4:	f7ff ffa0 	bl	8002518 <test_spectrum_initialized>
 80025d8:	6038      	str	r0, [r7, #0]
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <spectrum_all_tests+0x44>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3301      	adds	r3, #1
 80025e0:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <spectrum_all_tests+0x44>)
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <spectrum_all_tests+0x3a>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	e000      	b.n	80025f0 <spectrum_all_tests+0x3c>

    return 0;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	24000200 	.word	0x24000200

080025fc <all_unit_tests>:
 *
 * This function runs all unit tests for the entire project, including all subsystems.
 *
 * @return A character pointer to the result of the test suite.
 */
static char *all_unit_tests() {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
    mu_run_all_sub_tests(spectrum_all_tests);
 8002602:	f7ff ffd7 	bl	80025b4 <spectrum_all_tests>
 8002606:	61f8      	str	r0, [r7, #28]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <all_unit_tests+0x16>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	e038      	b.n	8002684 <all_unit_tests+0x88>
    mu_run_all_sub_tests(indexer_all_tests);
 8002612:	f7ff fdd1 	bl	80021b8 <indexer_all_tests>
 8002616:	61b8      	str	r0, [r7, #24]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <all_unit_tests+0x26>
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	e030      	b.n	8002684 <all_unit_tests+0x88>
    mu_run_all_sub_tests(magnetic_sensor_all_tests);
 8002622:	f7ff fe9f 	bl	8002364 <magnetic_sensor_all_tests>
 8002626:	6178      	str	r0, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <all_unit_tests+0x36>
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	e028      	b.n	8002684 <all_unit_tests+0x88>
    mu_run_all_sub_tests(device_all_tests);
 8002632:	f7ff fccf 	bl	8001fd4 <device_all_tests>
 8002636:	6138      	str	r0, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <all_unit_tests+0x46>
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	e020      	b.n	8002684 <all_unit_tests+0x88>
    mu_run_all_sub_tests(magnetic_field_all_tests);
 8002642:	f7ff fe1b 	bl	800227c <magnetic_field_all_tests>
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <all_unit_tests+0x56>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	e018      	b.n	8002684 <all_unit_tests+0x88>
    mu_run_all_sub_tests(beacon_all_tests);
 8002652:	f7ff fbf7 	bl	8001e44 <beacon_all_tests>
 8002656:	60b8      	str	r0, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <all_unit_tests+0x66>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	e010      	b.n	8002684 <all_unit_tests+0x88>
    mu_run_all_sub_tests(environment_all_tests);
 8002662:	f7ff fd4b 	bl	80020fc <environment_all_tests>
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <all_unit_tests+0x76>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	e008      	b.n	8002684 <all_unit_tests+0x88>
    mu_run_all_sub_tests(navigation_all_tests);
 8002672:	f7ff ff39 	bl	80024e8 <navigation_all_tests>
 8002676:	6038      	str	r0, [r7, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <all_unit_tests+0x86>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	e000      	b.n	8002684 <all_unit_tests+0x88>

    return 0;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3720      	adds	r7, #32
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <all_tests>:
#include "static_test.h"
#include "unit_test.h"

int tests_run = 0;

static char *all_tests() {
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
    mu_run_all_sub_tests(all_unit_tests);
 8002692:	f7ff ffb3 	bl	80025fc <all_unit_tests>
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <all_tests+0x16>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	e010      	b.n	80026c4 <all_tests+0x38>
    mu_run_all_sub_tests(all_static_tests);
 80026a2:	f7fe fcbd 	bl	8001020 <all_static_tests>
 80026a6:	60b8      	str	r0, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <all_tests+0x26>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	e008      	b.n	80026c4 <all_tests+0x38>
    mu_run_all_sub_tests(all_dynamic_tests);
 80026b2:	f7fe fc9d 	bl	8000ff0 <all_dynamic_tests>
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <all_tests+0x36>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	e000      	b.n	80026c4 <all_tests+0x38>

    return 0;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <run_all_tests>:

int run_all_tests() {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
	char *result = all_tests();
 80026d2:	f7ff ffdb 	bl	800268c <all_tests>
 80026d6:	6078      	str	r0, [r7, #4]

	if (result != 0) {
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d004      	beq.n	80026e8 <run_all_tests+0x1c>
		printf("%s\r\n", result);
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	480b      	ldr	r0, [pc, #44]	; (8002710 <run_all_tests+0x44>)
 80026e2:	f00c f96f 	bl	800e9c4 <iprintf>
 80026e6:	e002      	b.n	80026ee <run_all_tests+0x22>
	} else {
		printf("ALL TESTS PASSED\r\n");
 80026e8:	480a      	ldr	r0, [pc, #40]	; (8002714 <run_all_tests+0x48>)
 80026ea:	f00c f9f1 	bl	800ead0 <puts>
	}

	printf("Tests run: %d\r\n", tests_run);
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <run_all_tests+0x4c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4619      	mov	r1, r3
 80026f4:	4809      	ldr	r0, [pc, #36]	; (800271c <run_all_tests+0x50>)
 80026f6:	f00c f965 	bl	800e9c4 <iprintf>

	return result != 0;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	080122c8 	.word	0x080122c8
 8002714:	080122d0 	.word	0x080122d0
 8002718:	24000200 	.word	0x24000200
 800271c:	080122e4 	.word	0x080122e4

08002720 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  printf("testing\r\n");
 8002724:	4807      	ldr	r0, [pc, #28]	; (8002744 <MX_FREERTOS_Init+0x24>)
 8002726:	f00c f9d3 	bl	800ead0 <puts>
  run_all_tests();
 800272a:	f7ff ffcf 	bl	80026cc <run_all_tests>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800272e:	4a06      	ldr	r2, [pc, #24]	; (8002748 <MX_FREERTOS_Init+0x28>)
 8002730:	2100      	movs	r1, #0
 8002732:	4806      	ldr	r0, [pc, #24]	; (800274c <MX_FREERTOS_Init+0x2c>)
 8002734:	f008 fdaa 	bl	800b28c <osThreadNew>
 8002738:	4603      	mov	r3, r0
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <MX_FREERTOS_Init+0x30>)
 800273c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	08012300 	.word	0x08012300
 8002748:	0801233c 	.word	0x0801233c
 800274c:	08002755 	.word	0x08002755
 8002750:	24000204 	.word	0x24000204

08002754 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800275c:	2001      	movs	r0, #1
 800275e:	f008 fe27 	bl	800b3b0 <osDelay>
 8002762:	e7fb      	b.n	800275c <StartDefaultTask+0x8>

08002764 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800276a:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <MX_GPIO_Init+0x6c>)
 800276c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002770:	4a17      	ldr	r2, [pc, #92]	; (80027d0 <MX_GPIO_Init+0x6c>)
 8002772:	f043 0304 	orr.w	r3, r3, #4
 8002776:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <MX_GPIO_Init+0x6c>)
 800277c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <MX_GPIO_Init+0x6c>)
 800278a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800278e:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <MX_GPIO_Init+0x6c>)
 8002790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002794:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <MX_GPIO_Init+0x6c>)
 800279a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800279e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <MX_GPIO_Init+0x6c>)
 80027a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ac:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <MX_GPIO_Init+0x6c>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <MX_GPIO_Init+0x6c>)
 80027b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]

}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	58024400 	.word	0x58024400

080027d4 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
    if (HAL_UART_Transmit(&huart4, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK) {
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	4806      	ldr	r0, [pc, #24]	; (8002804 <_write+0x30>)
 80027ec:	f006 fc7c 	bl	80090e8 <HAL_UART_Transmit>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <_write+0x26>
        Error_Handler();
 80027f6:	f000 f8f1 	bl	80029dc <Error_Handler>
    }

    return len;
 80027fa:	687b      	ldr	r3, [r7, #4]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	24000258 	.word	0x24000258

08002808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800280e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002812:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8002814:	bf00      	nop
 8002816:	4b25      	ldr	r3, [pc, #148]	; (80028ac <main+0xa4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <main+0x24>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	1e5a      	subs	r2, r3, #1
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	dcf4      	bgt.n	8002816 <main+0xe>
  if ( timeout < 0 )
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	da01      	bge.n	8002836 <main+0x2e>
  {
  Error_Handler();
 8002832:	f000 f8d3 	bl	80029dc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002836:	f002 fb69 	bl	8004f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800283a:	f000 f839 	bl	80028b0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800283e:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <main+0xa4>)
 8002840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002844:	4a19      	ldr	r2, [pc, #100]	; (80028ac <main+0xa4>)
 8002846:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800284a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800284e:	4b17      	ldr	r3, [pc, #92]	; (80028ac <main+0xa4>)
 8002850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800285c:	2000      	movs	r0, #0
 800285e:	f003 fbd5 	bl	800600c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8002862:	2100      	movs	r1, #0
 8002864:	2000      	movs	r0, #0
 8002866:	f003 fbeb 	bl	8006040 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800286a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800286e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8002870:	bf00      	nop
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <main+0xa4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d104      	bne.n	8002888 <main+0x80>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	1e5a      	subs	r2, r3, #1
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	dcf4      	bgt.n	8002872 <main+0x6a>
if ( timeout < 0 )
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	da01      	bge.n	8002892 <main+0x8a>
{
Error_Handler();
 800288e:	f000 f8a5 	bl	80029dc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002892:	f7ff ff67 	bl	8002764 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002896:	f000 fae5 	bl	8002e64 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 800289a:	f000 fa03 	bl	8002ca4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800289e:	f008 fcab 	bl	800b1f8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80028a2:	f7ff ff3d 	bl	8002720 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80028a6:	f008 fccb 	bl	800b240 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80028aa:	e7fe      	b.n	80028aa <main+0xa2>
 80028ac:	58024400 	.word	0x58024400

080028b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b09c      	sub	sp, #112	; 0x70
 80028b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ba:	224c      	movs	r2, #76	; 0x4c
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f00b fb56 	bl	800df70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	2220      	movs	r2, #32
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f00b fb50 	bl	800df70 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80028d0:	2004      	movs	r0, #4
 80028d2:	f003 fd11 	bl	80062f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80028d6:	2300      	movs	r3, #0
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	4b34      	ldr	r3, [pc, #208]	; (80029ac <SystemClock_Config+0xfc>)
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	4a33      	ldr	r2, [pc, #204]	; (80029ac <SystemClock_Config+0xfc>)
 80028e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028e4:	6193      	str	r3, [r2, #24]
 80028e6:	4b31      	ldr	r3, [pc, #196]	; (80029ac <SystemClock_Config+0xfc>)
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	4b2f      	ldr	r3, [pc, #188]	; (80029b0 <SystemClock_Config+0x100>)
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	4a2e      	ldr	r2, [pc, #184]	; (80029b0 <SystemClock_Config+0x100>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80028fc:	4b2c      	ldr	r3, [pc, #176]	; (80029b0 <SystemClock_Config+0x100>)
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002908:	bf00      	nop
 800290a:	4b28      	ldr	r3, [pc, #160]	; (80029ac <SystemClock_Config+0xfc>)
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002916:	d1f8      	bne.n	800290a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002918:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <SystemClock_Config+0x104>)
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	f023 0303 	bic.w	r3, r3, #3
 8002920:	4a24      	ldr	r2, [pc, #144]	; (80029b4 <SystemClock_Config+0x104>)
 8002922:	f043 0302 	orr.w	r3, r3, #2
 8002926:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002928:	2301      	movs	r3, #1
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800292c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002932:	2302      	movs	r3, #2
 8002934:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002936:	2302      	movs	r3, #2
 8002938:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800293a:	2301      	movs	r3, #1
 800293c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800293e:	2378      	movs	r3, #120	; 0x78
 8002940:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002942:	2302      	movs	r3, #2
 8002944:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002946:	2302      	movs	r3, #2
 8002948:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800294a:	2302      	movs	r3, #2
 800294c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800294e:	230c      	movs	r3, #12
 8002950:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002952:	2300      	movs	r3, #0
 8002954:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800295a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800295e:	4618      	mov	r0, r3
 8002960:	f003 fd34 	bl	80063cc <HAL_RCC_OscConfig>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800296a:	f000 f837 	bl	80029dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800296e:	233f      	movs	r3, #63	; 0x3f
 8002970:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002972:	2303      	movs	r3, #3
 8002974:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800297a:	2308      	movs	r3, #8
 800297c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800297e:	2340      	movs	r3, #64	; 0x40
 8002980:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002982:	2340      	movs	r3, #64	; 0x40
 8002984:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800298a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800298c:	2340      	movs	r3, #64	; 0x40
 800298e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	2104      	movs	r1, #4
 8002994:	4618      	mov	r0, r3
 8002996:	f004 f947 	bl	8006c28 <HAL_RCC_ClockConfig>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80029a0:	f000 f81c 	bl	80029dc <Error_Handler>
  }
}
 80029a4:	bf00      	nop
 80029a6:	3770      	adds	r7, #112	; 0x70
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	58024800 	.word	0x58024800
 80029b0:	58000400 	.word	0x58000400
 80029b4:	58024400 	.word	0x58024400

080029b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d101      	bne.n	80029ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029ca:	f002 fadb 	bl	8004f84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40001400 	.word	0x40001400

080029dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029e0:	b672      	cpsid	i
}
 80029e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029e4:	e7fe      	b.n	80029e4 <Error_Handler+0x8>
	...

080029e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ee:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <HAL_MspInit+0x38>)
 80029f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029f4:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <HAL_MspInit+0x38>)
 80029f6:	f043 0302 	orr.w	r3, r3, #2
 80029fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <HAL_MspInit+0x38>)
 8002a00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	210f      	movs	r1, #15
 8002a10:	f06f 0001 	mvn.w	r0, #1
 8002a14:	f002 fbbe 	bl	8005194 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	58024400 	.word	0x58024400

08002a24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b090      	sub	sp, #64	; 0x40
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b0f      	cmp	r3, #15
 8002a30:	d827      	bhi.n	8002a82 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8002a32:	2200      	movs	r2, #0
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	2037      	movs	r0, #55	; 0x37
 8002a38:	f002 fbac 	bl	8005194 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a3c:	2037      	movs	r0, #55	; 0x37
 8002a3e:	f002 fbc3 	bl	80051c8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002a42:	4a29      	ldr	r2, [pc, #164]	; (8002ae8 <HAL_InitTick+0xc4>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002a48:	4b28      	ldr	r3, [pc, #160]	; (8002aec <HAL_InitTick+0xc8>)
 8002a4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a4e:	4a27      	ldr	r2, [pc, #156]	; (8002aec <HAL_InitTick+0xc8>)
 8002a50:	f043 0320 	orr.w	r3, r3, #32
 8002a54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a58:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_InitTick+0xc8>)
 8002a5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a66:	f107 0210 	add.w	r2, r7, #16
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f004 fc65 	bl	8007340 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d106      	bne.n	8002a8e <HAL_InitTick+0x6a>
 8002a80:	e001      	b.n	8002a86 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e02b      	b.n	8002ade <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a86:	f004 fc2f 	bl	80072e8 <HAL_RCC_GetPCLK1Freq>
 8002a8a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002a8c:	e004      	b.n	8002a98 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a8e:	f004 fc2b 	bl	80072e8 <HAL_RCC_GetPCLK1Freq>
 8002a92:	4603      	mov	r3, r0
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9a:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <HAL_InitTick+0xcc>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	0c9b      	lsrs	r3, r3, #18
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002aa6:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <HAL_InitTick+0xd0>)
 8002aa8:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <HAL_InitTick+0xd4>)
 8002aaa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002aac:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <HAL_InitTick+0xd0>)
 8002aae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ab2:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002ab4:	4a0f      	ldr	r2, [pc, #60]	; (8002af4 <HAL_InitTick+0xd0>)
 8002ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab8:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <HAL_InitTick+0xd0>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <HAL_InitTick+0xd0>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002ac6:	480b      	ldr	r0, [pc, #44]	; (8002af4 <HAL_InitTick+0xd0>)
 8002ac8:	f005 ffe4 	bl	8008a94 <HAL_TIM_Base_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d104      	bne.n	8002adc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002ad2:	4808      	ldr	r0, [pc, #32]	; (8002af4 <HAL_InitTick+0xd0>)
 8002ad4:	f006 f840 	bl	8008b58 <HAL_TIM_Base_Start_IT>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	e000      	b.n	8002ade <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3740      	adds	r7, #64	; 0x40
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	24000008 	.word	0x24000008
 8002aec:	58024400 	.word	0x58024400
 8002af0:	431bde83 	.word	0x431bde83
 8002af4:	24000208 	.word	0x24000208
 8002af8:	40001400 	.word	0x40001400

08002afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b00:	e7fe      	b.n	8002b00 <NMI_Handler+0x4>

08002b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b06:	e7fe      	b.n	8002b06 <HardFault_Handler+0x4>

08002b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <MemManage_Handler+0x4>

08002b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <BusFault_Handler+0x4>

08002b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <UsageFault_Handler+0x4>

08002b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <UART4_IRQHandler+0x10>)
 8002b2e:	f006 fb71 	bl	8009214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	24000258 	.word	0x24000258

08002b3c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002b40:	4802      	ldr	r0, [pc, #8]	; (8002b4c <TIM7_IRQHandler+0x10>)
 8002b42:	f006 f881 	bl	8008c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	24000208 	.word	0x24000208

08002b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
	return 1;
 8002b54:	2301      	movs	r3, #1
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <_kill>:

int _kill(int pid, int sig)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b6a:	f00b f8bf 	bl	800dcec <__errno>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2216      	movs	r2, #22
 8002b72:	601a      	str	r2, [r3, #0]
	return -1;
 8002b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <_exit>:

void _exit (int status)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b88:	f04f 31ff 	mov.w	r1, #4294967295
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ffe7 	bl	8002b60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b92:	e7fe      	b.n	8002b92 <_exit+0x12>

08002b94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	e00a      	b.n	8002bbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ba6:	f3af 8000 	nop.w
 8002baa:	4601      	mov	r1, r0
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	60ba      	str	r2, [r7, #8]
 8002bb2:	b2ca      	uxtb	r2, r1
 8002bb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	dbf0      	blt.n	8002ba6 <_read+0x12>
	}

return len;
 8002bc4:	687b      	ldr	r3, [r7, #4]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <_close>:
	}
	return len;
}

int _close(int file)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
	return -1;
 8002bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bf6:	605a      	str	r2, [r3, #4]
	return 0;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <_isatty>:

int _isatty(int file)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
	return 1;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
	return 0;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c40:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <_sbrk+0x5c>)
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <_sbrk+0x60>)
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c4c:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <_sbrk+0x64>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <_sbrk+0x64>)
 8002c56:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <_sbrk+0x68>)
 8002c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c5a:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <_sbrk+0x64>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d207      	bcs.n	8002c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c68:	f00b f840 	bl	800dcec <__errno>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	220c      	movs	r2, #12
 8002c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
 8002c76:	e009      	b.n	8002c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c78:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <_sbrk+0x64>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	4a05      	ldr	r2, [pc, #20]	; (8002c9c <_sbrk+0x64>)
 8002c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	24080000 	.word	0x24080000
 8002c98:	00000400 	.word	0x00000400
 8002c9c:	24000254 	.word	0x24000254
 8002ca0:	24005228 	.word	0x24005228

08002ca4 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002ca8:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <MX_UART4_Init+0x90>)
 8002caa:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <MX_UART4_Init+0x94>)
 8002cac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002cae:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <MX_UART4_Init+0x90>)
 8002cb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cb4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002cb6:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <MX_UART4_Init+0x90>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <MX_UART4_Init+0x90>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002cc2:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <MX_UART4_Init+0x90>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <MX_UART4_Init+0x90>)
 8002cca:	220c      	movs	r2, #12
 8002ccc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cce:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <MX_UART4_Init+0x90>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd4:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <MX_UART4_Init+0x90>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cda:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <MX_UART4_Init+0x90>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <MX_UART4_Init+0x90>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ce6:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <MX_UART4_Init+0x90>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002cec:	4811      	ldr	r0, [pc, #68]	; (8002d34 <MX_UART4_Init+0x90>)
 8002cee:	f006 f9ab 	bl	8009048 <HAL_UART_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002cf8:	f7ff fe70 	bl	80029dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	480d      	ldr	r0, [pc, #52]	; (8002d34 <MX_UART4_Init+0x90>)
 8002d00:	f007 fe62 	bl	800a9c8 <HAL_UARTEx_SetTxFifoThreshold>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002d0a:	f7ff fe67 	bl	80029dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4808      	ldr	r0, [pc, #32]	; (8002d34 <MX_UART4_Init+0x90>)
 8002d12:	f007 fe97 	bl	800aa44 <HAL_UARTEx_SetRxFifoThreshold>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002d1c:	f7ff fe5e 	bl	80029dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002d20:	4804      	ldr	r0, [pc, #16]	; (8002d34 <MX_UART4_Init+0x90>)
 8002d22:	f007 fe18 	bl	800a956 <HAL_UARTEx_DisableFifoMode>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002d2c:	f7ff fe56 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	24000258 	.word	0x24000258
 8002d38:	40004c00 	.word	0x40004c00

08002d3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b0ba      	sub	sp, #232	; 0xe8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d54:	f107 0318 	add.w	r3, r7, #24
 8002d58:	22bc      	movs	r2, #188	; 0xbc
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f00b f907 	bl	800df70 <memset>
  if(uartHandle->Instance==UART4)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a3b      	ldr	r2, [pc, #236]	; (8002e54 <HAL_UART_MspInit+0x118>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d16e      	bne.n	8002e4a <HAL_UART_MspInit+0x10e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d76:	f107 0318 	add.w	r3, r7, #24
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f004 fb22 	bl	80073c4 <HAL_RCCEx_PeriphCLKConfig>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d86:	f7ff fe29 	bl	80029dc <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002d8a:	4b33      	ldr	r3, [pc, #204]	; (8002e58 <HAL_UART_MspInit+0x11c>)
 8002d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d90:	4a31      	ldr	r2, [pc, #196]	; (8002e58 <HAL_UART_MspInit+0x11c>)
 8002d92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d9a:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <HAL_UART_MspInit+0x11c>)
 8002d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002da0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da8:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <HAL_UART_MspInit+0x11c>)
 8002daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dae:	4a2a      	ldr	r2, [pc, #168]	; (8002e58 <HAL_UART_MspInit+0x11c>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002db8:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <HAL_UART_MspInit+0x11c>)
 8002dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_UART_MspInit+0x11c>)
 8002dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dcc:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <HAL_UART_MspInit+0x11c>)
 8002dce:	f043 0304 	orr.w	r3, r3, #4
 8002dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dd6:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <HAL_UART_MspInit+0x11c>)
 8002dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e02:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e06:	4619      	mov	r1, r3
 8002e08:	4814      	ldr	r0, [pc, #80]	; (8002e5c <HAL_UART_MspInit+0x120>)
 8002e0a:	f002 ff4f 	bl	8005cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	2302      	movs	r3, #2
 8002e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e28:	2308      	movs	r3, #8
 8002e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e32:	4619      	mov	r1, r3
 8002e34:	480a      	ldr	r0, [pc, #40]	; (8002e60 <HAL_UART_MspInit+0x124>)
 8002e36:	f002 ff39 	bl	8005cac <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2105      	movs	r1, #5
 8002e3e:	2034      	movs	r0, #52	; 0x34
 8002e40:	f002 f9a8 	bl	8005194 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002e44:	2034      	movs	r0, #52	; 0x34
 8002e46:	f002 f9bf 	bl	80051c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	37e8      	adds	r7, #232	; 0xe8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40004c00 	.word	0x40004c00
 8002e58:	58024400 	.word	0x58024400
 8002e5c:	58020000 	.word	0x58020000
 8002e60:	58020800 	.word	0x58020800

08002e64 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002e68:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002e6a:	4a16      	ldr	r2, [pc, #88]	; (8002ec4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002e6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002e70:	2209      	movs	r2, #9
 8002e72:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002e74:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002e76:	2202      	movs	r2, #2
 8002e78:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002e82:	2202      	movs	r2, #2
 8002e84:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002eaa:	4805      	ldr	r0, [pc, #20]	; (8002ec0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002eac:	f003 f8dc 	bl	8006068 <HAL_PCD_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002eb6:	f7ff fd91 	bl	80029dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	240002e8 	.word	0x240002e8
 8002ec4:	40080000 	.word	0x40080000

08002ec8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b0b8      	sub	sp, #224	; 0xe0
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ee0:	f107 0310 	add.w	r3, r7, #16
 8002ee4:	22bc      	movs	r2, #188	; 0xbc
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f00b f841 	bl	800df70 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a36      	ldr	r2, [pc, #216]	; (8002fcc <HAL_PCD_MspInit+0x104>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d165      	bne.n	8002fc4 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002ef8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002efc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8002efe:	2301      	movs	r3, #1
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8002f02:	2318      	movs	r3, #24
 8002f04:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002f06:	2302      	movs	r3, #2
 8002f08:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002f12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f16:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8002f1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f24:	f107 0310 	add.w	r3, r7, #16
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f004 fa4b 	bl	80073c4 <HAL_RCCEx_PeriphCLKConfig>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002f34:	f7ff fd52 	bl	80029dc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002f38:	f003 fa38 	bl	80063ac <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3c:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <HAL_PCD_MspInit+0x108>)
 8002f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f42:	4a23      	ldr	r2, [pc, #140]	; (8002fd0 <HAL_PCD_MspInit+0x108>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f4c:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_PCD_MspInit+0x108>)
 8002f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002f5a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002f5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f62:	2302      	movs	r3, #2
 8002f64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002f74:	230a      	movs	r3, #10
 8002f76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4814      	ldr	r0, [pc, #80]	; (8002fd4 <HAL_PCD_MspInit+0x10c>)
 8002f82:	f002 fe93 	bl	8005cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	480c      	ldr	r0, [pc, #48]	; (8002fd4 <HAL_PCD_MspInit+0x10c>)
 8002fa2:	f002 fe83 	bl	8005cac <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <HAL_PCD_MspInit+0x108>)
 8002fa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fac:	4a08      	ldr	r2, [pc, #32]	; (8002fd0 <HAL_PCD_MspInit+0x108>)
 8002fae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002fb2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_PCD_MspInit+0x108>)
 8002fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	37e0      	adds	r7, #224	; 0xe0
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40080000 	.word	0x40080000
 8002fd0:	58024400 	.word	0x58024400
 8002fd4:	58020000 	.word	0x58020000

08002fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003010 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fdc:	f7fd fca4 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fe0:	480c      	ldr	r0, [pc, #48]	; (8003014 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fe2:	490d      	ldr	r1, [pc, #52]	; (8003018 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fe4:	4a0d      	ldr	r2, [pc, #52]	; (800301c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fe8:	e002      	b.n	8002ff0 <LoopCopyDataInit>

08002fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fee:	3304      	adds	r3, #4

08002ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ff4:	d3f9      	bcc.n	8002fea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ff6:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ff8:	4c0a      	ldr	r4, [pc, #40]	; (8003024 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ffc:	e001      	b.n	8003002 <LoopFillZerobss>

08002ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003000:	3204      	adds	r2, #4

08003002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003004:	d3fb      	bcc.n	8002ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003006:	f00a ff6d 	bl	800dee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800300a:	f7ff fbfd 	bl	8002808 <main>
  bx  lr
 800300e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003010:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003014:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003018:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 800301c:	08013288 	.word	0x08013288
  ldr r2, =_sbss
 8003020:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8003024:	24005224 	.word	0x24005224

08003028 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003028:	e7fe      	b.n	8003028 <ADC3_IRQHandler>

0800302a <initBeacon>:
 * This function initializes the Beacon object with the provided parameters,
 * and calculates the check sum and product used to verify the Beacon's initialization.
 */
void initBeacon(Beacon *beacon,
                float magnetic_moment_rms, float frequency,
                int sample_rate, int sample_size) {
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af00      	add	r7, sp, #0
 8003030:	6178      	str	r0, [r7, #20]
 8003032:	ed87 0a04 	vstr	s0, [r7, #16]
 8003036:	edc7 0a03 	vstr	s1, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
    beacon->initialized = 0;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2200      	movs	r2, #0
 8003042:	635a      	str	r2, [r3, #52]	; 0x34

    // Return early if sample_rate or sample_size are invalid
    if (sample_rate <= 0 || sample_size <= 0) return;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	dd7a      	ble.n	8003140 <initBeacon+0x116>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	dd77      	ble.n	8003140 <initBeacon+0x116>

    beacon->check_sum = 0;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
    beacon->check_prd = 1;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c

    // Initialize the magnetic field source with the given parameters
    initMagneticFieldSource(&beacon->magnetic_field_source, magnetic_moment_rms, frequency);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	edd7 0a03 	vldr	s1, [r7, #12]
 8003066:	ed97 0a04 	vldr	s0, [r7, #16]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fc40 	bl	80038f0 <initMagneticFieldSource>

    // Calculate the spectrum window based on the magnetic field source frequency and the given sample rate and size
    beacon->spectrum_window = beacon->magnetic_field_source.frequency / (sample_rate / sample_size);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	edd3 6a01 	vldr	s13, [r3, #4]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	fb92 f3f3 	sdiv	r3, r2, r3
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800308a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800308e:	ee17 2a90 	vmov	r2, s15
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	621a      	str	r2, [r3, #32]

    // Set the survey status to 0 (undiscovered)
    beacon->survey_status = 0;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2200      	movs	r2, #0
 800309a:	629a      	str	r2, [r3, #40]	; 0x28

    // Set the initialized flag to 1
    beacon->initialized = 1;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2201      	movs	r2, #1
 80030a0:	635a      	str	r2, [r3, #52]	; 0x34

    // Calculate the check sum and product based on the initialized values
    beacon->check_sum += beacon->initialized;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ac:	ee07 3a90 	vmov	s15, r3
 80030b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    beacon->check_sum += beacon->spectrum_window;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	ee07 3a90 	vmov	s15, r3
 80030cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    beacon->check_sum += beacon->magnetic_field_source.frequency;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80030e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    beacon->check_prd *= beacon->initialized;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fa:	ee07 3a90 	vmov	s15, r3
 80030fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    beacon->check_prd *= beacon->spectrum_window;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800311e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    beacon->check_prd *= beacon->magnetic_field_source.frequency;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	edd3 7a01 	vldr	s15, [r3, #4]
 8003134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 800313e:	e000      	b.n	8003142 <initBeacon+0x118>
    if (sample_rate <= 0 || sample_size <= 0) return;
 8003140:	bf00      	nop
}
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <isBeaconInitialized>:
 * @return Returns 1 if the Beacon is properly initialized, 0 otherwise.
 *
 * This function checks if a Beacon object has been properly initialized by comparing
 * the calculated check sum and product to the stored values.
 */
int isBeaconInitialized(Beacon *beacon) {
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
    // Return 0 if the beacon is NULL or not initialized
    if (beacon && beacon->initialized == 0) return 0;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <isBeaconInitialized+0x1a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <isBeaconInitialized+0x1a>
 800315e:	2300      	movs	r3, #0
 8003160:	e05e      	b.n	8003220 <isBeaconInitialized+0xd8>

    // Calculate the check sum and product based on the current values
    float check_sum = 0;
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]
    float check_prd = 1;
 8003168:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800316c:	60bb      	str	r3, [r7, #8]

    check_sum += beacon->initialized;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800317a:	ed97 7a03 	vldr	s14, [r7, #12]
 800317e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003182:	edc7 7a03 	vstr	s15, [r7, #12]
    check_sum += beacon->spectrum_window;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003192:	ed97 7a03 	vldr	s14, [r7, #12]
 8003196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800319a:	edc7 7a03 	vstr	s15, [r7, #12]
    check_sum += beacon->magnetic_field_source.frequency;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80031a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80031a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ac:	edc7 7a03 	vstr	s15, [r7, #12]

    check_prd *= beacon->initialized;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b4:	ee07 3a90 	vmov	s15, r3
 80031b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80031c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c4:	edc7 7a02 	vstr	s15, [r7, #8]
    check_prd *= beacon->spectrum_window;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	ee07 3a90 	vmov	s15, r3
 80031d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80031d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031dc:	edc7 7a02 	vstr	s15, [r7, #8]
    check_prd *= beacon->magnetic_field_source.frequency;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80031e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80031ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ee:	edc7 7a02 	vstr	s15, [r7, #8]

    // Return true if the calculated check sum and product match the stored values
    return check_sum == beacon->check_sum && check_prd == beacon->check_prd;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80031f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80031fc:	eeb4 7a67 	vcmp.f32	s14, s15
 8003200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003204:	d10b      	bne.n	800321e <isBeaconInitialized+0xd6>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800320c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003210:	eeb4 7a67 	vcmp.f32	s14, s15
 8003214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003218:	d101      	bne.n	800321e <isBeaconInitialized+0xd6>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <isBeaconInitialized+0xd8>
 800321e:	2300      	movs	r3, #0
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <initDevice>:
 * @param magnetic_sensors Array of magnetic sensors to be added to the device.
 * @param amount_of_magnetic_sensors Number of magnetic sensors in the `magnetic_sensors` array.
 *
 * @return None.
 */
void initDevice(Device *device, MagneticSensor *magnetic_sensors, int amount_of_magnetic_sensors) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
    device->initialized = 0;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	639a      	str	r2, [r3, #56]	; 0x38

    if (amount_of_magnetic_sensors < 1) return;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	dd45      	ble.n	80032d0 <initDevice+0xa4>

    device->check_sum = 0;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	635a      	str	r2, [r3, #52]	; 0x34
    device->check_prd = 1;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	631a      	str	r2, [r3, #48]	; 0x30

    device->baseline_configured = 0;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	62da      	str	r2, [r3, #44]	; 0x2c

    setCoordinate(&device->position, 0.0, 0.0, 0.0);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 80032d8 <initDevice+0xac>
 800325c:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80032d8 <initDevice+0xac>
 8003260:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80032d8 <initDevice+0xac>
 8003264:	4618      	mov	r0, r3
 8003266:	f001 fb43 	bl	80048f0 <setCoordinate>
    setVector(&device->attitude, 0.0, 0.0, 0.0);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	330c      	adds	r3, #12
 800326e:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 80032d8 <initDevice+0xac>
 8003272:	eddf 0a19 	vldr	s1, [pc, #100]	; 80032d8 <initDevice+0xac>
 8003276:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80032d8 <initDevice+0xac>
 800327a:	4618      	mov	r0, r3
 800327c:	f001 fb51 	bl	8004922 <setVector>

    device->amount_of_magnetic_sensors = amount_of_magnetic_sensors;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	629a      	str	r2, [r3, #40]	; 0x28
    device->magnetic_sensors = magnetic_sensors;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	625a      	str	r2, [r3, #36]	; 0x24

    device->initialized = 1;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	639a      	str	r2, [r3, #56]	; 0x38

    // Calculate check sum and product
    device->check_sum += device->initialized;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	441a      	add	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	635a      	str	r2, [r3, #52]	; 0x34
    device->check_sum += device->amount_of_magnetic_sensors;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	441a      	add	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	635a      	str	r2, [r3, #52]	; 0x34

    device->check_prd *= device->initialized;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032b6:	fb03 f202 	mul.w	r2, r3, r2
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30
    device->check_prd *= device->amount_of_magnetic_sensors;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80032c6:	fb03 f202 	mul.w	r2, r3, r2
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30
 80032ce:	e000      	b.n	80032d2 <initDevice+0xa6>
    if (amount_of_magnetic_sensors < 1) return;
 80032d0:	bf00      	nop
}
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	00000000 	.word	0x00000000

080032dc <setBaseline>:
 * @param device Pointer to the device.
 * @param baseline Pointer to the baseline to be set.
 *
 * @return None.
 */
void setBaseline(Device *device, Baseline *baseline) {
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
    device->baseline = baseline;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	621a      	str	r2, [r3, #32]

    device->baseline_configured = 1;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <isDeviceInitialized>:
 *
 * @param device Pointer to the device.
 *
 * @return 1 if the device is initialized, otherwise 0.
 */
int isDeviceInitialized(Device *device) {
 80032fe:	b580      	push	{r7, lr}
 8003300:	b086      	sub	sp, #24
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
    if (device->initialized == 0) return 0;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <isDeviceInitialized+0x14>
 800330e:	2300      	movs	r3, #0
 8003310:	e06d      	b.n	80033ee <isDeviceInitialized+0xf0>

    float check_sum = 0;
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	613b      	str	r3, [r7, #16]
    float check_prd = 1;
 8003318:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800331c:	60fb      	str	r3, [r7, #12]

    check_sum += device->initialized;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	ee07 3a90 	vmov	s15, r3
 8003326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800332a:	ed97 7a04 	vldr	s14, [r7, #16]
 800332e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003332:	edc7 7a04 	vstr	s15, [r7, #16]
    check_sum += device->amount_of_magnetic_sensors;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003342:	ed97 7a04 	vldr	s14, [r7, #16]
 8003346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334a:	edc7 7a04 	vstr	s15, [r7, #16]

    check_prd *= device->initialized;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800335a:	ed97 7a03 	vldr	s14, [r7, #12]
 800335e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003362:	edc7 7a03 	vstr	s15, [r7, #12]
    check_prd *= device->amount_of_magnetic_sensors;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003372:	ed97 7a03 	vldr	s14, [r7, #12]
 8003376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337a:	edc7 7a03 	vstr	s15, [r7, #12]

    if (!(check_sum == device->check_sum && check_prd == device->check_prd)) return 0;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800338a:	ed97 7a04 	vldr	s14, [r7, #16]
 800338e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003396:	d10c      	bne.n	80033b2 <isDeviceInitialized+0xb4>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	ee07 3a90 	vmov	s15, r3
 80033a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80033a8:	eeb4 7a67 	vcmp.f32	s14, s15
 80033ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b0:	d001      	beq.n	80033b6 <isDeviceInitialized+0xb8>
 80033b2:	2300      	movs	r3, #0
 80033b4:	e01b      	b.n	80033ee <isDeviceInitialized+0xf0>

    // Check if all magnetic sensors are correctly initialized
    for (int index = 0; index < device->amount_of_magnetic_sensors; index++) {
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e012      	b.n	80033e2 <isDeviceInitialized+0xe4>
        if (isMagneticSensorInitialized(&device->magnetic_sensors[index]) == 0) {
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	440b      	add	r3, r1
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fc2b 	bl	8003c28 <isMagneticSensorInitialized>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <isDeviceInitialized+0xde>
            // If at least one sensor is wrongly initialized, device is not ready

            return 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	e008      	b.n	80033ee <isDeviceInitialized+0xf0>
    for (int index = 0; index < device->amount_of_magnetic_sensors; index++) {
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	3301      	adds	r3, #1
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	dbe7      	blt.n	80033bc <isDeviceInitialized+0xbe>
        }
    }

    return 1;
 80033ec:	2301      	movs	r3, #1
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <updateDevicePosition>:
 * @param device Pointer to the device.
 * @param environment Pointer to the environment.
 *
 * @return None.
 */
void updateDevicePosition(Device *device, Environment *environment) {
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
    const int amount_of_magnetic_sensors = device->amount_of_magnetic_sensors;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	613b      	str	r3, [r7, #16]

    Coordinate *device_position = &device->position;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	60fb      	str	r3, [r7, #12]
    Coordinate *sensor_position;

    estimateMagneticSensorPosition(device, environment);
 800340a:	6839      	ldr	r1, [r7, #0]
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 ffb1 	bl	8004374 <estimateMagneticSensorPosition>

    device_position->x = 0;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
    device_position->y = 0;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	605a      	str	r2, [r3, #4]
    device_position->z = 0;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	609a      	str	r2, [r3, #8]

    for (int sensor_index = 0; sensor_index < amount_of_magnetic_sensors; sensor_index++) {
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	e042      	b.n	80034b6 <updateDevicePosition+0xc0>
        sensor_position = &device->magnetic_sensors[sensor_index].local_position;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	440b      	add	r3, r1
 8003440:	3314      	adds	r3, #20
 8003442:	60bb      	str	r3, [r7, #8]

        device_position->x += sensor_position->x / amount_of_magnetic_sensors;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	ed93 7a00 	vldr	s14, [r3]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	ed93 6a00 	vldr	s12, [r3]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800345a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800345e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	edc3 7a00 	vstr	s15, [r3]
        device_position->y += sensor_position->y / amount_of_magnetic_sensors;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	ed93 7a01 	vldr	s14, [r3, #4]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	ed93 6a01 	vldr	s12, [r3, #4]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800347e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	edc3 7a01 	vstr	s15, [r3, #4]
        device_position->z += sensor_position->z / amount_of_magnetic_sensors;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	ed93 6a02 	vldr	s12, [r3, #8]
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80034a2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80034a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	edc3 7a02 	vstr	s15, [r3, #8]
    for (int sensor_index = 0; sensor_index < amount_of_magnetic_sensors; sensor_index++) {
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	3301      	adds	r3, #1
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	dbb8      	blt.n	8003430 <updateDevicePosition+0x3a>
    }

    // Update device attitude if the baseline is configured
    if (device->baseline_configured == 1) {
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d105      	bne.n	80034d2 <updateDevicePosition+0xdc>
        updateDeviceAttitude(device);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f807 	bl	80034da <updateDeviceAttitude>
        updateDeviceHeading(device);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f863 	bl	8003598 <updateDeviceHeading>
    }
}
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <updateDeviceAttitude>:

void updateDeviceAttitude(Device *device) {
 80034da:	b580      	push	{r7, lr}
 80034dc:	b088      	sub	sp, #32
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
    Coordinate *initial_point = device->baseline->initial_point;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	61fb      	str	r3, [r7, #28]
    Coordinate *ending_point = device->baseline->ending_point;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	61bb      	str	r3, [r7, #24]

    Vector *attitude = &device->attitude;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	330c      	adds	r3, #12
 80034f6:	617b      	str	r3, [r7, #20]
    double attitude_norm;

    attitude->x = ending_point->x - initial_point->x;
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	ed93 7a00 	vldr	s14, [r3]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	edd3 7a00 	vldr	s15, [r3]
 8003504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	edc3 7a00 	vstr	s15, [r3]
    attitude->y = ending_point->y - initial_point->y;
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	ed93 7a01 	vldr	s14, [r3, #4]
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	edd3 7a01 	vldr	s15, [r3, #4]
 800351a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	edc3 7a01 	vstr	s15, [r3, #4]
    attitude->z = 0;  // 2 d plane first
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	609a      	str	r2, [r3, #8]

    attitude_norm = norm(*attitude);
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	edd3 6a00 	vldr	s13, [r3]
 8003532:	ed93 7a01 	vldr	s14, [r3, #4]
 8003536:	edd3 7a02 	vldr	s15, [r3, #8]
 800353a:	eeb0 0a66 	vmov.f32	s0, s13
 800353e:	eef0 0a47 	vmov.f32	s1, s14
 8003542:	eeb0 1a67 	vmov.f32	s2, s15
 8003546:	f001 fa05 	bl	8004954 <norm>
 800354a:	eef0 7a40 	vmov.f32	s15, s0
 800354e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003552:	ed87 7b02 	vstr	d7, [r7, #8]

    attitude->x /= attitude_norm;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003560:	ed97 6b02 	vldr	d6, [r7, #8]
 8003564:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003568:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	edc3 7a00 	vstr	s15, [r3]
    attitude->y /= attitude_norm;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	edd3 7a01 	vldr	s15, [r3, #4]
 8003578:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800357c:	ed97 6b02 	vldr	d6, [r7, #8]
 8003580:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003584:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800358e:	bf00      	nop
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <updateDeviceHeading>:

void updateDeviceHeading(Device *device) {
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
    Vector attitude = device->attitude;
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	f107 030c 	add.w	r3, r7, #12
 80035a6:	320c      	adds	r2, #12
 80035a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80035aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    double heading;

    heading = atan2(attitude.x, attitude.y) * 180.0 / M_PI;
 80035ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80035b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035b6:	edd7 6a04 	vldr	s13, [r7, #16]
 80035ba:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80035be:	eeb0 1b46 	vmov.f64	d1, d6
 80035c2:	eeb0 0b47 	vmov.f64	d0, d7
 80035c6:	f00d fc13 	bl	8010df0 <atan2>
 80035ca:	eeb0 7b40 	vmov.f64	d7, d0
 80035ce:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80035f8 <updateDeviceHeading+0x60>
 80035d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80035d6:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8003600 <updateDeviceHeading+0x68>
 80035da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80035de:	ed87 7b06 	vstr	d7, [r7, #24]

    device->heading = heading;
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80035ec:	bf00      	nop
 80035ee:	3720      	adds	r7, #32
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	f3af 8000 	nop.w
 80035f8:	00000000 	.word	0x00000000
 80035fc:	40668000 	.word	0x40668000
 8003600:	54442d18 	.word	0x54442d18
 8003604:	400921fb 	.word	0x400921fb

08003608 <initEnvironment>:
 * @param edges Pointer to the array of edges in the environment.
 * @param amount_of_beacons The number of beacons in the environment.
 * @param amount_of_edges The number of edges in the environment.
 */
void initEnvironment(Environment *environment, Beacon *beacons,
                     Coordinate *edges, int amount_of_beacons, int amount_of_edges) {
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	603b      	str	r3, [r7, #0]
    environment->initialized = 0;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	619a      	str	r2, [r3, #24]

    if (amount_of_edges <= 0 || amount_of_beacons <= 0) return;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	dd45      	ble.n	80036ae <initEnvironment+0xa6>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	dd42      	ble.n	80036ae <initEnvironment+0xa6>

    environment->check_sum = 0;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	615a      	str	r2, [r3, #20]
    environment->check_prd = 1;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	611a      	str	r2, [r3, #16]

    environment->amount_of_edges = amount_of_edges;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	605a      	str	r2, [r3, #4]
    environment->amount_of_beacons = amount_of_beacons;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	60da      	str	r2, [r3, #12]

    environment->edges = edges;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	601a      	str	r2, [r3, #0]
    environment->beacons = beacons;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]

    environment->initialized = 1;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	619a      	str	r2, [r3, #24]

    // Calculate check sum and product
    environment->check_sum += environment->initialized;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	441a      	add	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	615a      	str	r2, [r3, #20]
    environment->check_sum += environment->amount_of_edges;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	441a      	add	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	615a      	str	r2, [r3, #20]
    environment->check_sum += environment->amount_of_beacons;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	441a      	add	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	615a      	str	r2, [r3, #20]

    environment->check_prd *= environment->initialized;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	6992      	ldr	r2, [r2, #24]
 8003684:	fb03 f202 	mul.w	r2, r3, r2
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	611a      	str	r2, [r3, #16]
    environment->check_prd *= environment->amount_of_beacons;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	68d2      	ldr	r2, [r2, #12]
 8003694:	fb03 f202 	mul.w	r2, r3, r2
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	611a      	str	r2, [r3, #16]
    environment->check_prd *= environment->amount_of_edges;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	6852      	ldr	r2, [r2, #4]
 80036a4:	fb03 f202 	mul.w	r2, r3, r2
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	611a      	str	r2, [r3, #16]
 80036ac:	e000      	b.n	80036b0 <initEnvironment+0xa8>
    if (amount_of_edges <= 0 || amount_of_beacons <= 0) return;
 80036ae:	bf00      	nop
}
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <isEnvironmentInitialized>:
 * @brief Determines if the environment is initialized and ready for use.
 *
 * @param environment Pointer to the environment to be checked.
 * @return 1 if the environment is initialized, 0 otherwise.
 */
int isEnvironmentInitialized(Environment *environment) {
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
    if (environment->initialized == 0) return 0;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <isEnvironmentInitialized+0x14>
 80036ca:	2300      	movs	r3, #0
 80036cc:	e085      	b.n	80037da <isEnvironmentInitialized+0x120>

    float check_sum = 0;
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]
    float check_prd = 1;
 80036d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80036d8:	60fb      	str	r3, [r7, #12]

    check_sum += environment->initialized;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80036ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ee:	edc7 7a04 	vstr	s15, [r7, #16]
    check_sum += environment->amount_of_edges;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8003702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003706:	edc7 7a04 	vstr	s15, [r7, #16]
    check_sum += environment->amount_of_beacons;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003716:	ed97 7a04 	vldr	s14, [r7, #16]
 800371a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800371e:	edc7 7a04 	vstr	s15, [r7, #16]

    check_prd *= environment->initialized;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800372e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003736:	edc7 7a03 	vstr	s15, [r7, #12]
    check_prd *= environment->amount_of_beacons;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003746:	ed97 7a03 	vldr	s14, [r7, #12]
 800374a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374e:	edc7 7a03 	vstr	s15, [r7, #12]
    check_prd *= environment->amount_of_edges;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800375e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003766:	edc7 7a03 	vstr	s15, [r7, #12]

    if (!(check_sum == environment->check_sum && check_prd == environment->check_prd)) return 0;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003776:	ed97 7a04 	vldr	s14, [r7, #16]
 800377a:	eeb4 7a67 	vcmp.f32	s14, s15
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	d10c      	bne.n	800379e <isEnvironmentInitialized+0xe4>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	ee07 3a90 	vmov	s15, r3
 800378c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003790:	ed97 7a03 	vldr	s14, [r7, #12]
 8003794:	eeb4 7a67 	vcmp.f32	s14, s15
 8003798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379c:	d001      	beq.n	80037a2 <isEnvironmentInitialized+0xe8>
 800379e:	2300      	movs	r3, #0
 80037a0:	e01b      	b.n	80037da <isEnvironmentInitialized+0x120>

    // Check if all beacons sensors are correctly initialized
    for (int index = 0; index < environment->amount_of_beacons; index++) {
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	e012      	b.n	80037ce <isEnvironmentInitialized+0x114>
        if (isBeaconInitialized(&environment->beacons[index]) == 0) {
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6899      	ldr	r1, [r3, #8]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	440b      	add	r3, r1
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fcc5 	bl	8003148 <isBeaconInitialized>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <isEnvironmentInitialized+0x10e>
            // If at least one beacon is wrongly initialized, environment is not ready
            return 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e008      	b.n	80037da <isEnvironmentInitialized+0x120>
    for (int index = 0; index < environment->amount_of_beacons; index++) {
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	3301      	adds	r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	dbe7      	blt.n	80037a8 <isEnvironmentInitialized+0xee>
        }
    }

    return 1;
 80037d8:	2301      	movs	r3, #1
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <initIndexer>:
 *
 * @param indexer The indexer to initialize.
 * @param sample_size The size of each buffer in the slot indexer.
 * @param amount_of_buffers The total number of buffers in the slot indexer.
 */
void initIndexer(Indexer *indexer, int sample_size, int amount_of_buffers) {
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
    if (sample_size <= 10 || amount_of_buffers < 1) return;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b0a      	cmp	r3, #10
 80037f2:	dd12      	ble.n	800381a <initIndexer+0x38>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	dd0f      	ble.n	800381a <initIndexer+0x38>

    indexer->sample_size = sample_size;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	605a      	str	r2, [r3, #4]
    indexer->amount_of_buffers = amount_of_buffers;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	601a      	str	r2, [r3, #0]

    // initialize sample and buffer indexers
    indexer->sample = 0;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	609a      	str	r2, [r3, #8]
    indexer->buffer = 0;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	60da      	str	r2, [r3, #12]

    indexer->initialized = 1;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	611a      	str	r2, [r3, #16]
 8003818:	e000      	b.n	800381c <initIndexer+0x3a>
    if (sample_size <= 10 || amount_of_buffers < 1) return;
 800381a:	bf00      	nop
}
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <isIndexerInitialized>:
 * range and initialized is set to 1, the function returns 1. Otherwise, it returns 0.
 *
 * @param indexer The indexer to check.
 * @return 1 if the indexer has been initialized, 0 otherwise.
 */
int isIndexerInitialized(Indexer *indexer) {
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]

    if (indexer->initialized == 1) {
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d102      	bne.n	8003840 <isIndexerInitialized+0x1a>
        check_sum++;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	3301      	adds	r3, #1
 800383e:	60fb      	str	r3, [r7, #12]
    }

    if (indexer->sample_size > 10) {
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b0a      	cmp	r3, #10
 8003846:	dd02      	ble.n	800384e <isIndexerInitialized+0x28>
        check_sum++;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3301      	adds	r3, #1
 800384c:	60fb      	str	r3, [r7, #12]
    }

    if (indexer->amount_of_buffers > 1) {
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b01      	cmp	r3, #1
 8003854:	dd02      	ble.n	800385c <isIndexerInitialized+0x36>
        check_sum++;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3301      	adds	r3, #1
 800385a:	60fb      	str	r3, [r7, #12]
    }

    return check_sum == INDEXER_INITIALIZATION_CHECK_SUM;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b03      	cmp	r3, #3
 8003860:	bf0c      	ite	eq
 8003862:	2301      	moveq	r3, #1
 8003864:	2300      	movne	r3, #0
 8003866:	b2db      	uxtb	r3, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <incrementIndex>:
 * time.
 *
 * @param indexer The indexer to increment.
 * @return 1 if the buffer index was incremented, 0 otherwise.
 */
int incrementIndex(Indexer *indexer) {
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
    const int sample = indexer->sample;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	617b      	str	r3, [r7, #20]
    const int sample_size = indexer->sample_size;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	613b      	str	r3, [r7, #16]


    indexer->sample = (sample + 1) % sample_size;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	3301      	adds	r3, #1
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	fb93 f2f2 	sdiv	r2, r3, r2
 8003892:	6939      	ldr	r1, [r7, #16]
 8003894:	fb01 f202 	mul.w	r2, r1, r2
 8003898:	1a9a      	subs	r2, r3, r2
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	609a      	str	r2, [r3, #8]

    int increment_buffer = indexer->sample == 0;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bf0c      	ite	eq
 80038a6:	2301      	moveq	r3, #1
 80038a8:	2300      	movne	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	60fb      	str	r3, [r7, #12]

    if (increment_buffer) {
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <incrementIndex+0x46>
        mutexSampleCache(indexer);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f805 	bl	80038c4 <mutexSampleCache>
    }

    return increment_buffer;
 80038ba:	68fb      	ldr	r3, [r7, #12]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <mutexSampleCache>:
 * This function can be used in a multi-threaded context to ensure that only one thread updates the sample and buffer indices
 * at any given time.
 *
 * @param indexer The indexer to lock.
 */
void mutexSampleCache(Indexer *indexer) {
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
    indexer->buffer = (indexer->buffer + 1) %
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	3301      	adds	r3, #1
                      indexer->amount_of_buffers;
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6812      	ldr	r2, [r2, #0]
    indexer->buffer = (indexer->buffer + 1) %
 80038d6:	fb93 f1f2 	sdiv	r1, r3, r2
 80038da:	fb01 f202 	mul.w	r2, r1, r2
 80038de:	1a9a      	subs	r2, r3, r2
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	60da      	str	r2, [r3, #12]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <initMagneticFieldSource>:
 *
 * @param source A pointer to the MagneticFieldSource object to be initialized.
 * @param magnetic_moment_rms The RMS magnetic moment of the source.
 * @param frequency The frequency of the magnetic field.
 */
void initMagneticFieldSource(MagneticFieldSource *source, float magnetic_moment_rms, float frequency) {
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80038fc:	edc7 0a01 	vstr	s1, [r7, #4]
    source->initialized = 0;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	61da      	str	r2, [r3, #28]

    source->check_sum = 0;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	619a      	str	r2, [r3, #24]
    source->check_prd = 1;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003914:	615a      	str	r2, [r3, #20]

    if (magnetic_moment_rms <= 0 || frequency < 0) return;
 8003916:	edd7 7a02 	vldr	s15, [r7, #8]
 800391a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800391e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003922:	d958      	bls.n	80039d6 <initMagneticFieldSource+0xe6>
 8003924:	edd7 7a01 	vldr	s15, [r7, #4]
 8003928:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800392c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003930:	d451      	bmi.n	80039d6 <initMagneticFieldSource+0xe6>

    source->magnetic_moment_rms = magnetic_moment_rms;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	601a      	str	r2, [r3, #0]
    source->frequency = frequency;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	605a      	str	r2, [r3, #4]

    source->initialized = 1;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	61da      	str	r2, [r3, #28]

    // Calculate check sum and product
    source->check_sum += source->initialized;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	ed93 7a06 	vldr	s14, [r3, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	edc3 7a06 	vstr	s15, [r3, #24]
    source->check_sum += source->magnetic_moment_rms;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	ed93 7a06 	vldr	s14, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	edd3 7a00 	vldr	s15, [r3]
 800396c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	edc3 7a06 	vstr	s15, [r3, #24]
    source->check_sum += source->frequency;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	ed93 7a06 	vldr	s14, [r3, #24]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	edc3 7a06 	vstr	s15, [r3, #24]

    source->check_prd *= source->initialized;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	ed93 7a05 	vldr	s14, [r3, #20]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	edc3 7a05 	vstr	s15, [r3, #20]
    source->check_prd *= source->magnetic_moment_rms;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	ed93 7a05 	vldr	s14, [r3, #20]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	edd3 7a00 	vldr	s15, [r3]
 80039b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	edc3 7a05 	vstr	s15, [r3, #20]
    source->check_prd *= source->frequency;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	ed93 7a05 	vldr	s14, [r3, #20]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80039ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	edc3 7a05 	vstr	s15, [r3, #20]
 80039d4:	e000      	b.n	80039d8 <initMagneticFieldSource+0xe8>
    if (magnetic_moment_rms <= 0 || frequency < 0) return;
 80039d6:	bf00      	nop
}
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <isMagneticFieldSourceInitialized>:
 *
 * @param source A pointer to the MagneticFieldSource object to be checked.
 *
 * @return 1 if the object has been initialized correctly, 0 otherwise.
 */
int isMagneticFieldSourceInitialized(MagneticFieldSource *source) {
 80039e2:	b480      	push	{r7}
 80039e4:	b085      	sub	sp, #20
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
    float check_sum = 0;
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
    float check_prd = 1;
 80039f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80039f4:	60bb      	str	r3, [r7, #8]

    check_sum += source->initialized;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a02:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a0a:	edc7 7a03 	vstr	s15, [r7, #12]
    check_sum += source->magnetic_moment_rms;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	edd3 7a00 	vldr	s15, [r3]
 8003a14:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a1c:	edc7 7a03 	vstr	s15, [r7, #12]
    check_sum += source->frequency;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a26:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a2e:	edc7 7a03 	vstr	s15, [r7, #12]

    check_prd *= source->initialized;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a46:	edc7 7a02 	vstr	s15, [r7, #8]
    check_prd *= source->magnetic_moment_rms;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	edd3 7a00 	vldr	s15, [r3]
 8003a50:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a58:	edc7 7a02 	vstr	s15, [r7, #8]
    check_prd *= source->frequency;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a62:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6a:	edc7 7a02 	vstr	s15, [r7, #8]

    return check_sum == source->check_sum && check_prd > 0 && check_prd == source->check_prd;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	edd3 7a06 	vldr	s15, [r3, #24]
 8003a74:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a78:	eeb4 7a67 	vcmp.f32	s14, s15
 8003a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a80:	d112      	bne.n	8003aa8 <isMagneticFieldSourceInitialized+0xc6>
 8003a82:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8e:	dd0b      	ble.n	8003aa8 <isMagneticFieldSourceInitialized+0xc6>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a96:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a9a:	eeb4 7a67 	vcmp.f32	s14, s15
 8003a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa2:	d101      	bne.n	8003aa8 <isMagneticFieldSourceInitialized+0xc6>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <isMagneticFieldSourceInitialized+0xc8>
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <getMagneticIntensityFromSource>:
 * @param source A pointer to the MagneticFieldSource object representing the magnetic field source.
 * @param reference A pointer to the Coordinate object representing the reference point.
 *
 * @return The magnetic field intensity at the reference point.
 */
float getMagneticIntensityFromSource(MagneticFieldSource *source, Coordinate *reference) {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
    float distance = euclideanDistance2(&source->position, reference);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	6839      	ldr	r1, [r7, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 ff77 	bl	80049bc <euclideanDistance2>
 8003ace:	ed87 0a03 	vstr	s0, [r7, #12]

    float intensity = M_QUARTER_PI * source->magnetic_moment_rms / (distance * distance * distance) * 10000;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	edd3 7a00 	vldr	s15, [r3]
 8003ad8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003adc:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8003b20 <getMagneticIntensityFromSource+0x68>
 8003ae0:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003ae4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ae8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8003af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003af8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003afc:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8003b28 <getMagneticIntensityFromSource+0x70>
 8003b00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b08:	edc7 7a02 	vstr	s15, [r7, #8]

    return intensity;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	ee07 3a90 	vmov	s15, r3
}
 8003b12:	eeb0 0a67 	vmov.f32	s0, s15
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	f3af 8000 	nop.w
 8003b20:	6dc9bb18 	.word	0x6dc9bb18
 8003b24:	3fb45f30 	.word	0x3fb45f30
 8003b28:	00000000 	.word	0x00000000
 8003b2c:	40c38800 	.word	0x40c38800

08003b30 <getMagneticSourceDistanceByIntensity>:
 * @param source A pointer to the MagneticFieldSource object representing the magnetic field source.
 * @param intensity The specified intensity.
 *
 * @return The distance from the source required to generate the specified intensity.
 */
float getMagneticSourceDistanceByIntensity(MagneticFieldSource *source, float intensity) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	ed87 0a00 	vstr	s0, [r7]
    float distance = cbrt(M_QUARTER_PI * source->magnetic_moment_rms / intensity * 10000);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	edd3 7a00 	vldr	s15, [r3]
 8003b42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b46:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8003b88 <getMagneticSourceDistanceByIntensity+0x58>
 8003b4a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003b4e:	edd7 7a00 	vldr	s15, [r7]
 8003b52:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b56:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003b5a:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8003b90 <getMagneticSourceDistanceByIntensity+0x60>
 8003b5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b62:	eeb0 0b47 	vmov.f64	d0, d7
 8003b66:	f00d f81b 	bl	8010ba0 <cbrt>
 8003b6a:	eeb0 7b40 	vmov.f64	d7, d0
 8003b6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b72:	edc7 7a03 	vstr	s15, [r7, #12]

    return distance;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	ee07 3a90 	vmov	s15, r3
}
 8003b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	6dc9bb18 	.word	0x6dc9bb18
 8003b8c:	3fb45f30 	.word	0x3fb45f30
 8003b90:	00000000 	.word	0x00000000
 8003b94:	40c38800 	.word	0x40c38800

08003b98 <initMagneticSensor>:
 */
void initMagneticSensor(MagneticSensor *sensor,
                        unsigned int sample_size,
                        unsigned int amount_of_buffers,
                        int i2c_address,
                        int i2c_interface) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
    sensor->initialized = 0;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	66da      	str	r2, [r3, #108]	; 0x6c
    sensor->address = -1;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb2:	601a      	str	r2, [r3, #0]

    if (sample_size <= 10 || amount_of_buffers < 1 || i2c_address < 0) return;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b0a      	cmp	r3, #10
 8003bb8:	d932      	bls.n	8003c20 <initMagneticSensor+0x88>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d02f      	beq.n	8003c20 <initMagneticSensor+0x88>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	db2c      	blt.n	8003c20 <initMagneticSensor+0x88>

    sensor->sample_size = sample_size;
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24
    sensor->amount_of_buffers = amount_of_buffers;
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	621a      	str	r2, [r3, #32]
    sensor->address = i2c_address;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	601a      	str	r2, [r3, #0]
    sensor->interface = i2c_interface;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	605a      	str	r2, [r3, #4]

    initIndexer(&sensor->indexer, sample_size, amount_of_buffers);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3344      	adds	r3, #68	; 0x44
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff fdfb 	bl	80037e2 <initIndexer>
    initSpectrum(&sensor->spectrum, sample_size, amount_of_buffers);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	332c      	adds	r3, #44	; 0x2c
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f001 f815 	bl	8004c24 <initSpectrum>

    // init sensor buffer
    sensor->samples = (float *)malloc(sizeof(float) * amount_of_buffers * sample_size);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	fb02 f303 	mul.w	r3, r2, r3
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f00a f995 	bl	800df34 <malloc>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28
    sensor->indexer.sample_size = sample_size;
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	649a      	str	r2, [r3, #72]	; 0x48

    // init sensor connection
    sensor->initialized = 1;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	66da      	str	r2, [r3, #108]	; 0x6c
 8003c1e:	e000      	b.n	8003c22 <initMagneticSensor+0x8a>
    if (sample_size <= 10 || amount_of_buffers < 1 || i2c_address < 0) return;
 8003c20:	bf00      	nop
}
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <isMagneticSensorInitialized>:
 *
 * @param sensor A pointer to the MagneticSensor to check.
 *
 * @return 1 if the sensor is initialized, 0 otherwise.
 */
int isMagneticSensorInitialized(MagneticSensor *sensor) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]

    if (sensor->initialized == 1) {
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d102      	bne.n	8003c42 <isMagneticSensorInitialized+0x1a>
        check_sum++;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	60fb      	str	r3, [r7, #12]
    }

    if (sensor->address > 0) {
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	dd02      	ble.n	8003c50 <isMagneticSensorInitialized+0x28>
        check_sum++;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
    }

    if (sensor->sample_size > 0) {
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	dd02      	ble.n	8003c5e <isMagneticSensorInitialized+0x36>
        check_sum++;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	60fb      	str	r3, [r7, #12]
    }

    if (sensor->amount_of_buffers > 0) {
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	dd02      	ble.n	8003c6c <isMagneticSensorInitialized+0x44>
        check_sum++;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	60fb      	str	r3, [r7, #12]
    }

    if (isIndexerInitialized(&sensor->indexer) == 1) {
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3344      	adds	r3, #68	; 0x44
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff fdd8 	bl	8003826 <isIndexerInitialized>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d102      	bne.n	8003c82 <isMagneticSensorInitialized+0x5a>
        check_sum++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]
    }

    if (isSpectrumInitialized(&sensor->spectrum) == 1) {
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	332c      	adds	r3, #44	; 0x2c
 8003c86:	4618      	mov	r0, r3
 8003c88:	f001 f8b0 	bl	8004dec <isSpectrumInitialized>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d102      	bne.n	8003c98 <isMagneticSensorInitialized+0x70>
        check_sum++;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3301      	adds	r3, #1
 8003c96:	60fb      	str	r3, [r7, #12]
    }

    return check_sum == MAGNETIC_SENSOR_INITIALIZATION_CHECK_SUM;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b06      	cmp	r3, #6
 8003c9c:	bf0c      	ite	eq
 8003c9e:	2301      	moveq	r3, #1
 8003ca0:	2300      	movne	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <addSampleMagneticSignal>:
 * @param sensor A pointer to the MagneticSensor to add the sample to.
 * @param sample The sample to add.
 *
 * @return 1 if the sample was added successfully, 0 otherwise.
 */
int addSampleMagneticSignal(MagneticSensor *sensor, float sample) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	ed87 0a00 	vstr	s0, [r7]
    int indexer = sensor->indexer.buffer * sensor->indexer.sample_size + sensor->indexer.sample;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003cc0:	fb03 f202 	mul.w	r2, r3, r2
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc8:	4413      	add	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]

    sensor->samples[indexer] = sample;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	601a      	str	r2, [r3, #0]

    updateSpectrum(sensor, sample);
 8003cda:	ed97 0a00 	vldr	s0, [r7]
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f83c 	bl	8003d5c <updateSpectrum>

    return incrementIndex(&sensor->indexer);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3344      	adds	r3, #68	; 0x44
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fdc3 	bl	8003874 <incrementIndex>
 8003cee:	4603      	mov	r3, r0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <getMagneticSignalStrength>:
 * @brief Gets the magnetic signal strength from the given sensor and beacon.
 * @param sensor The magnetic sensor to use.
 * @param beacon The beacon to measure the magnetic signal strength from.
 * @return The magnetic signal strength.
 */
float getMagneticSignalStrength(MagneticSensor *sensor, Beacon *beacon) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
    return getSpectrumWindowIntensity(&sensor->spectrum, beacon->spectrum_window,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	6a19      	ldr	r1, [r3, #32]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3344      	adds	r3, #68	; 0x44
 8003d10:	461a      	mov	r2, r3
 8003d12:	f001 f895 	bl	8004e40 <getSpectrumWindowIntensity>
 8003d16:	eef0 7a40 	vmov.f32	s15, s0
                                      &sensor->indexer);
}
 8003d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <calculateDistanceFromBeacon>:
 * @brief Calculates the distance between the given sensor and beacon.
 * @param sensor The magnetic sensor to use.
 * @param beacon The beacon to calculate the distance to.
 * @return The calculated distance.
 */
float calculateDistanceFromBeacon(MagneticSensor *sensor, Beacon *beacon) {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
    float magnetic_signal_strength;
    float distance;

    magnetic_signal_strength = getMagneticSignalStrength(sensor, beacon);
 8003d2e:	6839      	ldr	r1, [r7, #0]
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff ffe1 	bl	8003cf8 <getMagneticSignalStrength>
 8003d36:	ed87 0a03 	vstr	s0, [r7, #12]

    distance = getMagneticSourceDistanceByIntensity(
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff fef5 	bl	8003b30 <getMagneticSourceDistanceByIntensity>
 8003d46:	ed87 0a02 	vstr	s0, [r7, #8]
        magnetic_signal_strength);

    // cbrt(beacon->magnetic_field_source.magnetic_moment_rms /
    //                 magnetic_signal_strength * 1000000);

    return distance;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	ee07 3a90 	vmov	s15, r3
}
 8003d50:	eeb0 0a67 	vmov.f32	s0, s15
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <updateSpectrum>:
/**
 * @brief Updates the spectrum of the given sensor with the provided sample.
 * @param sensor The magnetic sensor to update the spectrum of.
 * @param sample The sample to use to update the spectrum.
 */
void updateSpectrum(MagneticSensor *sensor, const float sample) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08a      	sub	sp, #40	; 0x28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	ed87 0a00 	vstr	s0, [r7]
    Spectrum *spectrum = &sensor->spectrum;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	332c      	adds	r3, #44	; 0x2c
 8003d6c:	61fb      	str	r3, [r7, #28]
    Indexer *indexer = &sensor->indexer;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3344      	adds	r3, #68	; 0x44
 8003d72:	61bb      	str	r3, [r7, #24]

    float complex phase;

    for (int i = 0; i < indexer->sample + 1; i++) {
 8003d74:	2300      	movs	r3, #0
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
 8003d78:	e05e      	b.n	8003e38 <updateSpectrum+0xdc>
        phase = phases[indexer->sample * indexer->sample_size + i];
 8003d7a:	4b6e      	ldr	r3, [pc, #440]	; (8003f34 <updateSpectrum+0x1d8>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	69b9      	ldr	r1, [r7, #24]
 8003d84:	6849      	ldr	r1, [r1, #4]
 8003d86:	fb03 f101 	mul.w	r1, r3, r1
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	440b      	add	r3, r1
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	60fa      	str	r2, [r7, #12]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	613a      	str	r2, [r7, #16]
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	edd3 6a03 	vldr	s13, [r3, #12]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	ed93 6a04 	vldr	s12, [r3, #16]

        spectrum->samples[indexer->buffer * indexer->sample_size + i] +=
            spectrum->double_per_sample_size * (sample * (phase));
 8003dae:	ed97 7a03 	vldr	s14, [r7, #12]
 8003db2:	edd7 7a00 	vldr	s15, [r7]
 8003db6:	ee67 5a27 	vmul.f32	s11, s14, s15
 8003dba:	ed97 7a02 	vldr	s14, [r7, #8]
 8003dbe:	edd7 7a00 	vldr	s15, [r7]
 8003dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc6:	eef0 1a67 	vmov.f32	s3, s15
 8003dca:	eeb0 1a65 	vmov.f32	s2, s11
 8003dce:	eef0 0a46 	vmov.f32	s1, s12
 8003dd2:	eeb0 0a66 	vmov.f32	s0, s13
 8003dd6:	f7fc faf3 	bl	80003c0 <__mulsc3>
 8003dda:	eeb0 7a40 	vmov.f32	s14, s0
 8003dde:	eef0 7a60 	vmov.f32	s15, s1
 8003de2:	eeb0 6a47 	vmov.f32	s12, s14
 8003de6:	eef0 6a67 	vmov.f32	s13, s15
        spectrum->samples[indexer->buffer * indexer->sample_size + i] +=
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	69b9      	ldr	r1, [r7, #24]
 8003df4:	6849      	ldr	r1, [r1, #4]
 8003df6:	fb03 f101 	mul.w	r1, r3, r1
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	440b      	add	r3, r1
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	ed93 7a00 	vldr	s14, [r3]
 8003e06:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	69b9      	ldr	r1, [r7, #24]
 8003e14:	6849      	ldr	r1, [r1, #4]
 8003e16:	fb03 f101 	mul.w	r1, r3, r1
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	440b      	add	r3, r1
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	ee36 7a07 	vadd.f32	s14, s12, s14
 8003e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2a:	ed83 7a00 	vstr	s14, [r3]
 8003e2e:	edc3 7a01 	vstr	s15, [r3, #4]
    for (int i = 0; i < indexer->sample + 1; i++) {
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	3301      	adds	r3, #1
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	dd9b      	ble.n	8003d7a <updateSpectrum+0x1e>
    }

    for (int i = 0; i < indexer->sample; i++) {
 8003e42:	2300      	movs	r3, #0
 8003e44:	623b      	str	r3, [r7, #32]
 8003e46:	e06a      	b.n	8003f1e <updateSpectrum+0x1c2>
        phase = phases[indexer->sample * indexer->sample_size + i];
 8003e48:	4b3a      	ldr	r3, [pc, #232]	; (8003f34 <updateSpectrum+0x1d8>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	69b9      	ldr	r1, [r7, #24]
 8003e52:	6849      	ldr	r1, [r1, #4]
 8003e54:	fb03 f101 	mul.w	r1, r3, r1
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	440b      	add	r3, r1
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4413      	add	r3, r2
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	60fa      	str	r2, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	613a      	str	r2, [r7, #16]
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	edd3 6a03 	vldr	s13, [r3, #12]
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	ed93 6a04 	vldr	s12, [r3, #16]

        spectrum->samples[indexer->buffer * indexer->sample_size + indexer->sample] +=
            spectrum->double_per_sample_size * (sensor->samples[indexer->buffer * indexer->sample_size + i] * (phase));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	69b9      	ldr	r1, [r7, #24]
 8003e86:	6849      	ldr	r1, [r1, #4]
 8003e88:	fb03 f101 	mul.w	r1, r3, r1
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	440b      	add	r3, r1
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	edd3 7a00 	vldr	s15, [r3]
 8003e98:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e9c:	ee67 5a87 	vmul.f32	s11, s15, s14
 8003ea0:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ea8:	eef0 1a67 	vmov.f32	s3, s15
 8003eac:	eeb0 1a65 	vmov.f32	s2, s11
 8003eb0:	eef0 0a46 	vmov.f32	s1, s12
 8003eb4:	eeb0 0a66 	vmov.f32	s0, s13
 8003eb8:	f7fc fa82 	bl	80003c0 <__mulsc3>
 8003ebc:	eeb0 7a40 	vmov.f32	s14, s0
 8003ec0:	eef0 7a60 	vmov.f32	s15, s1
 8003ec4:	eeb0 6a47 	vmov.f32	s12, s14
 8003ec8:	eef0 6a67 	vmov.f32	s13, s15
        spectrum->samples[indexer->buffer * indexer->sample_size + indexer->sample] +=
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	69b9      	ldr	r1, [r7, #24]
 8003ed6:	6849      	ldr	r1, [r1, #4]
 8003ed8:	fb03 f101 	mul.w	r1, r3, r1
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	440b      	add	r3, r1
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	ed93 7a00 	vldr	s14, [r3]
 8003eea:	edd3 7a01 	vldr	s15, [r3, #4]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	69b9      	ldr	r1, [r7, #24]
 8003ef8:	6849      	ldr	r1, [r1, #4]
 8003efa:	fb03 f101 	mul.w	r1, r3, r1
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	440b      	add	r3, r1
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	4413      	add	r3, r2
 8003f08:	ee36 7a07 	vadd.f32	s14, s12, s14
 8003f0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f10:	ed83 7a00 	vstr	s14, [r3]
 8003f14:	edc3 7a01 	vstr	s15, [r3, #4]
    for (int i = 0; i < indexer->sample; i++) {
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	623b      	str	r3, [r7, #32]
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	6a3a      	ldr	r2, [r7, #32]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	db8f      	blt.n	8003e48 <updateSpectrum+0xec>
    }
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	3728      	adds	r7, #40	; 0x28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	240007f4 	.word	0x240007f4

08003f38 <mockMagneticSourceIntensityFromSource>:
 * @param source The magnetic field source.
 * @param reference The reference coordinate.
 * @param timestamp The timestamp.
 * @return The intensity of the magnetic field.
 */
float mockMagneticSourceIntensityFromSource(MagneticFieldSource *source, Coordinate *reference, float timestamp) {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	ed2d 8b02 	vpush	{d8}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	ed87 0a01 	vstr	s0, [r7, #4]
    float intensity = getMagneticIntensityFromSource(source, reference);
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7ff fdb3 	bl	8003ab8 <getMagneticIntensityFromSource>
 8003f52:	ed87 0a05 	vstr	s0, [r7, #20]

    return intensity * cos(2 * M_PI * source->frequency * timestamp);
 8003f56:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f5a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f68:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8003fa0 <mockMagneticSourceIntensityFromSource+0x68>
 8003f6c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003f70:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f78:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003f7c:	eeb0 0b47 	vmov.f64	d0, d7
 8003f80:	f00c fe9e 	bl	8010cc0 <cos>
 8003f84:	eeb0 7b40 	vmov.f64	d7, d0
 8003f88:	ee28 7b07 	vmul.f64	d7, d8, d7
 8003f8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8003f90:	eeb0 0a67 	vmov.f32	s0, s15
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	ecbd 8b02 	vpop	{d8}
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	54442d18 	.word	0x54442d18
 8003fa4:	401921fb 	.word	0x401921fb

08003fa8 <mockMagneticSourceIntensityFromSourceWithErrors>:

float mockMagneticSourceIntensityFromSourceWithErrors(
    MagneticFieldSource *source, Coordinate *reference,
    MagneticSensorCharacteristic *sensor_characteristic, float timestamp) {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	ed87 0a00 	vstr	s0, [r7]
    float upper_value = sensor_characteristic->range.upper;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	61bb      	str	r3, [r7, #24]
    float intensity;

    intensity = mockMagneticSourceIntensityFromSource(source, reference, timestamp);
 8003fbe:	ed97 0a00 	vldr	s0, [r7]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7ff ffb7 	bl	8003f38 <mockMagneticSourceIntensityFromSource>
 8003fca:	ed87 0a07 	vstr	s0, [r7, #28]

    // add error to it
    intensity += unsigned_noise() * sensor_characteristic->noise_amplitude * sensor_characteristic->resolution;
 8003fce:	f000 fc7b 	bl	80048c8 <unsigned_noise>
 8003fd2:	eeb0 7a40 	vmov.f32	s14, s0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8003fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fea:	ed97 7a07 	vldr	s14, [r7, #28]
 8003fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff2:	edc7 7a07 	vstr	s15, [r7, #28]

    // check overflow
    if (intensity > upper_value) {
 8003ff6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ffa:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ffe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004006:	dd1e      	ble.n	8004046 <mockMagneticSourceIntensityFromSourceWithErrors+0x9e>
        if (sensor_characteristic->overflow_mode == 0) {
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d102      	bne.n	8004016 <mockMagneticSourceIntensityFromSourceWithErrors+0x6e>
            intensity = upper_value;
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	61fb      	str	r3, [r7, #28]
 8004014:	e017      	b.n	8004046 <mockMagneticSourceIntensityFromSourceWithErrors+0x9e>
        } else {
            float scale_factor = (intensity / upper_value);
 8004016:	edd7 6a07 	vldr	s13, [r7, #28]
 800401a:	ed97 7a06 	vldr	s14, [r7, #24]
 800401e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004022:	edc7 7a05 	vstr	s15, [r7, #20]

            intensity = (scale_factor - (int)scale_factor) * upper_value;
 8004026:	edd7 7a05 	vldr	s15, [r7, #20]
 800402a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800402e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004032:	ed97 7a05 	vldr	s14, [r7, #20]
 8004036:	ee77 7a67 	vsub.f32	s15, s14, s15
 800403a:	ed97 7a06 	vldr	s14, [r7, #24]
 800403e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004042:	edc7 7a07 	vstr	s15, [r7, #28]
        }
    }

    // correct it with resolution
    intensity = ((int)(intensity / sensor_characteristic->resolution)) * sensor_characteristic->resolution;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	ed93 7a02 	vldr	s14, [r3, #8]
 800404c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004058:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004066:	edc7 7a07 	vstr	s15, [r7, #28]

    return intensity;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	ee07 3a90 	vmov	s15, r3
}
 8004070:	eeb0 0a67 	vmov.f32	s0, s15
 8004074:	3720      	adds	r7, #32
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <mockEnvironmentMagneticField>:
 * @param timestamp The timestamp.
 * @return The total magnetic field intensity.
 */
float mockEnvironmentMagneticField(Environment *environment, Coordinate *reference,
                                   MagneticSensorCharacteristic *sensor_characteristic,
                                   float timestamp, int with_error) {
 800407a:	b580      	push	{r7, lr}
 800407c:	b08a      	sub	sp, #40	; 0x28
 800407e:	af00      	add	r7, sp, #0
 8004080:	6178      	str	r0, [r7, #20]
 8004082:	6139      	str	r1, [r7, #16]
 8004084:	60fa      	str	r2, [r7, #12]
 8004086:	ed87 0a02 	vstr	s0, [r7, #8]
 800408a:	607b      	str	r3, [r7, #4]
    float environment_magnetic_field_intensity = 0;
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	627b      	str	r3, [r7, #36]	; 0x24

    Beacon *beacons = environment->beacons;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	61bb      	str	r3, [r7, #24]

    if (with_error == 0) {
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d121      	bne.n	80040e2 <mockEnvironmentMagneticField+0x68>
        for (int beacon_index = 0; beacon_index < environment->amount_of_beacons; beacon_index++) {
 800409e:	2300      	movs	r3, #0
 80040a0:	623b      	str	r3, [r7, #32]
 80040a2:	e018      	b.n	80040d6 <mockEnvironmentMagneticField+0x5c>
            environment_magnetic_field_intensity += mockMagneticSourceIntensityFromSource(
                &beacons[beacon_index].magnetic_field_source, reference, timestamp);
 80040a4:	6a3a      	ldr	r2, [r7, #32]
 80040a6:	4613      	mov	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	461a      	mov	r2, r3
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	4413      	add	r3, r2
            environment_magnetic_field_intensity += mockMagneticSourceIntensityFromSource(
 80040b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80040b8:	6939      	ldr	r1, [r7, #16]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff ff3c 	bl	8003f38 <mockMagneticSourceIntensityFromSource>
 80040c0:	eeb0 7a40 	vmov.f32	s14, s0
 80040c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80040c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        for (int beacon_index = 0; beacon_index < environment->amount_of_beacons; beacon_index++) {
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	3301      	adds	r3, #1
 80040d4:	623b      	str	r3, [r7, #32]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	6a3a      	ldr	r2, [r7, #32]
 80040dc:	429a      	cmp	r2, r3
 80040de:	dbe1      	blt.n	80040a4 <mockEnvironmentMagneticField+0x2a>
 80040e0:	e021      	b.n	8004126 <mockEnvironmentMagneticField+0xac>
        }
    } else {
        for (int beacon_index = 0; beacon_index < environment->amount_of_beacons; beacon_index++) {
 80040e2:	2300      	movs	r3, #0
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	e019      	b.n	800411c <mockEnvironmentMagneticField+0xa2>
            environment_magnetic_field_intensity += mockMagneticSourceIntensityFromSourceWithErrors(
                &beacons[beacon_index].magnetic_field_source, reference, sensor_characteristic, timestamp);
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	461a      	mov	r2, r3
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	4413      	add	r3, r2
            environment_magnetic_field_intensity += mockMagneticSourceIntensityFromSourceWithErrors(
 80040f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	6939      	ldr	r1, [r7, #16]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ff51 	bl	8003fa8 <mockMagneticSourceIntensityFromSourceWithErrors>
 8004106:	eeb0 7a40 	vmov.f32	s14, s0
 800410a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800410e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004112:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        for (int beacon_index = 0; beacon_index < environment->amount_of_beacons; beacon_index++) {
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	3301      	adds	r3, #1
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	429a      	cmp	r2, r3
 8004124:	dbe0      	blt.n	80040e8 <mockEnvironmentMagneticField+0x6e>
        }
    }

    return environment_magnetic_field_intensity;
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	ee07 3a90 	vmov	s15, r3
}
 800412c:	eeb0 0a67 	vmov.f32	s0, s15
 8004130:	3728      	adds	r7, #40	; 0x28
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <mockBeaconSurveyRun>:

void mockBeaconSurveyRun(
    Device *device,
    Environment *environment,
    Environment *mocked_environment,
    int sample_rate, int sample_size, int with_errors) {
 8004136:	b580      	push	{r7, lr}
 8004138:	b08c      	sub	sp, #48	; 0x30
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	603b      	str	r3, [r7, #0]
    MagneticSensor *sensor;

    const int amount_of_magnetic_sensors = device->amount_of_magnetic_sensors;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	623b      	str	r3, [r7, #32]
    double environment_magnetic_field_intensity;

    float delta_time = 1.0 / sample_rate;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	ee07 3a90 	vmov	s15, r3
 8004150:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004154:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8004158:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800415c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004160:	edc7 7a07 	vstr	s15, [r7, #28]
    float timestamp = 0.0;
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c

    for (int index = 0; index < 1 * sample_size; index++) {
 800416a:	2300      	movs	r3, #0
 800416c:	62bb      	str	r3, [r7, #40]	; 0x28
 800416e:	e038      	b.n	80041e2 <mockBeaconSurveyRun+0xac>
        for (int sensor_index = 0; sensor_index < amount_of_magnetic_sensors; sensor_index++) {
 8004170:	2300      	movs	r3, #0
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
 8004174:	e026      	b.n	80041c4 <mockBeaconSurveyRun+0x8e>
            sensor = &device->magnetic_sensors[sensor_index];
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800417a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417c:	4613      	mov	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	440b      	add	r3, r1
 8004186:	61bb      	str	r3, [r7, #24]

            environment_magnetic_field_intensity =
                mockEnvironmentMagneticField(mocked_environment, &sensor->device_position,
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	f103 0108 	add.w	r1, r3, #8
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8004194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004196:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff ff6d 	bl	800407a <mockEnvironmentMagneticField>
 80041a0:	eef0 7a40 	vmov.f32	s15, s0
            environment_magnetic_field_intensity =
 80041a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80041a8:	ed87 7b04 	vstr	d7, [r7, #16]
                                             &sensor->characteristic, timestamp, with_errors);

            addSampleMagneticSignal(sensor, environment_magnetic_field_intensity);
 80041ac:	ed97 7b04 	vldr	d7, [r7, #16]
 80041b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80041b4:	eeb0 0a67 	vmov.f32	s0, s15
 80041b8:	69b8      	ldr	r0, [r7, #24]
 80041ba:	f7ff fd77 	bl	8003cac <addSampleMagneticSignal>
        for (int sensor_index = 0; sensor_index < amount_of_magnetic_sensors; sensor_index++) {
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	3301      	adds	r3, #1
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
 80041c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	dbd4      	blt.n	8004176 <mockBeaconSurveyRun+0x40>
        }

        timestamp += delta_time;
 80041cc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80041d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80041d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int index = 0; index < 1 * sample_size; index++) {
 80041dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041de:	3301      	adds	r3, #1
 80041e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e6:	429a      	cmp	r2, r3
 80041e8:	dbc2      	blt.n	8004170 <mockBeaconSurveyRun+0x3a>
    }
}
 80041ea:	bf00      	nop
 80041ec:	bf00      	nop
 80041ee:	3730      	adds	r7, #48	; 0x30
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <mockMagneticFieldSampleRun>:

void mockMagneticFieldSampleRun(
    Device *device, Vector device_velocity, float heading,
    Coordinate *final_device_position, Vector *device_position_offset,
    Environment *environment, int sample_rate, int sample_size, int with_error) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b094      	sub	sp, #80	; 0x50
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	61f8      	str	r0, [r7, #28]
 80041fc:	eef0 6a40 	vmov.f32	s13, s0
 8004200:	eeb0 7a60 	vmov.f32	s14, s1
 8004204:	eef0 7a41 	vmov.f32	s15, s2
 8004208:	edc7 1a03 	vstr	s3, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	edc7 6a04 	vstr	s13, [r7, #16]
 8004216:	ed87 7a05 	vstr	s14, [r7, #20]
 800421a:	edc7 7a06 	vstr	s15, [r7, #24]
    MagneticSensor *sensor;
    Coordinate mocked_sensor_position = {0};
 800421e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	605a      	str	r2, [r3, #4]
 8004228:	609a      	str	r2, [r3, #8]

    const int amount_of_magnetic_sensors = device->amount_of_magnetic_sensors;
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	643b      	str	r3, [r7, #64]	; 0x40
    double environment_magnetic_field_intensity;

    float delta_time = 1.0 / sample_rate;
 8004230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800423a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800423e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004242:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004246:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    float timestamp = 0.0;
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	64fb      	str	r3, [r7, #76]	; 0x4c

    // Start sampling environment magnetic field
    for (int index = 0; index < 1 * sample_size; index++) {
 8004250:	2300      	movs	r3, #0
 8004252:	64bb      	str	r3, [r7, #72]	; 0x48
 8004254:	e07a      	b.n	800434c <mockMagneticFieldSampleRun+0x158>
        // update mocked device offset from its original position
        device_position_offset->x += device_velocity.x * delta_time;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	ed93 7a00 	vldr	s14, [r3]
 800425c:	edd7 6a04 	vldr	s13, [r7, #16]
 8004260:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	edc3 7a00 	vstr	s15, [r3]
        device_position_offset->y += device_velocity.y * delta_time;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	ed93 7a01 	vldr	s14, [r3, #4]
 8004278:	edd7 6a05 	vldr	s13, [r7, #20]
 800427c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	edc3 7a01 	vstr	s15, [r3, #4]
        device_position_offset->z += device_velocity.z * delta_time;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	ed93 7a02 	vldr	s14, [r3, #8]
 8004294:	edd7 6a06 	vldr	s13, [r7, #24]
 8004298:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800429c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	edc3 7a02 	vstr	s15, [r3, #8]

        for (int sensor_index = 0; sensor_index < amount_of_magnetic_sensors; sensor_index++) {
 80042aa:	2300      	movs	r3, #0
 80042ac:	647b      	str	r3, [r7, #68]	; 0x44
 80042ae:	e03e      	b.n	800432e <mockMagneticFieldSampleRun+0x13a>
            sensor = &device->magnetic_sensors[sensor_index];
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80042b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042b6:	4613      	mov	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	1a9b      	subs	r3, r3, r2
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	440b      	add	r3, r1
 80042c0:	63bb      	str	r3, [r7, #56]	; 0x38

            mocked_sensor_position = sensor->device_position;
 80042c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042c8:	3208      	adds	r2, #8
 80042ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80042cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

            rotate2d(&sensor->device_position, heading, &mocked_sensor_position);
 80042d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d2:	3308      	adds	r3, #8
 80042d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80042d8:	4611      	mov	r1, r2
 80042da:	ed97 0a03 	vldr	s0, [r7, #12]
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fbde 	bl	8004aa0 <rotate2d>

            translate(&mocked_sensor_position, device_position_offset,
 80042e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80042e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fba6 	bl	8004a40 <translate>
                      &mocked_sensor_position);

            environment_magnetic_field_intensity =
                mockEnvironmentMagneticField(
 80042f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f6:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80042fa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80042fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004300:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8004304:	6838      	ldr	r0, [r7, #0]
 8004306:	f7ff feb8 	bl	800407a <mockEnvironmentMagneticField>
 800430a:	eef0 7a40 	vmov.f32	s15, s0
            environment_magnetic_field_intensity =
 800430e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004312:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
                    environment,
                    &mocked_sensor_position,
                    &sensor->characteristic,
                    timestamp, with_error);

            addSampleMagneticSignal(sensor, environment_magnetic_field_intensity);
 8004316:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800431a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800431e:	eeb0 0a67 	vmov.f32	s0, s15
 8004322:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004324:	f7ff fcc2 	bl	8003cac <addSampleMagneticSignal>
        for (int sensor_index = 0; sensor_index < amount_of_magnetic_sensors; sensor_index++) {
 8004328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800432a:	3301      	adds	r3, #1
 800432c:	647b      	str	r3, [r7, #68]	; 0x44
 800432e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004332:	429a      	cmp	r2, r3
 8004334:	dbbc      	blt.n	80042b0 <mockMagneticFieldSampleRun+0xbc>
        }

        timestamp += delta_time;
 8004336:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800433a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800433e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004342:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    for (int index = 0; index < 1 * sample_size; index++) {
 8004346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004348:	3301      	adds	r3, #1
 800434a:	64bb      	str	r3, [r7, #72]	; 0x48
 800434c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800434e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004350:	429a      	cmp	r2, r3
 8004352:	db80      	blt.n	8004256 <mockMagneticFieldSampleRun+0x62>
    }

    // update mocked device final position
    final_device_position->x = device_position_offset->x;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	601a      	str	r2, [r3, #0]
    final_device_position->y = device_position_offset->y;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	605a      	str	r2, [r3, #4]
    final_device_position->z = device_position_offset->z;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	609a      	str	r2, [r3, #8]
}
 800436c:	bf00      	nop
 800436e:	3750      	adds	r7, #80	; 0x50
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <estimateMagneticSensorPosition>:
 * @brief Estimates the position of the magnetic sensor on the device based on the detected magnetic fields.
 *
 * @param device Pointer to the device.
 * @param environment Pointer to the environment.
 */
void estimateMagneticSensorPosition(Device *device, Environment *environment) {
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
    const int amount_of_magnetic_sensors = device->amount_of_magnetic_sensors;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	61bb      	str	r3, [r7, #24]
    const int amount_of_beacons = environment->amount_of_beacons;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	617b      	str	r3, [r7, #20]

    MagneticSensor *sensor;

    // Allocate memory for the segments matrix
    Segment *segments_matrix = (Segment *)malloc(sizeof(Segment) *
                                                 amount_of_magnetic_sensors *
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	fb02 f303 	mul.w	r3, r2, r3
    Segment *segments_matrix = (Segment *)malloc(sizeof(Segment) *
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	4618      	mov	r0, r3
 8004396:	f009 fdcd 	bl	800df34 <malloc>
 800439a:	4603      	mov	r3, r0
 800439c:	613b      	str	r3, [r7, #16]
                                                 amount_of_beacons);

    // Populate the segments matrix with the segments between the sensors and the beacons
    buildSegmentsMatrix(device, environment, segments_matrix, SENSOR);
 800439e:	2301      	movs	r3, #1
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	6839      	ldr	r1, [r7, #0]
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f86d 	bl	8004484 <buildSegmentsMatrix>
    // Estimate the positions of the magnetic sensors based on the segments matrix
    estimateMagneticSensorsPositions(device, environment, segments_matrix);
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	6839      	ldr	r1, [r7, #0]
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f8c9 	bl	8004546 <estimateMagneticSensorsPositions>

    // Loop through all magnetic sensors and clear their past spectrum and indexer
    for (int i = 0; i < device->amount_of_magnetic_sensors; i++) {
 80043b4:	2300      	movs	r3, #0
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	e014      	b.n	80043e4 <estimateMagneticSensorPosition+0x70>
        sensor = &device->magnetic_sensors[i];
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	4613      	mov	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	440b      	add	r3, r1
 80043ca:	60fb      	str	r3, [r7, #12]

        // Clear the spectrum and indexer for the sensor
        clearPastSpectrum(&sensor->spectrum, &sensor->indexer);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3344      	adds	r3, #68	; 0x44
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f000 fd63 	bl	8004ea4 <clearPastSpectrum>
    for (int i = 0; i < device->amount_of_magnetic_sensors; i++) {
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3301      	adds	r3, #1
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	dbe5      	blt.n	80043ba <estimateMagneticSensorPosition+0x46>
    }

    // Free the segments matrix
    free(segments_matrix);
 80043ee:	6938      	ldr	r0, [r7, #16]
 80043f0:	f009 fda8 	bl	800df44 <free>
}
 80043f4:	bf00      	nop
 80043f6:	3720      	adds	r7, #32
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <estimateMagneticBeaconSourcePosition>:
 * @param device Pointer to the device.
 * @param environment Pointer to the environment.
 *
 * Note: This function assumes that the magnetic sensor positions have already been estimated using estimateMagneticSensorPosition().
 */
void estimateMagneticBeaconSourcePosition(Device *device, Environment *environment) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
    const int amount_of_magnetic_sensors = device->amount_of_magnetic_sensors;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	61bb      	str	r3, [r7, #24]
    const int amount_of_beacons = environment->amount_of_beacons;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	617b      	str	r3, [r7, #20]

    MagneticSensor *sensor;

    // Allocate memory for the segments matrix
    Segment *segments_matrix = (Segment *)malloc(sizeof(Segment) *
                                                 amount_of_magnetic_sensors *
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	fb02 f303 	mul.w	r3, r2, r3
    Segment *segments_matrix = (Segment *)malloc(sizeof(Segment) *
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	4618      	mov	r0, r3
 800441e:	f009 fd89 	bl	800df34 <malloc>
 8004422:	4603      	mov	r3, r0
 8004424:	613b      	str	r3, [r7, #16]
                                                 amount_of_beacons);

    // Build the segments matrix for the magnetic sensors and beacon sources
    buildSegmentsMatrix(device, environment, segments_matrix, BEACON);
 8004426:	2300      	movs	r3, #0
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	6839      	ldr	r1, [r7, #0]
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f829 	bl	8004484 <buildSegmentsMatrix>

    // Estimate the positions of the beacon sources based on the segments matrix
    estimateBeaconsPositions(device, environment, segments_matrix);
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	6839      	ldr	r1, [r7, #0]
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f8d6 	bl	80045e8 <estimateBeaconsPositions>

    // Clear the past spectrum and indexer for each magnetic sensor
    for (int i = 0; i < device->amount_of_magnetic_sensors; i++) {
 800443c:	2300      	movs	r3, #0
 800443e:	61fb      	str	r3, [r7, #28]
 8004440:	e014      	b.n	800446c <estimateMagneticBeaconSourcePosition+0x70>
        sensor = &device->magnetic_sensors[i];
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004446:	69fa      	ldr	r2, [r7, #28]
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	440b      	add	r3, r1
 8004452:	60fb      	str	r3, [r7, #12]

        // Clear the spectrum and indexer for the sensor
        clearPastSpectrum(&sensor->spectrum, &sensor->indexer);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3344      	adds	r3, #68	; 0x44
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f000 fd1f 	bl	8004ea4 <clearPastSpectrum>
    for (int i = 0; i < device->amount_of_magnetic_sensors; i++) {
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3301      	adds	r3, #1
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	429a      	cmp	r2, r3
 8004474:	dbe5      	blt.n	8004442 <estimateMagneticBeaconSourcePosition+0x46>
    }

    // Free the segments matrix memory
    free(segments_matrix);
 8004476:	6938      	ldr	r0, [r7, #16]
 8004478:	f009 fd64 	bl	800df44 <free>
}
 800447c:	bf00      	nop
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <buildSegmentsMatrix>:
 * @param environment Pointer to the environment.
 * @param segments_matrix Pointer to the segments matrix to be filled.
 * @param reference An integer to indicate whether the reference should be the beacon or the sensor.
 */
void buildSegmentsMatrix(Device *device, Environment *environment,
                         Segment *segments_matrix, int reference) {
 8004484:	b590      	push	{r4, r7, lr}
 8004486:	b08d      	sub	sp, #52	; 0x34
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
    const int amount_of_magnetic_sensors = device->amount_of_magnetic_sensors;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
    const int amount_of_beacons = environment->amount_of_beacons;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	623b      	str	r3, [r7, #32]
    Segment *current_segment;
    Beacon *current_beacon;
    MagneticSensor *current_sensor;

    // Loop through each magnetic sensor
    for (int sensor_index = 0; sensor_index < amount_of_magnetic_sensors; sensor_index++) {
 800449e:	2300      	movs	r3, #0
 80044a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a2:	e047      	b.n	8004534 <buildSegmentsMatrix+0xb0>
        current_sensor = &device->magnetic_sensors[sensor_index];
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80044a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044aa:	4613      	mov	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	440b      	add	r3, r1
 80044b4:	61fb      	str	r3, [r7, #28]

        // Loop through each beacon
        for (int beacon_index = 0; beacon_index < amount_of_beacons; beacon_index++) {
 80044b6:	2300      	movs	r3, #0
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ba:	e034      	b.n	8004526 <buildSegmentsMatrix+0xa2>
            int indexer = sensor_index * amount_of_beacons + beacon_index;
 80044bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044be:	6a3a      	ldr	r2, [r7, #32]
 80044c0:	fb02 f303 	mul.w	r3, r2, r3
 80044c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c6:	4413      	add	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]

            current_beacon = &environment->beacons[beacon_index];
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	6899      	ldr	r1, [r3, #8]
 80044ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044d0:	4613      	mov	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	1a9b      	subs	r3, r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	440b      	add	r3, r1
 80044da:	617b      	str	r3, [r7, #20]

            current_segment = &segments_matrix[indexer];
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	4413      	add	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]

            // Calculate the distance between the current sensor and current beacon,
            // and store it in the current segment
            current_segment->magnitude = calculateDistanceFromBeacon(current_sensor, current_beacon);
 80044e6:	6979      	ldr	r1, [r7, #20]
 80044e8:	69f8      	ldr	r0, [r7, #28]
 80044ea:	f7ff fc1b 	bl	8003d24 <calculateDistanceFromBeacon>
 80044ee:	eef0 7a40 	vmov.f32	s15, s0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	edc3 7a03 	vstr	s15, [r3, #12]

            // Set the reference point for the current segment
            current_segment->reference =
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d108      	bne.n	8004510 <buildSegmentsMatrix+0x8c>
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	4614      	mov	r4, r2
 8004504:	3308      	adds	r3, #8
 8004506:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800450a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800450e:	e007      	b.n	8004520 <buildSegmentsMatrix+0x9c>
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	4614      	mov	r4, r2
 8004516:	3308      	adds	r3, #8
 8004518:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800451c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        for (int beacon_index = 0; beacon_index < amount_of_beacons; beacon_index++) {
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	3301      	adds	r3, #1
 8004524:	62bb      	str	r3, [r7, #40]	; 0x28
 8004526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	429a      	cmp	r2, r3
 800452c:	dbc6      	blt.n	80044bc <buildSegmentsMatrix+0x38>
    for (int sensor_index = 0; sensor_index < amount_of_magnetic_sensors; sensor_index++) {
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	3301      	adds	r3, #1
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	429a      	cmp	r2, r3
 800453a:	dbb3      	blt.n	80044a4 <buildSegmentsMatrix+0x20>
                reference == BEACON ? current_sensor->device_position
                                    : current_beacon->magnetic_field_source.position;
        }
    }
}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	3734      	adds	r7, #52	; 0x34
 8004542:	46bd      	mov	sp, r7
 8004544:	bd90      	pop	{r4, r7, pc}

08004546 <estimateMagneticSensorsPositions>:
 * @param[in] device Pointer to the device containing magnetic sensors to be located
 * @param[in] environment Pointer to the environment containing beacons used for locating magnetic sensors
 * @param[in] segments_matrix Pointer to a matrix of magnetic sensor distances to the beacons
 */
void estimateMagneticSensorsPositions(Device *device, Environment *environment,
                                      Segment *segments_matrix) {
 8004546:	b590      	push	{r4, r7, lr}
 8004548:	b08d      	sub	sp, #52	; 0x34
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
    const int amount_of_magnetic_sensor = device->amount_of_magnetic_sensors;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
    const int amount_of_beacons = environment->amount_of_beacons;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	623b      	str	r3, [r7, #32]

    Segment *references;

    // Allocate memory for the references array
    references = (Segment *)malloc(sizeof(Segment) * amount_of_beacons);
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	4618      	mov	r0, r3
 8004564:	f009 fce6 	bl	800df34 <malloc>
 8004568:	4603      	mov	r3, r0
 800456a:	61fb      	str	r3, [r7, #28]

    // Loop through each magnetic sensor
    for (int sensor_index = 0; sensor_index < amount_of_magnetic_sensor; sensor_index++) {
 800456c:	2300      	movs	r3, #0
 800456e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004570:	e02f      	b.n	80045d2 <estimateMagneticSensorsPositions+0x8c>
        // Loop through each beacon
        for (int beacon_index = 0; beacon_index < amount_of_beacons; beacon_index++) {
 8004572:	2300      	movs	r3, #0
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28
 8004576:	e016      	b.n	80045a6 <estimateMagneticSensorsPositions+0x60>
            int indexer = sensor_index * amount_of_beacons + beacon_index;
 8004578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457a:	6a3a      	ldr	r2, [r7, #32]
 800457c:	fb02 f303 	mul.w	r3, r2, r3
 8004580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004582:	4413      	add	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

            // Copy the segment for the current sensor and beacon pair to the references array
            references[beacon_index] = segments_matrix[indexer];
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	18d1      	adds	r1, r2, r3
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	4413      	add	r3, r2
 8004596:	461c      	mov	r4, r3
 8004598:	460b      	mov	r3, r1
 800459a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800459c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int beacon_index = 0; beacon_index < amount_of_beacons; beacon_index++) {
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	3301      	adds	r3, #1
 80045a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	dbe4      	blt.n	8004578 <estimateMagneticSensorsPositions+0x32>
        }

        // Get a pointer to the current sensor's position
        Coordinate *sensor_position = &device->magnetic_sensors[sensor_index].local_position;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	440b      	add	r3, r1
 80045be:	3314      	adds	r3, #20
 80045c0:	61bb      	str	r3, [r7, #24]

        // Calculate the position of the current sensor using trilateration
        calculatePositionByTrilateration(references, sensor_position, amount_of_beacons);
 80045c2:	6a3a      	ldr	r2, [r7, #32]
 80045c4:	69b9      	ldr	r1, [r7, #24]
 80045c6:	69f8      	ldr	r0, [r7, #28]
 80045c8:	f000 f85f 	bl	800468a <calculatePositionByTrilateration>
    for (int sensor_index = 0; sensor_index < amount_of_magnetic_sensor; sensor_index++) {
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	3301      	adds	r3, #1
 80045d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	429a      	cmp	r2, r3
 80045d8:	dbcb      	blt.n	8004572 <estimateMagneticSensorsPositions+0x2c>
    }

    // Free the references array
    free(references);
 80045da:	69f8      	ldr	r0, [r7, #28]
 80045dc:	f009 fcb2 	bl	800df44 <free>
}
 80045e0:	bf00      	nop
 80045e2:	3734      	adds	r7, #52	; 0x34
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd90      	pop	{r4, r7, pc}

080045e8 <estimateBeaconsPositions>:
 * @param[in] device Pointer to the device containing magnetic sensors used for locating beacons
 * @param[in] environment Pointer to the environment containing beacons to be located
 * @param[in] segments_matrix Pointer to a matrix of magnetic sensor distances to the beacons
 */
void estimateBeaconsPositions(Device *device, Environment *environment,
                              Segment *segments_matrix) {
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b08d      	sub	sp, #52	; 0x34
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
    const int amount_of_magnetic_sensor = device->amount_of_magnetic_sensors;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
    const int amount_of_beacons = environment->amount_of_beacons;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	623b      	str	r3, [r7, #32]

    Segment *references;

    // Allocate memory for the references matrix
    references = (Segment *)malloc(sizeof(Segment) * amount_of_magnetic_sensor);
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	4618      	mov	r0, r3
 8004606:	f009 fc95 	bl	800df34 <malloc>
 800460a:	4603      	mov	r3, r0
 800460c:	61fb      	str	r3, [r7, #28]

    // For each beacon in the environment
    for (int beacon_index = 0; beacon_index < amount_of_beacons; beacon_index++) {
 800460e:	2300      	movs	r3, #0
 8004610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004612:	e02f      	b.n	8004674 <estimateBeaconsPositions+0x8c>
        // For each magnetic sensor in the device
        for (int sensor_index = 0; sensor_index < amount_of_magnetic_sensor; sensor_index++) {
 8004614:	2300      	movs	r3, #0
 8004616:	62bb      	str	r3, [r7, #40]	; 0x28
 8004618:	e016      	b.n	8004648 <estimateBeaconsPositions+0x60>
            // Calculate the index of the segment in the matrix
            int indexer = sensor_index * amount_of_beacons + beacon_index;
 800461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461c:	6a3a      	ldr	r2, [r7, #32]
 800461e:	fb02 f303 	mul.w	r3, r2, r3
 8004622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004624:	4413      	add	r3, r2
 8004626:	617b      	str	r3, [r7, #20]

            // Copy the segment to the references matrix
            references[sensor_index] = segments_matrix[indexer];
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	18d1      	adds	r1, r2, r3
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	4413      	add	r3, r2
 8004638:	461c      	mov	r4, r3
 800463a:	460b      	mov	r3, r1
 800463c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800463e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int sensor_index = 0; sensor_index < amount_of_magnetic_sensor; sensor_index++) {
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	3301      	adds	r3, #1
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28
 8004648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	429a      	cmp	r2, r3
 800464e:	dbe4      	blt.n	800461a <estimateBeaconsPositions+0x32>
        }

        // Get a pointer to the position of the magnetic field source of the beacon
        Coordinate *source_position = &environment->beacons[beacon_index].magnetic_field_source.position;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	6899      	ldr	r1, [r3, #8]
 8004654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004656:	4613      	mov	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	440b      	add	r3, r1
 8004660:	3308      	adds	r3, #8
 8004662:	61bb      	str	r3, [r7, #24]

        // Estimate the position of the magnetic field source using trilateration
        calculatePositionByTrilateration(references, source_position, amount_of_magnetic_sensor);
 8004664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004666:	69b9      	ldr	r1, [r7, #24]
 8004668:	69f8      	ldr	r0, [r7, #28]
 800466a:	f000 f80e 	bl	800468a <calculatePositionByTrilateration>
    for (int beacon_index = 0; beacon_index < amount_of_beacons; beacon_index++) {
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	3301      	adds	r3, #1
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	429a      	cmp	r2, r3
 800467a:	dbcb      	blt.n	8004614 <estimateBeaconsPositions+0x2c>
    }

    // Free the references matrix
    free(references);
 800467c:	69f8      	ldr	r0, [r7, #28]
 800467e:	f009 fc61 	bl	800df44 <free>
}
 8004682:	bf00      	nop
 8004684:	3734      	adds	r7, #52	; 0x34
 8004686:	46bd      	mov	sp, r7
 8004688:	bd90      	pop	{r4, r7, pc}

0800468a <calculatePositionByTrilateration>:
 * @param[out] position Pointer to the calculated position
 * @param[in] available_references Number of available reference points (should be >= 3)
 */
void calculatePositionByTrilateration(Segment *segments,
                                      Coordinate *position,
                                      int available_references) {
 800468a:	b480      	push	{r7}
 800468c:	b08b      	sub	sp, #44	; 0x2c
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
    // Check if at least three references are available for trilateration
    if (available_references >= 3) {
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b02      	cmp	r3, #2
 800469a:	f340 810e 	ble.w	80048ba <calculatePositionByTrilateration+0x230>
        float D;
        float E;
        float F;

        // Set up equations to be solved using matrix algebra
        A = 2 * segments[1].reference.x - 2 * segments[0].reference.x;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3310      	adds	r3, #16
 80046a2:	edd3 7a00 	vldr	s15, [r3]
 80046a6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	edd3 7a00 	vldr	s15, [r3]
 80046b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80046b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        B = 2 * segments[1].reference.y - 2 * segments[0].reference.y;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3310      	adds	r3, #16
 80046c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80046c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80046ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80046d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046d6:	edc7 7a08 	vstr	s15, [r7, #32]

        C = segments[0].magnitude * segments[0].magnitude - segments[1].magnitude * segments[1].magnitude -
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	ed93 7a03 	vldr	s14, [r3, #12]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80046e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3310      	adds	r3, #16
 80046ee:	edd3 6a03 	vldr	s13, [r3, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	3310      	adds	r3, #16
 80046f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80046fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046fe:	ee37 7a67 	vsub.f32	s14, s14, s15
            segments[0].reference.x * segments[0].reference.x + segments[1].reference.x * segments[1].reference.x -
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	edd3 6a00 	vldr	s13, [r3]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	edd3 7a00 	vldr	s15, [r3]
 800470e:	ee66 7aa7 	vmul.f32	s15, s13, s15
        C = segments[0].magnitude * segments[0].magnitude - segments[1].magnitude * segments[1].magnitude -
 8004712:	ee37 7a67 	vsub.f32	s14, s14, s15
            segments[0].reference.x * segments[0].reference.x + segments[1].reference.x * segments[1].reference.x -
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3310      	adds	r3, #16
 800471a:	edd3 6a00 	vldr	s13, [r3]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3310      	adds	r3, #16
 8004722:	edd3 7a00 	vldr	s15, [r3]
 8004726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800472a:	ee37 7a27 	vadd.f32	s14, s14, s15
            segments[0].reference.y * segments[0].reference.y + segments[1].reference.y * segments[1].reference.y;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	edd3 6a01 	vldr	s13, [r3, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	edd3 7a01 	vldr	s15, [r3, #4]
 800473a:	ee66 7aa7 	vmul.f32	s15, s13, s15
            segments[0].reference.x * segments[0].reference.x + segments[1].reference.x * segments[1].reference.x -
 800473e:	ee37 7a67 	vsub.f32	s14, s14, s15
            segments[0].reference.y * segments[0].reference.y + segments[1].reference.y * segments[1].reference.y;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3310      	adds	r3, #16
 8004746:	edd3 6a01 	vldr	s13, [r3, #4]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3310      	adds	r3, #16
 800474e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004752:	ee66 7aa7 	vmul.f32	s15, s13, s15
        C = segments[0].magnitude * segments[0].magnitude - segments[1].magnitude * segments[1].magnitude -
 8004756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800475a:	edc7 7a07 	vstr	s15, [r7, #28]

        D = 2 * segments[2].reference.x - 2 * segments[1].reference.x;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3320      	adds	r3, #32
 8004762:	edd3 7a00 	vldr	s15, [r3]
 8004766:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3310      	adds	r3, #16
 800476e:	edd3 7a00 	vldr	s15, [r3]
 8004772:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800477a:	edc7 7a06 	vstr	s15, [r7, #24]
        E = 2 * segments[2].reference.y - 2 * segments[1].reference.y;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3320      	adds	r3, #32
 8004782:	edd3 7a01 	vldr	s15, [r3, #4]
 8004786:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3310      	adds	r3, #16
 800478e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004792:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800479a:	edc7 7a05 	vstr	s15, [r7, #20]

        F = segments[1].magnitude * segments[1].magnitude - segments[2].magnitude * segments[2].magnitude -
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3310      	adds	r3, #16
 80047a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3310      	adds	r3, #16
 80047aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80047ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3320      	adds	r3, #32
 80047b6:	edd3 6a03 	vldr	s13, [r3, #12]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3320      	adds	r3, #32
 80047be:	edd3 7a03 	vldr	s15, [r3, #12]
 80047c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047c6:	ee37 7a67 	vsub.f32	s14, s14, s15
            segments[1].reference.x * segments[1].reference.x + segments[2].reference.x * segments[2].reference.x -
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3310      	adds	r3, #16
 80047ce:	edd3 6a00 	vldr	s13, [r3]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3310      	adds	r3, #16
 80047d6:	edd3 7a00 	vldr	s15, [r3]
 80047da:	ee66 7aa7 	vmul.f32	s15, s13, s15
        F = segments[1].magnitude * segments[1].magnitude - segments[2].magnitude * segments[2].magnitude -
 80047de:	ee37 7a67 	vsub.f32	s14, s14, s15
            segments[1].reference.x * segments[1].reference.x + segments[2].reference.x * segments[2].reference.x -
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3320      	adds	r3, #32
 80047e6:	edd3 6a00 	vldr	s13, [r3]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3320      	adds	r3, #32
 80047ee:	edd3 7a00 	vldr	s15, [r3]
 80047f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047f6:	ee37 7a27 	vadd.f32	s14, s14, s15
            segments[1].reference.y * segments[1].reference.y + segments[2].reference.y * segments[2].reference.y;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3310      	adds	r3, #16
 80047fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3310      	adds	r3, #16
 8004806:	edd3 7a01 	vldr	s15, [r3, #4]
 800480a:	ee66 7aa7 	vmul.f32	s15, s13, s15
            segments[1].reference.x * segments[1].reference.x + segments[2].reference.x * segments[2].reference.x -
 800480e:	ee37 7a67 	vsub.f32	s14, s14, s15
            segments[1].reference.y * segments[1].reference.y + segments[2].reference.y * segments[2].reference.y;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3320      	adds	r3, #32
 8004816:	edd3 6a01 	vldr	s13, [r3, #4]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3320      	adds	r3, #32
 800481e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004822:	ee66 7aa7 	vmul.f32	s15, s13, s15
        F = segments[1].magnitude * segments[1].magnitude - segments[2].magnitude * segments[2].magnitude -
 8004826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800482a:	edc7 7a04 	vstr	s15, [r7, #16]

        // Solve matrix equations to calculate x and y coordinates
        position->x = (C * E - F * B) / (E * A - B * D);
 800482e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004832:	edd7 7a05 	vldr	s15, [r7, #20]
 8004836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800483a:	edd7 6a04 	vldr	s13, [r7, #16]
 800483e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004842:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004846:	ee77 6a67 	vsub.f32	s13, s14, s15
 800484a:	ed97 7a05 	vldr	s14, [r7, #20]
 800484e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004852:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004856:	ed97 6a08 	vldr	s12, [r7, #32]
 800485a:	edd7 7a06 	vldr	s15, [r7, #24]
 800485e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004862:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	edc3 7a00 	vstr	s15, [r3]
        position->y = (C * D - A * F) / (B * D - A * E);
 8004870:	ed97 7a07 	vldr	s14, [r7, #28]
 8004874:	edd7 7a06 	vldr	s15, [r7, #24]
 8004878:	ee27 7a27 	vmul.f32	s14, s14, s15
 800487c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004880:	edd7 7a04 	vldr	s15, [r7, #16]
 8004884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004888:	ee77 6a67 	vsub.f32	s13, s14, s15
 800488c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004890:	edd7 7a06 	vldr	s15, [r7, #24]
 8004894:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004898:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800489c:	edd7 7a05 	vldr	s15, [r7, #20]
 80048a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80048a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	edc3 7a01 	vstr	s15, [r3, #4]
        position->z = 0;  // Assume z-coordinate is 0 for now
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	609a      	str	r2, [r3, #8]
    }
}
 80048ba:	bf00      	nop
 80048bc:	372c      	adds	r7, #44	; 0x2c
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <unsigned_noise>:

float noise() {
    return ((float)rand() / RAND_MAX) * 2 - 1;
}

float unsigned_noise() {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
    return ((float)rand() / RAND_MAX);
 80048cc:	f00a f908 	bl	800eae0 <rand>
 80048d0:	ee07 0a90 	vmov	s15, r0
 80048d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048d8:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80048ec <unsigned_noise+0x24>
 80048dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80048e0:	eef0 7a66 	vmov.f32	s15, s13
 80048e4:	eeb0 0a67 	vmov.f32	s0, s15
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	4f000000 	.word	0x4f000000

080048f0 <setCoordinate>:
 * @param point A pointer to the Coordinate struct to be set
 * @param x The x-coordinate to set
 * @param y The y-coordinate to set
 * @param z The z-coordinate to set
 */
void setCoordinate(Coordinate *point, float x, float y, float z) {
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80048fc:	edc7 0a01 	vstr	s1, [r7, #4]
 8004900:	ed87 1a00 	vstr	s2, [r7]
    point->x = x;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	601a      	str	r2, [r3, #0]
    point->y = y;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	605a      	str	r2, [r3, #4]
    point->z = z;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	609a      	str	r2, [r3, #8]
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <setVector>:
 * @param vector A pointer to the Vector struct to be set
 * @param x The x-component to set
 * @param y The y-component to set
 * @param z The z-component to set
 */
void setVector(Vector *vector, float x, float y, float z) {
 8004922:	b480      	push	{r7}
 8004924:	b085      	sub	sp, #20
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	ed87 0a02 	vstr	s0, [r7, #8]
 800492e:	edc7 0a01 	vstr	s1, [r7, #4]
 8004932:	ed87 1a00 	vstr	s2, [r7]
    vector->x = x;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	601a      	str	r2, [r3, #0]
    vector->y = y;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	605a      	str	r2, [r3, #4]
    vector->z = z;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	609a      	str	r2, [r3, #8]
}
 8004948:	bf00      	nop
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <norm>:
 * @brief Calculates the norm (magnitude) of a Vector struct
 *
 * @param vector The Vector struct to calculate the norm of
 * @return The magnitude of the vector
 */
float norm(Vector vector) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	eef0 6a40 	vmov.f32	s13, s0
 800495e:	eeb0 7a60 	vmov.f32	s14, s1
 8004962:	eef0 7a41 	vmov.f32	s15, s2
 8004966:	edc7 6a01 	vstr	s13, [r7, #4]
 800496a:	ed87 7a02 	vstr	s14, [r7, #8]
 800496e:	edc7 7a03 	vstr	s15, [r7, #12]
    return sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
 8004972:	ed97 7a01 	vldr	s14, [r7, #4]
 8004976:	edd7 7a01 	vldr	s15, [r7, #4]
 800497a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800497e:	edd7 6a02 	vldr	s13, [r7, #8]
 8004982:	edd7 7a02 	vldr	s15, [r7, #8]
 8004986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800498a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800498e:	edd7 6a03 	vldr	s13, [r7, #12]
 8004992:	edd7 7a03 	vldr	s15, [r7, #12]
 8004996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800499a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800499e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049a2:	eeb0 0b47 	vmov.f64	d0, d7
 80049a6:	f00c fa27 	bl	8010df8 <sqrt>
 80049aa:	eeb0 7b40 	vmov.f64	d7, d0
 80049ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80049b2:	eeb0 0a67 	vmov.f32	s0, s15
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <euclideanDistance2>:
 *
 * @param start A pointer to the starting Coordinate struct
 * @param end A pointer to the ending Coordinate struct
 * @return The squared Euclidean distance between start and end
 */
float euclideanDistance2(Coordinate *start, Coordinate *end) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
    float delta_x = start->x - end->x;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	ed93 7a00 	vldr	s14, [r3]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	edd3 7a00 	vldr	s15, [r3]
 80049d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049d6:	edc7 7a05 	vstr	s15, [r7, #20]
    float delta_y = start->y - end->y;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80049e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049ea:	edc7 7a04 	vstr	s15, [r7, #16]
    float delta_z = start->z - end->z;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80049fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049fe:	edc7 7a03 	vstr	s15, [r7, #12]

    return sqrt(delta_x * delta_x + delta_y * delta_y + delta_z * delta_z);
 8004a02:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a06:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004a0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a1a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a26:	eeb0 0b47 	vmov.f64	d0, d7
 8004a2a:	f00c f9e5 	bl	8010df8 <sqrt>
 8004a2e:	eeb0 7b40 	vmov.f64	d7, d0
 8004a32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8004a36:	eeb0 0a67 	vmov.f32	s0, s15
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <translate>:
 *
 * @param point A pointer to the first Coordinate struct to be added
 * @param offset A pointer to the second Coordinate struct to be added
 * @param result A pointer to the Coordinate struct to store the result in
 */
void translate(Coordinate *point, Vector *offset, Coordinate *result) {
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
    result->x = point->x + offset->x;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	ed93 7a00 	vldr	s14, [r3]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	edd3 7a00 	vldr	s15, [r3]
 8004a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	edc3 7a00 	vstr	s15, [r3]
    result->y = point->y + offset->y;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	edc3 7a01 	vstr	s15, [r3, #4]
    result->z = point->z + offset->z;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	0000      	movs	r0, r0
 8004a9c:	0000      	movs	r0, r0
	...

08004aa0 <rotate2d>:

void rotate2d(Coordinate *point, float angle, Coordinate *result) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	ed87 0a02 	vstr	s0, [r7, #8]
 8004aac:	6079      	str	r1, [r7, #4]
    // Convert the angle to radians
    angle = angle * M_PI / 180.0;
 8004aae:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ab2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ab6:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8004b70 <rotate2d+0xd0>
 8004aba:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004abe:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8004b78 <rotate2d+0xd8>
 8004ac2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004ac6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004aca:	edc7 7a02 	vstr	s15, [r7, #8]

    // Calculate the sin and cosine values of the angle
    double sinAngle = sin(angle);
 8004ace:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ad2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ad6:	eeb0 0b47 	vmov.f64	d0, d7
 8004ada:	f00c f93d 	bl	8010d58 <sin>
 8004ade:	ed87 0b06 	vstr	d0, [r7, #24]
    double cosAngle = cos(angle);
 8004ae2:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ae6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004aea:	eeb0 0b47 	vmov.f64	d0, d7
 8004aee:	f00c f8e7 	bl	8010cc0 <cos>
 8004af2:	ed87 0b04 	vstr	d0, [r7, #16]

    // Rotate the point around the Z axis
    result->x = point->x * cosAngle - point->y * sinAngle;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	edd3 7a00 	vldr	s15, [r3]
 8004afc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004b00:	ed97 7b04 	vldr	d7, [r7, #16]
 8004b04:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b0e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8004b12:	ed97 7b06 	vldr	d7, [r7, #24]
 8004b16:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004b1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	edc3 7a00 	vstr	s15, [r3]
    result->y = point->x * sinAngle + point->y * cosAngle;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	edd3 7a00 	vldr	s15, [r3]
 8004b2e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004b32:	ed97 7b06 	vldr	d7, [r7, #24]
 8004b36:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b40:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8004b44:	ed97 7b04 	vldr	d7, [r7, #16]
 8004b48:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004b4c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	edc3 7a01 	vstr	s15, [r3, #4]
    result->z = 0;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	609a      	str	r2, [r3, #8]
}
 8004b62:	bf00      	nop
 8004b64:	3720      	adds	r7, #32
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	f3af 8000 	nop.w
 8004b70:	54442d18 	.word	0x54442d18
 8004b74:	400921fb 	.word	0x400921fb
 8004b78:	00000000 	.word	0x00000000
 8004b7c:	40668000 	.word	0x40668000

08004b80 <calculatePositionError>:
 *
 * @param reference A pointer to the reference Coordinate struct
 * @param real A pointer to the real Coordinate struct
 * @return The position error between reference and real
 */
float calculatePositionError(Coordinate *reference, Coordinate *real) {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
    Vector error;

    error.x = (reference->x - real->x);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	ed93 7a00 	vldr	s14, [r3]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	edd3 7a00 	vldr	s15, [r3]
 8004b96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b9a:	edc7 7a03 	vstr	s15, [r7, #12]
    error.y = (reference->y - real->y);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004baa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bae:	edc7 7a04 	vstr	s15, [r7, #16]
    error.z = (reference->z - real->z);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	ed93 7a02 	vldr	s14, [r3, #8]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	edd3 7a02 	vldr	s15, [r3, #8]
 8004bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bc2:	edc7 7a05 	vstr	s15, [r7, #20]

    return norm(error);
 8004bc6:	edd7 6a03 	vldr	s13, [r7, #12]
 8004bca:	ed97 7a04 	vldr	s14, [r7, #16]
 8004bce:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bd2:	eeb0 0a66 	vmov.f32	s0, s13
 8004bd6:	eef0 0a47 	vmov.f32	s1, s14
 8004bda:	eeb0 1a67 	vmov.f32	s2, s15
 8004bde:	f7ff feb9 	bl	8004954 <norm>
 8004be2:	eef0 7a40 	vmov.f32	s15, s0
}
 8004be6:	eeb0 0a67 	vmov.f32	s0, s15
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <calculateError>:

float calculateError(float reference, float real) {
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	ed87 0a01 	vstr	s0, [r7, #4]
 8004bfa:	edc7 0a00 	vstr	s1, [r7]
    return (reference - real) / reference;
 8004bfe:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c02:	edd7 7a00 	vldr	s15, [r7]
 8004c06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c12:	eef0 7a66 	vmov.f32	s15, s13
}
 8004c16:	eeb0 0a67 	vmov.f32	s0, s15
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <initSpectrum>:
 *
 * @param spectrum Pointer to the Spectrum data structure.
 * @param sample_size Size of the sample buffer.
 * @param amount_of_buffers Number of sample buffers.
 */
void initSpectrum(Spectrum* spectrum, int sample_size, int amount_of_buffers) {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
    if (sample_size <= 10 || amount_of_buffers < 1) return;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b0a      	cmp	r3, #10
 8004c34:	dd44      	ble.n	8004cc0 <initSpectrum+0x9c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	dd41      	ble.n	8004cc0 <initSpectrum+0x9c>

    spectrum->amount_of_buffers = amount_of_buffers;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	605a      	str	r2, [r3, #4]
    spectrum->sample_size = sample_size;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	609a      	str	r2, [r3, #8]

    // Allocate memory for the sample buffer.
    spectrum->samples = (float complex*)malloc(
        sizeof(float complex) *
        amount_of_buffers * sample_size);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	fb02 f303 	mul.w	r3, r2, r3
    spectrum->samples = (float complex*)malloc(
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4618      	mov	r0, r3
 8004c54:	f009 f96e 	bl	800df34 <malloc>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	601a      	str	r2, [r3, #0]

    // Initialize the sample buffer to 0.
    for (int index = 0; index < amount_of_buffers * sample_size; index++) {
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	e00c      	b.n	8004c80 <initSpectrum+0x5c>
        spectrum->samples[index] = 0.0;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4413      	add	r3, r2
 8004c70:	4a15      	ldr	r2, [pc, #84]	; (8004cc8 <initSpectrum+0xa4>)
 8004c72:	6811      	ldr	r1, [r2, #0]
 8004c74:	6019      	str	r1, [r3, #0]
 8004c76:	6852      	ldr	r2, [r2, #4]
 8004c78:	605a      	str	r2, [r3, #4]
    for (int index = 0; index < amount_of_buffers * sample_size; index++) {
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	fb02 f303 	mul.w	r3, r2, r3
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	dbeb      	blt.n	8004c66 <initSpectrum+0x42>
    }

    // Calculate a constant used in the FFT calculation.
    spectrum->double_per_sample_size = 2.0 / sample_size;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	ee07 3a90 	vmov	s15, r3
 8004c94:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004c98:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004c9c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004ca0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004ca4:	ee17 1a90 	vmov	r1, s15
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	60d9      	str	r1, [r3, #12]
 8004cb0:	611a      	str	r2, [r3, #16]

    // Initialize the phases array used in the FFT calculation.
    initSpectrumAngles(sample_size);
 8004cb2:	68b8      	ldr	r0, [r7, #8]
 8004cb4:	f000 f80c 	bl	8004cd0 <initSpectrumAngles>

    // Set the initialization flag to indicate that the Spectrum data structure is properly initialized.
    spectrum->initialized = 1;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	615a      	str	r2, [r3, #20]
 8004cbe:	e000      	b.n	8004cc2 <initSpectrum+0x9e>
    if (sample_size <= 10 || amount_of_buffers < 1) return;
 8004cc0:	bf00      	nop
}
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	0801230c 	.word	0x0801230c
 8004ccc:	00000000 	.word	0x00000000

08004cd0 <initSpectrumAngles>:
/**
 * @brief Initializes the phases array used in the FFT calculation with the specified sample size.
 *
 * @param sample_size Size of the sample buffer.
 */
void initSpectrumAngles(int sample_size) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
    if (phases_initialized == 0) {
 8004cd8:	4b41      	ldr	r3, [pc, #260]	; (8004de0 <initSpectrumAngles+0x110>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d16f      	bne.n	8004dc0 <initSpectrumAngles+0xf0>
        // Allocate memory for the phases array.
        amount_of_phases = sample_size;
 8004ce0:	4a40      	ldr	r2, [pc, #256]	; (8004de4 <initSpectrumAngles+0x114>)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6013      	str	r3, [r2, #0]
        phases = (float complex*)malloc(
            sizeof(float complex) *
            amount_of_phases * amount_of_phases);
 8004ce6:	4b3f      	ldr	r3, [pc, #252]	; (8004de4 <initSpectrumAngles+0x114>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	4b3d      	ldr	r3, [pc, #244]	; (8004de4 <initSpectrumAngles+0x114>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	fb02 f303 	mul.w	r3, r2, r3
        phases = (float complex*)malloc(
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f009 f91c 	bl	800df34 <malloc>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4b39      	ldr	r3, [pc, #228]	; (8004de8 <initSpectrumAngles+0x118>)
 8004d02:	601a      	str	r2, [r3, #0]

        // Calculate the complex phase values and store them in the phases array.
        for (int i = 0; i < amount_of_phases; i++) {
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	e051      	b.n	8004dae <initSpectrumAngles+0xde>
            for (int j = 0; j < amount_of_phases; j++) {
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	e046      	b.n	8004d9e <initSpectrumAngles+0xce>
                phases[i * amount_of_phases + j] =
                    cexp(-(2 * i * j * (M_PI)*I) / amount_of_phases);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	fb02 f303 	mul.w	r3, r2, r3
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004d22:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8004dd0 <initSpectrumAngles+0x100>
 8004d26:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004d2a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8004dd8 <initSpectrumAngles+0x108>
 8004d2e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d32:	eeb1 5b47 	vneg.f64	d5, d7
 8004d36:	4b2b      	ldr	r3, [pc, #172]	; (8004de4 <initSpectrumAngles+0x114>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004d42:	ee85 4b07 	vdiv.f64	d4, d5, d7
 8004d46:	eeb1 6b46 	vneg.f64	d6, d6
 8004d4a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004d4e:	ec51 0b14 	vmov	r0, r1, d4
 8004d52:	ec53 2b15 	vmov	r2, r3, d5
 8004d56:	ec41 0b16 	vmov	d6, r0, r1
 8004d5a:	ec43 2b17 	vmov	d7, r2, r3
 8004d5e:	eeb0 0b46 	vmov.f64	d0, d6
 8004d62:	eeb0 1b47 	vmov.f64	d1, d7
 8004d66:	f00b fdbb 	bl	80108e0 <cexp>
 8004d6a:	eeb0 6b40 	vmov.f64	d6, d0
 8004d6e:	eeb0 7b41 	vmov.f64	d7, d1
 8004d72:	eef7 6bc6 	vcvt.f32.f64	s13, d6
 8004d76:	eef7 7bc7 	vcvt.f32.f64	s15, d7
                phases[i * amount_of_phases + j] =
 8004d7a:	4b1b      	ldr	r3, [pc, #108]	; (8004de8 <initSpectrumAngles+0x118>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4b19      	ldr	r3, [pc, #100]	; (8004de4 <initSpectrumAngles+0x114>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68f9      	ldr	r1, [r7, #12]
 8004d84:	fb03 f101 	mul.w	r1, r3, r1
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	440b      	add	r3, r1
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	4413      	add	r3, r2
 8004d90:	edc3 6a00 	vstr	s13, [r3]
 8004d94:	edc3 7a01 	vstr	s15, [r3, #4]
            for (int j = 0; j < amount_of_phases; j++) {
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	60bb      	str	r3, [r7, #8]
 8004d9e:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <initSpectrumAngles+0x114>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	dbb3      	blt.n	8004d10 <initSpectrumAngles+0x40>
        for (int i = 0; i < amount_of_phases; i++) {
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	3301      	adds	r3, #1
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <initSpectrumAngles+0x114>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	dba8      	blt.n	8004d0a <initSpectrumAngles+0x3a>
            }
        }

        // Set the initialization flag to indicate that the phases array is properly initialized.
        phases_initialized = 1;
 8004db8:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <initSpectrumAngles+0x110>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	e003      	b.n	8004dc8 <initSpectrumAngles+0xf8>
    } else if (amount_of_phases != sample_size)
 8004dc0:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <initSpectrumAngles+0x114>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	429a      	cmp	r2, r3
        return;
}
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	54442d18 	.word	0x54442d18
 8004dd4:	400921fb 	.word	0x400921fb
	...
 8004de0:	240007f8 	.word	0x240007f8
 8004de4:	240007fc 	.word	0x240007fc
 8004de8:	240007f4 	.word	0x240007f4

08004dec <isSpectrumInitialized>:
 *
 * @param spectrum Pointer to the Spectrum data structure.
 *
 * @return 1 if the Spectrum data structure has been properly initialized, 0 otherwise.
 */
int isSpectrumInitialized(Spectrum* spectrum) {
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]

    if (phases_initialized == 1) {
 8004df8:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <isSpectrumInitialized+0x50>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d102      	bne.n	8004e06 <isSpectrumInitialized+0x1a>
        check_sum++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3301      	adds	r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]
    }

    if (spectrum->initialized == 1) {
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d102      	bne.n	8004e14 <isSpectrumInitialized+0x28>
        check_sum++;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
    }

    if (spectrum->sample_size > 10) {
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2b0a      	cmp	r3, #10
 8004e1a:	dd02      	ble.n	8004e22 <isSpectrumInitialized+0x36>
        check_sum++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
    }

    return check_sum == SPECTRUM_INITIALIZATION_CHECK_SUM;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	bf0c      	ite	eq
 8004e28:	2301      	moveq	r3, #1
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	240007f8 	.word	0x240007f8

08004e40 <getSpectrumWindowIntensity>:
 * @param window The index of the window in the spectrum.
 * @param indexer Pointer to the Indexer data structure.
 *
 * @return The intensity of the sample at the specified window in the spectrum.
 */
float getSpectrumWindowIntensity(Spectrum* spectrum, int window, Indexer* indexer) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
    int spectrum_window;
    float intensity;

    // Increment index buffer and get its mod from amount of buffers to get the
    // previous buffer already finished
    spectrum_window = ((indexer->buffer + 1) % indexer->amount_of_buffers) * indexer->sample_size +
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	3301      	adds	r3, #1
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	fb93 f1f2 	sdiv	r1, r3, r2
 8004e5a:	fb01 f202 	mul.w	r2, r1, r2
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6852      	ldr	r2, [r2, #4]
 8004e64:	fb02 f303 	mul.w	r3, r2, r3
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
                      window;

    // Calculate the intensity modulus
    intensity = cabsf(spectrum->samples[spectrum_window]);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	4413      	add	r3, r2
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	ee07 2a10 	vmov	s14, r2
 8004e80:	ee07 3a90 	vmov	s15, r3
 8004e84:	eeb0 0a47 	vmov.f32	s0, s14
 8004e88:	eef0 0a67 	vmov.f32	s1, s15
 8004e8c:	f00b fd0d 	bl	80108aa <cabsf>
 8004e90:	ed87 0a04 	vstr	s0, [r7, #16]

    return intensity;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	ee07 3a90 	vmov	s15, r3
}
 8004e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <clearPastSpectrum>:
 * `Indexer` data structure.
 *
 * @param spectrum Pointer to the `Spectrum` data structure.
 * @param indexer Pointer to the `Indexer` data structure.
 */
void clearPastSpectrum(Spectrum* spectrum, Indexer* indexer) {
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
    int index_base = ((indexer->buffer + 1) % indexer->amount_of_buffers) * indexer->sample_size;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	6812      	ldr	r2, [r2, #0]
 8004eb8:	fb93 f1f2 	sdiv	r1, r3, r2
 8004ebc:	fb01 f202 	mul.w	r2, r1, r2
 8004ec0:	1a9b      	subs	r3, r3, r2
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	6852      	ldr	r2, [r2, #4]
 8004ec6:	fb02 f303 	mul.w	r3, r2, r3
 8004eca:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < indexer->sample_size; i++) {
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	e00e      	b.n	8004ef0 <clearPastSpectrum+0x4c>
        spectrum->samples[index_base + i] = 0;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	440b      	add	r3, r1
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	4413      	add	r3, r2
 8004ee0:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <clearPastSpectrum+0x64>)
 8004ee2:	6811      	ldr	r1, [r2, #0]
 8004ee4:	6019      	str	r1, [r3, #0]
 8004ee6:	6852      	ldr	r2, [r2, #4]
 8004ee8:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < indexer->sample_size; i++) {
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3301      	adds	r3, #1
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	dbeb      	blt.n	8004ed2 <clearPastSpectrum+0x2e>
    }
 8004efa:	bf00      	nop
 8004efc:	bf00      	nop
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	0801230c 	.word	0x0801230c

08004f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f12:	2003      	movs	r0, #3
 8004f14:	f000 f933 	bl	800517e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f18:	f002 f83c 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <HAL_Init+0x68>)
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	0a1b      	lsrs	r3, r3, #8
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	4913      	ldr	r1, [pc, #76]	; (8004f78 <HAL_Init+0x6c>)
 8004f2a:	5ccb      	ldrb	r3, [r1, r3]
 8004f2c:	f003 031f 	and.w	r3, r3, #31
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
 8004f34:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f36:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <HAL_Init+0x68>)
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	4a0e      	ldr	r2, [pc, #56]	; (8004f78 <HAL_Init+0x6c>)
 8004f40:	5cd3      	ldrb	r3, [r2, r3]
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4c:	4a0b      	ldr	r2, [pc, #44]	; (8004f7c <HAL_Init+0x70>)
 8004f4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f50:	4a0b      	ldr	r2, [pc, #44]	; (8004f80 <HAL_Init+0x74>)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f56:	200f      	movs	r0, #15
 8004f58:	f7fd fd64 	bl	8002a24 <HAL_InitTick>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e002      	b.n	8004f6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004f66:	f7fd fd3f 	bl	80029e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	58024400 	.word	0x58024400
 8004f78:	0801232c 	.word	0x0801232c
 8004f7c:	24000004 	.word	0x24000004
 8004f80:	24000000 	.word	0x24000000

08004f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004f88:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <HAL_IncTick+0x20>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <HAL_IncTick+0x24>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4413      	add	r3, r2
 8004f94:	4a04      	ldr	r2, [pc, #16]	; (8004fa8 <HAL_IncTick+0x24>)
 8004f96:	6013      	str	r3, [r2, #0]
}
 8004f98:	bf00      	nop
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	2400000c 	.word	0x2400000c
 8004fa8:	24000800 	.word	0x24000800

08004fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  return uwTick;
 8004fb0:	4b03      	ldr	r3, [pc, #12]	; (8004fc0 <HAL_GetTick+0x14>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	24000800 	.word	0x24000800

08004fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fcc:	f7ff ffee 	bl	8004fac <HAL_GetTick>
 8004fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d005      	beq.n	8004fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fde:	4b0a      	ldr	r3, [pc, #40]	; (8005008 <HAL_Delay+0x44>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004fea:	bf00      	nop
 8004fec:	f7ff ffde 	bl	8004fac <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d8f7      	bhi.n	8004fec <HAL_Delay+0x28>
  {
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	2400000c 	.word	0x2400000c

0800500c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005010:	4b03      	ldr	r3, [pc, #12]	; (8005020 <HAL_GetREVID+0x14>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	0c1b      	lsrs	r3, r3, #16
}
 8005016:	4618      	mov	r0, r3
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	5c001000 	.word	0x5c001000

08005024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <__NVIC_SetPriorityGrouping+0x40>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005040:	4013      	ands	r3, r2
 8005042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800504c:	4b06      	ldr	r3, [pc, #24]	; (8005068 <__NVIC_SetPriorityGrouping+0x44>)
 800504e:	4313      	orrs	r3, r2
 8005050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005052:	4a04      	ldr	r2, [pc, #16]	; (8005064 <__NVIC_SetPriorityGrouping+0x40>)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	60d3      	str	r3, [r2, #12]
}
 8005058:	bf00      	nop
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	e000ed00 	.word	0xe000ed00
 8005068:	05fa0000 	.word	0x05fa0000

0800506c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005070:	4b04      	ldr	r3, [pc, #16]	; (8005084 <__NVIC_GetPriorityGrouping+0x18>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	f003 0307 	and.w	r3, r3, #7
}
 800507a:	4618      	mov	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	e000ed00 	.word	0xe000ed00

08005088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	4603      	mov	r3, r0
 8005090:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005096:	2b00      	cmp	r3, #0
 8005098:	db0b      	blt.n	80050b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	f003 021f 	and.w	r2, r3, #31
 80050a0:	4907      	ldr	r1, [pc, #28]	; (80050c0 <__NVIC_EnableIRQ+0x38>)
 80050a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	2001      	movs	r0, #1
 80050aa:	fa00 f202 	lsl.w	r2, r0, r2
 80050ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	e000e100 	.word	0xe000e100

080050c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	6039      	str	r1, [r7, #0]
 80050ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80050d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	db0a      	blt.n	80050ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	490c      	ldr	r1, [pc, #48]	; (8005110 <__NVIC_SetPriority+0x4c>)
 80050de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050e2:	0112      	lsls	r2, r2, #4
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	440b      	add	r3, r1
 80050e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050ec:	e00a      	b.n	8005104 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	4908      	ldr	r1, [pc, #32]	; (8005114 <__NVIC_SetPriority+0x50>)
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	3b04      	subs	r3, #4
 80050fc:	0112      	lsls	r2, r2, #4
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	440b      	add	r3, r1
 8005102:	761a      	strb	r2, [r3, #24]
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	e000e100 	.word	0xe000e100
 8005114:	e000ed00 	.word	0xe000ed00

08005118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005118:	b480      	push	{r7}
 800511a:	b089      	sub	sp, #36	; 0x24
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f1c3 0307 	rsb	r3, r3, #7
 8005132:	2b04      	cmp	r3, #4
 8005134:	bf28      	it	cs
 8005136:	2304      	movcs	r3, #4
 8005138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	3304      	adds	r3, #4
 800513e:	2b06      	cmp	r3, #6
 8005140:	d902      	bls.n	8005148 <NVIC_EncodePriority+0x30>
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	3b03      	subs	r3, #3
 8005146:	e000      	b.n	800514a <NVIC_EncodePriority+0x32>
 8005148:	2300      	movs	r3, #0
 800514a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800514c:	f04f 32ff 	mov.w	r2, #4294967295
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	43da      	mvns	r2, r3
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	401a      	ands	r2, r3
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005160:	f04f 31ff 	mov.w	r1, #4294967295
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	fa01 f303 	lsl.w	r3, r1, r3
 800516a:	43d9      	mvns	r1, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005170:	4313      	orrs	r3, r2
         );
}
 8005172:	4618      	mov	r0, r3
 8005174:	3724      	adds	r7, #36	; 0x24
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff ff4c 	bl	8005024 <__NVIC_SetPriorityGrouping>
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051a2:	f7ff ff63 	bl	800506c <__NVIC_GetPriorityGrouping>
 80051a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	6978      	ldr	r0, [r7, #20]
 80051ae:	f7ff ffb3 	bl	8005118 <NVIC_EncodePriority>
 80051b2:	4602      	mov	r2, r0
 80051b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051b8:	4611      	mov	r1, r2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff ff82 	bl	80050c4 <__NVIC_SetPriority>
}
 80051c0:	bf00      	nop
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff ff56 	bl	8005088 <__NVIC_EnableIRQ>
}
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80051ec:	f7ff fede 	bl	8004fac <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e2dc      	b.n	80057b6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d008      	beq.n	800521a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2280      	movs	r2, #128	; 0x80
 800520c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e2cd      	b.n	80057b6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a76      	ldr	r2, [pc, #472]	; (80053f8 <HAL_DMA_Abort+0x214>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d04a      	beq.n	80052ba <HAL_DMA_Abort+0xd6>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a74      	ldr	r2, [pc, #464]	; (80053fc <HAL_DMA_Abort+0x218>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d045      	beq.n	80052ba <HAL_DMA_Abort+0xd6>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a73      	ldr	r2, [pc, #460]	; (8005400 <HAL_DMA_Abort+0x21c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d040      	beq.n	80052ba <HAL_DMA_Abort+0xd6>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a71      	ldr	r2, [pc, #452]	; (8005404 <HAL_DMA_Abort+0x220>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d03b      	beq.n	80052ba <HAL_DMA_Abort+0xd6>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a70      	ldr	r2, [pc, #448]	; (8005408 <HAL_DMA_Abort+0x224>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d036      	beq.n	80052ba <HAL_DMA_Abort+0xd6>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a6e      	ldr	r2, [pc, #440]	; (800540c <HAL_DMA_Abort+0x228>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d031      	beq.n	80052ba <HAL_DMA_Abort+0xd6>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a6d      	ldr	r2, [pc, #436]	; (8005410 <HAL_DMA_Abort+0x22c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d02c      	beq.n	80052ba <HAL_DMA_Abort+0xd6>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a6b      	ldr	r2, [pc, #428]	; (8005414 <HAL_DMA_Abort+0x230>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d027      	beq.n	80052ba <HAL_DMA_Abort+0xd6>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a6a      	ldr	r2, [pc, #424]	; (8005418 <HAL_DMA_Abort+0x234>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d022      	beq.n	80052ba <HAL_DMA_Abort+0xd6>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a68      	ldr	r2, [pc, #416]	; (800541c <HAL_DMA_Abort+0x238>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01d      	beq.n	80052ba <HAL_DMA_Abort+0xd6>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a67      	ldr	r2, [pc, #412]	; (8005420 <HAL_DMA_Abort+0x23c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d018      	beq.n	80052ba <HAL_DMA_Abort+0xd6>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a65      	ldr	r2, [pc, #404]	; (8005424 <HAL_DMA_Abort+0x240>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d013      	beq.n	80052ba <HAL_DMA_Abort+0xd6>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a64      	ldr	r2, [pc, #400]	; (8005428 <HAL_DMA_Abort+0x244>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00e      	beq.n	80052ba <HAL_DMA_Abort+0xd6>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a62      	ldr	r2, [pc, #392]	; (800542c <HAL_DMA_Abort+0x248>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d009      	beq.n	80052ba <HAL_DMA_Abort+0xd6>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a61      	ldr	r2, [pc, #388]	; (8005430 <HAL_DMA_Abort+0x24c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d004      	beq.n	80052ba <HAL_DMA_Abort+0xd6>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a5f      	ldr	r2, [pc, #380]	; (8005434 <HAL_DMA_Abort+0x250>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d101      	bne.n	80052be <HAL_DMA_Abort+0xda>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <HAL_DMA_Abort+0xdc>
 80052be:	2300      	movs	r3, #0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d013      	beq.n	80052ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 021e 	bic.w	r2, r2, #30
 80052d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695a      	ldr	r2, [r3, #20]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	e00a      	b.n	8005302 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 020e 	bic.w	r2, r2, #14
 80052fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a3c      	ldr	r2, [pc, #240]	; (80053f8 <HAL_DMA_Abort+0x214>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d072      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a3a      	ldr	r2, [pc, #232]	; (80053fc <HAL_DMA_Abort+0x218>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d06d      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a39      	ldr	r2, [pc, #228]	; (8005400 <HAL_DMA_Abort+0x21c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d068      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a37      	ldr	r2, [pc, #220]	; (8005404 <HAL_DMA_Abort+0x220>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d063      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a36      	ldr	r2, [pc, #216]	; (8005408 <HAL_DMA_Abort+0x224>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d05e      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a34      	ldr	r2, [pc, #208]	; (800540c <HAL_DMA_Abort+0x228>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d059      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a33      	ldr	r2, [pc, #204]	; (8005410 <HAL_DMA_Abort+0x22c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d054      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a31      	ldr	r2, [pc, #196]	; (8005414 <HAL_DMA_Abort+0x230>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d04f      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a30      	ldr	r2, [pc, #192]	; (8005418 <HAL_DMA_Abort+0x234>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d04a      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a2e      	ldr	r2, [pc, #184]	; (800541c <HAL_DMA_Abort+0x238>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d045      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a2d      	ldr	r2, [pc, #180]	; (8005420 <HAL_DMA_Abort+0x23c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d040      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2b      	ldr	r2, [pc, #172]	; (8005424 <HAL_DMA_Abort+0x240>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d03b      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a2a      	ldr	r2, [pc, #168]	; (8005428 <HAL_DMA_Abort+0x244>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d036      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a28      	ldr	r2, [pc, #160]	; (800542c <HAL_DMA_Abort+0x248>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d031      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a27      	ldr	r2, [pc, #156]	; (8005430 <HAL_DMA_Abort+0x24c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d02c      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a25      	ldr	r2, [pc, #148]	; (8005434 <HAL_DMA_Abort+0x250>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d027      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a24      	ldr	r2, [pc, #144]	; (8005438 <HAL_DMA_Abort+0x254>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d022      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a22      	ldr	r2, [pc, #136]	; (800543c <HAL_DMA_Abort+0x258>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d01d      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a21      	ldr	r2, [pc, #132]	; (8005440 <HAL_DMA_Abort+0x25c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d018      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1f      	ldr	r2, [pc, #124]	; (8005444 <HAL_DMA_Abort+0x260>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d013      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1e      	ldr	r2, [pc, #120]	; (8005448 <HAL_DMA_Abort+0x264>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00e      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1c      	ldr	r2, [pc, #112]	; (800544c <HAL_DMA_Abort+0x268>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d009      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1b      	ldr	r2, [pc, #108]	; (8005450 <HAL_DMA_Abort+0x26c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d004      	beq.n	80053f2 <HAL_DMA_Abort+0x20e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a19      	ldr	r2, [pc, #100]	; (8005454 <HAL_DMA_Abort+0x270>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d132      	bne.n	8005458 <HAL_DMA_Abort+0x274>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e031      	b.n	800545a <HAL_DMA_Abort+0x276>
 80053f6:	bf00      	nop
 80053f8:	40020010 	.word	0x40020010
 80053fc:	40020028 	.word	0x40020028
 8005400:	40020040 	.word	0x40020040
 8005404:	40020058 	.word	0x40020058
 8005408:	40020070 	.word	0x40020070
 800540c:	40020088 	.word	0x40020088
 8005410:	400200a0 	.word	0x400200a0
 8005414:	400200b8 	.word	0x400200b8
 8005418:	40020410 	.word	0x40020410
 800541c:	40020428 	.word	0x40020428
 8005420:	40020440 	.word	0x40020440
 8005424:	40020458 	.word	0x40020458
 8005428:	40020470 	.word	0x40020470
 800542c:	40020488 	.word	0x40020488
 8005430:	400204a0 	.word	0x400204a0
 8005434:	400204b8 	.word	0x400204b8
 8005438:	58025408 	.word	0x58025408
 800543c:	5802541c 	.word	0x5802541c
 8005440:	58025430 	.word	0x58025430
 8005444:	58025444 	.word	0x58025444
 8005448:	58025458 	.word	0x58025458
 800544c:	5802546c 	.word	0x5802546c
 8005450:	58025480 	.word	0x58025480
 8005454:	58025494 	.word	0x58025494
 8005458:	2300      	movs	r3, #0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800546c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a6d      	ldr	r2, [pc, #436]	; (8005628 <HAL_DMA_Abort+0x444>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d04a      	beq.n	800550e <HAL_DMA_Abort+0x32a>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a6b      	ldr	r2, [pc, #428]	; (800562c <HAL_DMA_Abort+0x448>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d045      	beq.n	800550e <HAL_DMA_Abort+0x32a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a6a      	ldr	r2, [pc, #424]	; (8005630 <HAL_DMA_Abort+0x44c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d040      	beq.n	800550e <HAL_DMA_Abort+0x32a>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a68      	ldr	r2, [pc, #416]	; (8005634 <HAL_DMA_Abort+0x450>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d03b      	beq.n	800550e <HAL_DMA_Abort+0x32a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a67      	ldr	r2, [pc, #412]	; (8005638 <HAL_DMA_Abort+0x454>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d036      	beq.n	800550e <HAL_DMA_Abort+0x32a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a65      	ldr	r2, [pc, #404]	; (800563c <HAL_DMA_Abort+0x458>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d031      	beq.n	800550e <HAL_DMA_Abort+0x32a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a64      	ldr	r2, [pc, #400]	; (8005640 <HAL_DMA_Abort+0x45c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d02c      	beq.n	800550e <HAL_DMA_Abort+0x32a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a62      	ldr	r2, [pc, #392]	; (8005644 <HAL_DMA_Abort+0x460>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d027      	beq.n	800550e <HAL_DMA_Abort+0x32a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a61      	ldr	r2, [pc, #388]	; (8005648 <HAL_DMA_Abort+0x464>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d022      	beq.n	800550e <HAL_DMA_Abort+0x32a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a5f      	ldr	r2, [pc, #380]	; (800564c <HAL_DMA_Abort+0x468>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d01d      	beq.n	800550e <HAL_DMA_Abort+0x32a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a5e      	ldr	r2, [pc, #376]	; (8005650 <HAL_DMA_Abort+0x46c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d018      	beq.n	800550e <HAL_DMA_Abort+0x32a>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a5c      	ldr	r2, [pc, #368]	; (8005654 <HAL_DMA_Abort+0x470>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d013      	beq.n	800550e <HAL_DMA_Abort+0x32a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a5b      	ldr	r2, [pc, #364]	; (8005658 <HAL_DMA_Abort+0x474>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00e      	beq.n	800550e <HAL_DMA_Abort+0x32a>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a59      	ldr	r2, [pc, #356]	; (800565c <HAL_DMA_Abort+0x478>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d009      	beq.n	800550e <HAL_DMA_Abort+0x32a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a58      	ldr	r2, [pc, #352]	; (8005660 <HAL_DMA_Abort+0x47c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d004      	beq.n	800550e <HAL_DMA_Abort+0x32a>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a56      	ldr	r2, [pc, #344]	; (8005664 <HAL_DMA_Abort+0x480>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d108      	bne.n	8005520 <HAL_DMA_Abort+0x33c>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0201 	bic.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	e007      	b.n	8005530 <HAL_DMA_Abort+0x34c>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0201 	bic.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005530:	e013      	b.n	800555a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005532:	f7ff fd3b 	bl	8004fac <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b05      	cmp	r3, #5
 800553e:	d90c      	bls.n	800555a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2203      	movs	r2, #3
 800554a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e12d      	b.n	80057b6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e5      	bne.n	8005532 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2f      	ldr	r2, [pc, #188]	; (8005628 <HAL_DMA_Abort+0x444>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d04a      	beq.n	8005606 <HAL_DMA_Abort+0x422>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a2d      	ldr	r2, [pc, #180]	; (800562c <HAL_DMA_Abort+0x448>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d045      	beq.n	8005606 <HAL_DMA_Abort+0x422>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2c      	ldr	r2, [pc, #176]	; (8005630 <HAL_DMA_Abort+0x44c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d040      	beq.n	8005606 <HAL_DMA_Abort+0x422>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a2a      	ldr	r2, [pc, #168]	; (8005634 <HAL_DMA_Abort+0x450>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d03b      	beq.n	8005606 <HAL_DMA_Abort+0x422>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a29      	ldr	r2, [pc, #164]	; (8005638 <HAL_DMA_Abort+0x454>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d036      	beq.n	8005606 <HAL_DMA_Abort+0x422>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a27      	ldr	r2, [pc, #156]	; (800563c <HAL_DMA_Abort+0x458>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d031      	beq.n	8005606 <HAL_DMA_Abort+0x422>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a26      	ldr	r2, [pc, #152]	; (8005640 <HAL_DMA_Abort+0x45c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d02c      	beq.n	8005606 <HAL_DMA_Abort+0x422>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a24      	ldr	r2, [pc, #144]	; (8005644 <HAL_DMA_Abort+0x460>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d027      	beq.n	8005606 <HAL_DMA_Abort+0x422>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a23      	ldr	r2, [pc, #140]	; (8005648 <HAL_DMA_Abort+0x464>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d022      	beq.n	8005606 <HAL_DMA_Abort+0x422>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a21      	ldr	r2, [pc, #132]	; (800564c <HAL_DMA_Abort+0x468>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d01d      	beq.n	8005606 <HAL_DMA_Abort+0x422>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a20      	ldr	r2, [pc, #128]	; (8005650 <HAL_DMA_Abort+0x46c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d018      	beq.n	8005606 <HAL_DMA_Abort+0x422>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1e      	ldr	r2, [pc, #120]	; (8005654 <HAL_DMA_Abort+0x470>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <HAL_DMA_Abort+0x422>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1d      	ldr	r2, [pc, #116]	; (8005658 <HAL_DMA_Abort+0x474>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00e      	beq.n	8005606 <HAL_DMA_Abort+0x422>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1b      	ldr	r2, [pc, #108]	; (800565c <HAL_DMA_Abort+0x478>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d009      	beq.n	8005606 <HAL_DMA_Abort+0x422>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1a      	ldr	r2, [pc, #104]	; (8005660 <HAL_DMA_Abort+0x47c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_DMA_Abort+0x422>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a18      	ldr	r2, [pc, #96]	; (8005664 <HAL_DMA_Abort+0x480>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d101      	bne.n	800560a <HAL_DMA_Abort+0x426>
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <HAL_DMA_Abort+0x428>
 800560a:	2300      	movs	r3, #0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d02b      	beq.n	8005668 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005614:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561a:	f003 031f 	and.w	r3, r3, #31
 800561e:	223f      	movs	r2, #63	; 0x3f
 8005620:	409a      	lsls	r2, r3
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	609a      	str	r2, [r3, #8]
 8005626:	e02a      	b.n	800567e <HAL_DMA_Abort+0x49a>
 8005628:	40020010 	.word	0x40020010
 800562c:	40020028 	.word	0x40020028
 8005630:	40020040 	.word	0x40020040
 8005634:	40020058 	.word	0x40020058
 8005638:	40020070 	.word	0x40020070
 800563c:	40020088 	.word	0x40020088
 8005640:	400200a0 	.word	0x400200a0
 8005644:	400200b8 	.word	0x400200b8
 8005648:	40020410 	.word	0x40020410
 800564c:	40020428 	.word	0x40020428
 8005650:	40020440 	.word	0x40020440
 8005654:	40020458 	.word	0x40020458
 8005658:	40020470 	.word	0x40020470
 800565c:	40020488 	.word	0x40020488
 8005660:	400204a0 	.word	0x400204a0
 8005664:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005672:	f003 031f 	and.w	r3, r3, #31
 8005676:	2201      	movs	r2, #1
 8005678:	409a      	lsls	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a4f      	ldr	r2, [pc, #316]	; (80057c0 <HAL_DMA_Abort+0x5dc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d072      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a4d      	ldr	r2, [pc, #308]	; (80057c4 <HAL_DMA_Abort+0x5e0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d06d      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a4c      	ldr	r2, [pc, #304]	; (80057c8 <HAL_DMA_Abort+0x5e4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d068      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a4a      	ldr	r2, [pc, #296]	; (80057cc <HAL_DMA_Abort+0x5e8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d063      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a49      	ldr	r2, [pc, #292]	; (80057d0 <HAL_DMA_Abort+0x5ec>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d05e      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a47      	ldr	r2, [pc, #284]	; (80057d4 <HAL_DMA_Abort+0x5f0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d059      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a46      	ldr	r2, [pc, #280]	; (80057d8 <HAL_DMA_Abort+0x5f4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d054      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a44      	ldr	r2, [pc, #272]	; (80057dc <HAL_DMA_Abort+0x5f8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d04f      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a43      	ldr	r2, [pc, #268]	; (80057e0 <HAL_DMA_Abort+0x5fc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d04a      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a41      	ldr	r2, [pc, #260]	; (80057e4 <HAL_DMA_Abort+0x600>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d045      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a40      	ldr	r2, [pc, #256]	; (80057e8 <HAL_DMA_Abort+0x604>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d040      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a3e      	ldr	r2, [pc, #248]	; (80057ec <HAL_DMA_Abort+0x608>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d03b      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a3d      	ldr	r2, [pc, #244]	; (80057f0 <HAL_DMA_Abort+0x60c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d036      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a3b      	ldr	r2, [pc, #236]	; (80057f4 <HAL_DMA_Abort+0x610>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d031      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a3a      	ldr	r2, [pc, #232]	; (80057f8 <HAL_DMA_Abort+0x614>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d02c      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a38      	ldr	r2, [pc, #224]	; (80057fc <HAL_DMA_Abort+0x618>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d027      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a37      	ldr	r2, [pc, #220]	; (8005800 <HAL_DMA_Abort+0x61c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d022      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a35      	ldr	r2, [pc, #212]	; (8005804 <HAL_DMA_Abort+0x620>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d01d      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a34      	ldr	r2, [pc, #208]	; (8005808 <HAL_DMA_Abort+0x624>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d018      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a32      	ldr	r2, [pc, #200]	; (800580c <HAL_DMA_Abort+0x628>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d013      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a31      	ldr	r2, [pc, #196]	; (8005810 <HAL_DMA_Abort+0x62c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d00e      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a2f      	ldr	r2, [pc, #188]	; (8005814 <HAL_DMA_Abort+0x630>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d009      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a2e      	ldr	r2, [pc, #184]	; (8005818 <HAL_DMA_Abort+0x634>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d004      	beq.n	800576e <HAL_DMA_Abort+0x58a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a2c      	ldr	r2, [pc, #176]	; (800581c <HAL_DMA_Abort+0x638>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d101      	bne.n	8005772 <HAL_DMA_Abort+0x58e>
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <HAL_DMA_Abort+0x590>
 8005772:	2300      	movs	r3, #0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d015      	beq.n	80057a4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005780:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00c      	beq.n	80057a4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005794:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005798:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057a2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	40020010 	.word	0x40020010
 80057c4:	40020028 	.word	0x40020028
 80057c8:	40020040 	.word	0x40020040
 80057cc:	40020058 	.word	0x40020058
 80057d0:	40020070 	.word	0x40020070
 80057d4:	40020088 	.word	0x40020088
 80057d8:	400200a0 	.word	0x400200a0
 80057dc:	400200b8 	.word	0x400200b8
 80057e0:	40020410 	.word	0x40020410
 80057e4:	40020428 	.word	0x40020428
 80057e8:	40020440 	.word	0x40020440
 80057ec:	40020458 	.word	0x40020458
 80057f0:	40020470 	.word	0x40020470
 80057f4:	40020488 	.word	0x40020488
 80057f8:	400204a0 	.word	0x400204a0
 80057fc:	400204b8 	.word	0x400204b8
 8005800:	58025408 	.word	0x58025408
 8005804:	5802541c 	.word	0x5802541c
 8005808:	58025430 	.word	0x58025430
 800580c:	58025444 	.word	0x58025444
 8005810:	58025458 	.word	0x58025458
 8005814:	5802546c 	.word	0x5802546c
 8005818:	58025480 	.word	0x58025480
 800581c:	58025494 	.word	0x58025494

08005820 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e237      	b.n	8005ca2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d004      	beq.n	8005848 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2280      	movs	r2, #128	; 0x80
 8005842:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e22c      	b.n	8005ca2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a5c      	ldr	r2, [pc, #368]	; (80059c0 <HAL_DMA_Abort_IT+0x1a0>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d04a      	beq.n	80058e8 <HAL_DMA_Abort_IT+0xc8>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a5b      	ldr	r2, [pc, #364]	; (80059c4 <HAL_DMA_Abort_IT+0x1a4>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d045      	beq.n	80058e8 <HAL_DMA_Abort_IT+0xc8>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a59      	ldr	r2, [pc, #356]	; (80059c8 <HAL_DMA_Abort_IT+0x1a8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d040      	beq.n	80058e8 <HAL_DMA_Abort_IT+0xc8>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a58      	ldr	r2, [pc, #352]	; (80059cc <HAL_DMA_Abort_IT+0x1ac>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d03b      	beq.n	80058e8 <HAL_DMA_Abort_IT+0xc8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a56      	ldr	r2, [pc, #344]	; (80059d0 <HAL_DMA_Abort_IT+0x1b0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d036      	beq.n	80058e8 <HAL_DMA_Abort_IT+0xc8>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a55      	ldr	r2, [pc, #340]	; (80059d4 <HAL_DMA_Abort_IT+0x1b4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d031      	beq.n	80058e8 <HAL_DMA_Abort_IT+0xc8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a53      	ldr	r2, [pc, #332]	; (80059d8 <HAL_DMA_Abort_IT+0x1b8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d02c      	beq.n	80058e8 <HAL_DMA_Abort_IT+0xc8>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a52      	ldr	r2, [pc, #328]	; (80059dc <HAL_DMA_Abort_IT+0x1bc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d027      	beq.n	80058e8 <HAL_DMA_Abort_IT+0xc8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a50      	ldr	r2, [pc, #320]	; (80059e0 <HAL_DMA_Abort_IT+0x1c0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d022      	beq.n	80058e8 <HAL_DMA_Abort_IT+0xc8>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a4f      	ldr	r2, [pc, #316]	; (80059e4 <HAL_DMA_Abort_IT+0x1c4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d01d      	beq.n	80058e8 <HAL_DMA_Abort_IT+0xc8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a4d      	ldr	r2, [pc, #308]	; (80059e8 <HAL_DMA_Abort_IT+0x1c8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d018      	beq.n	80058e8 <HAL_DMA_Abort_IT+0xc8>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a4c      	ldr	r2, [pc, #304]	; (80059ec <HAL_DMA_Abort_IT+0x1cc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d013      	beq.n	80058e8 <HAL_DMA_Abort_IT+0xc8>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a4a      	ldr	r2, [pc, #296]	; (80059f0 <HAL_DMA_Abort_IT+0x1d0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00e      	beq.n	80058e8 <HAL_DMA_Abort_IT+0xc8>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a49      	ldr	r2, [pc, #292]	; (80059f4 <HAL_DMA_Abort_IT+0x1d4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d009      	beq.n	80058e8 <HAL_DMA_Abort_IT+0xc8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a47      	ldr	r2, [pc, #284]	; (80059f8 <HAL_DMA_Abort_IT+0x1d8>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d004      	beq.n	80058e8 <HAL_DMA_Abort_IT+0xc8>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a46      	ldr	r2, [pc, #280]	; (80059fc <HAL_DMA_Abort_IT+0x1dc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d101      	bne.n	80058ec <HAL_DMA_Abort_IT+0xcc>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <HAL_DMA_Abort_IT+0xce>
 80058ec:	2300      	movs	r3, #0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 8086 	beq.w	8005a00 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2204      	movs	r2, #4
 80058f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a2f      	ldr	r2, [pc, #188]	; (80059c0 <HAL_DMA_Abort_IT+0x1a0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d04a      	beq.n	800599c <HAL_DMA_Abort_IT+0x17c>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a2e      	ldr	r2, [pc, #184]	; (80059c4 <HAL_DMA_Abort_IT+0x1a4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d045      	beq.n	800599c <HAL_DMA_Abort_IT+0x17c>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2c      	ldr	r2, [pc, #176]	; (80059c8 <HAL_DMA_Abort_IT+0x1a8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d040      	beq.n	800599c <HAL_DMA_Abort_IT+0x17c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a2b      	ldr	r2, [pc, #172]	; (80059cc <HAL_DMA_Abort_IT+0x1ac>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d03b      	beq.n	800599c <HAL_DMA_Abort_IT+0x17c>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a29      	ldr	r2, [pc, #164]	; (80059d0 <HAL_DMA_Abort_IT+0x1b0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d036      	beq.n	800599c <HAL_DMA_Abort_IT+0x17c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a28      	ldr	r2, [pc, #160]	; (80059d4 <HAL_DMA_Abort_IT+0x1b4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d031      	beq.n	800599c <HAL_DMA_Abort_IT+0x17c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a26      	ldr	r2, [pc, #152]	; (80059d8 <HAL_DMA_Abort_IT+0x1b8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d02c      	beq.n	800599c <HAL_DMA_Abort_IT+0x17c>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a25      	ldr	r2, [pc, #148]	; (80059dc <HAL_DMA_Abort_IT+0x1bc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d027      	beq.n	800599c <HAL_DMA_Abort_IT+0x17c>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a23      	ldr	r2, [pc, #140]	; (80059e0 <HAL_DMA_Abort_IT+0x1c0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d022      	beq.n	800599c <HAL_DMA_Abort_IT+0x17c>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a22      	ldr	r2, [pc, #136]	; (80059e4 <HAL_DMA_Abort_IT+0x1c4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d01d      	beq.n	800599c <HAL_DMA_Abort_IT+0x17c>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a20      	ldr	r2, [pc, #128]	; (80059e8 <HAL_DMA_Abort_IT+0x1c8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d018      	beq.n	800599c <HAL_DMA_Abort_IT+0x17c>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1f      	ldr	r2, [pc, #124]	; (80059ec <HAL_DMA_Abort_IT+0x1cc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d013      	beq.n	800599c <HAL_DMA_Abort_IT+0x17c>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1d      	ldr	r2, [pc, #116]	; (80059f0 <HAL_DMA_Abort_IT+0x1d0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00e      	beq.n	800599c <HAL_DMA_Abort_IT+0x17c>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1c      	ldr	r2, [pc, #112]	; (80059f4 <HAL_DMA_Abort_IT+0x1d4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d009      	beq.n	800599c <HAL_DMA_Abort_IT+0x17c>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1a      	ldr	r2, [pc, #104]	; (80059f8 <HAL_DMA_Abort_IT+0x1d8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d004      	beq.n	800599c <HAL_DMA_Abort_IT+0x17c>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a19      	ldr	r2, [pc, #100]	; (80059fc <HAL_DMA_Abort_IT+0x1dc>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d108      	bne.n	80059ae <HAL_DMA_Abort_IT+0x18e>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0201 	bic.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	e178      	b.n	8005ca0 <HAL_DMA_Abort_IT+0x480>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0201 	bic.w	r2, r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	e16f      	b.n	8005ca0 <HAL_DMA_Abort_IT+0x480>
 80059c0:	40020010 	.word	0x40020010
 80059c4:	40020028 	.word	0x40020028
 80059c8:	40020040 	.word	0x40020040
 80059cc:	40020058 	.word	0x40020058
 80059d0:	40020070 	.word	0x40020070
 80059d4:	40020088 	.word	0x40020088
 80059d8:	400200a0 	.word	0x400200a0
 80059dc:	400200b8 	.word	0x400200b8
 80059e0:	40020410 	.word	0x40020410
 80059e4:	40020428 	.word	0x40020428
 80059e8:	40020440 	.word	0x40020440
 80059ec:	40020458 	.word	0x40020458
 80059f0:	40020470 	.word	0x40020470
 80059f4:	40020488 	.word	0x40020488
 80059f8:	400204a0 	.word	0x400204a0
 80059fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 020e 	bic.w	r2, r2, #14
 8005a0e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a6c      	ldr	r2, [pc, #432]	; (8005bc8 <HAL_DMA_Abort_IT+0x3a8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d04a      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x290>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a6b      	ldr	r2, [pc, #428]	; (8005bcc <HAL_DMA_Abort_IT+0x3ac>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d045      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x290>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a69      	ldr	r2, [pc, #420]	; (8005bd0 <HAL_DMA_Abort_IT+0x3b0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d040      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x290>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a68      	ldr	r2, [pc, #416]	; (8005bd4 <HAL_DMA_Abort_IT+0x3b4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d03b      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x290>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a66      	ldr	r2, [pc, #408]	; (8005bd8 <HAL_DMA_Abort_IT+0x3b8>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d036      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x290>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a65      	ldr	r2, [pc, #404]	; (8005bdc <HAL_DMA_Abort_IT+0x3bc>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d031      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x290>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a63      	ldr	r2, [pc, #396]	; (8005be0 <HAL_DMA_Abort_IT+0x3c0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d02c      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x290>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a62      	ldr	r2, [pc, #392]	; (8005be4 <HAL_DMA_Abort_IT+0x3c4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d027      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x290>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a60      	ldr	r2, [pc, #384]	; (8005be8 <HAL_DMA_Abort_IT+0x3c8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d022      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x290>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a5f      	ldr	r2, [pc, #380]	; (8005bec <HAL_DMA_Abort_IT+0x3cc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d01d      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x290>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a5d      	ldr	r2, [pc, #372]	; (8005bf0 <HAL_DMA_Abort_IT+0x3d0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d018      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x290>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a5c      	ldr	r2, [pc, #368]	; (8005bf4 <HAL_DMA_Abort_IT+0x3d4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d013      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x290>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a5a      	ldr	r2, [pc, #360]	; (8005bf8 <HAL_DMA_Abort_IT+0x3d8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00e      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x290>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a59      	ldr	r2, [pc, #356]	; (8005bfc <HAL_DMA_Abort_IT+0x3dc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d009      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x290>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a57      	ldr	r2, [pc, #348]	; (8005c00 <HAL_DMA_Abort_IT+0x3e0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d004      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x290>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a56      	ldr	r2, [pc, #344]	; (8005c04 <HAL_DMA_Abort_IT+0x3e4>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d108      	bne.n	8005ac2 <HAL_DMA_Abort_IT+0x2a2>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0201 	bic.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	e007      	b.n	8005ad2 <HAL_DMA_Abort_IT+0x2b2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0201 	bic.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a3c      	ldr	r2, [pc, #240]	; (8005bc8 <HAL_DMA_Abort_IT+0x3a8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d072      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a3a      	ldr	r2, [pc, #232]	; (8005bcc <HAL_DMA_Abort_IT+0x3ac>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d06d      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a39      	ldr	r2, [pc, #228]	; (8005bd0 <HAL_DMA_Abort_IT+0x3b0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d068      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a37      	ldr	r2, [pc, #220]	; (8005bd4 <HAL_DMA_Abort_IT+0x3b4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d063      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a36      	ldr	r2, [pc, #216]	; (8005bd8 <HAL_DMA_Abort_IT+0x3b8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d05e      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a34      	ldr	r2, [pc, #208]	; (8005bdc <HAL_DMA_Abort_IT+0x3bc>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d059      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a33      	ldr	r2, [pc, #204]	; (8005be0 <HAL_DMA_Abort_IT+0x3c0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d054      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a31      	ldr	r2, [pc, #196]	; (8005be4 <HAL_DMA_Abort_IT+0x3c4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d04f      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a30      	ldr	r2, [pc, #192]	; (8005be8 <HAL_DMA_Abort_IT+0x3c8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d04a      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a2e      	ldr	r2, [pc, #184]	; (8005bec <HAL_DMA_Abort_IT+0x3cc>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d045      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a2d      	ldr	r2, [pc, #180]	; (8005bf0 <HAL_DMA_Abort_IT+0x3d0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d040      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a2b      	ldr	r2, [pc, #172]	; (8005bf4 <HAL_DMA_Abort_IT+0x3d4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d03b      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2a      	ldr	r2, [pc, #168]	; (8005bf8 <HAL_DMA_Abort_IT+0x3d8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d036      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a28      	ldr	r2, [pc, #160]	; (8005bfc <HAL_DMA_Abort_IT+0x3dc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d031      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a27      	ldr	r2, [pc, #156]	; (8005c00 <HAL_DMA_Abort_IT+0x3e0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d02c      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a25      	ldr	r2, [pc, #148]	; (8005c04 <HAL_DMA_Abort_IT+0x3e4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d027      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a24      	ldr	r2, [pc, #144]	; (8005c08 <HAL_DMA_Abort_IT+0x3e8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d022      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a22      	ldr	r2, [pc, #136]	; (8005c0c <HAL_DMA_Abort_IT+0x3ec>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d01d      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a21      	ldr	r2, [pc, #132]	; (8005c10 <HAL_DMA_Abort_IT+0x3f0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d018      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1f      	ldr	r2, [pc, #124]	; (8005c14 <HAL_DMA_Abort_IT+0x3f4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d013      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1e      	ldr	r2, [pc, #120]	; (8005c18 <HAL_DMA_Abort_IT+0x3f8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00e      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a1c      	ldr	r2, [pc, #112]	; (8005c1c <HAL_DMA_Abort_IT+0x3fc>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d009      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a1b      	ldr	r2, [pc, #108]	; (8005c20 <HAL_DMA_Abort_IT+0x400>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d004      	beq.n	8005bc2 <HAL_DMA_Abort_IT+0x3a2>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a19      	ldr	r2, [pc, #100]	; (8005c24 <HAL_DMA_Abort_IT+0x404>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d132      	bne.n	8005c28 <HAL_DMA_Abort_IT+0x408>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e031      	b.n	8005c2a <HAL_DMA_Abort_IT+0x40a>
 8005bc6:	bf00      	nop
 8005bc8:	40020010 	.word	0x40020010
 8005bcc:	40020028 	.word	0x40020028
 8005bd0:	40020040 	.word	0x40020040
 8005bd4:	40020058 	.word	0x40020058
 8005bd8:	40020070 	.word	0x40020070
 8005bdc:	40020088 	.word	0x40020088
 8005be0:	400200a0 	.word	0x400200a0
 8005be4:	400200b8 	.word	0x400200b8
 8005be8:	40020410 	.word	0x40020410
 8005bec:	40020428 	.word	0x40020428
 8005bf0:	40020440 	.word	0x40020440
 8005bf4:	40020458 	.word	0x40020458
 8005bf8:	40020470 	.word	0x40020470
 8005bfc:	40020488 	.word	0x40020488
 8005c00:	400204a0 	.word	0x400204a0
 8005c04:	400204b8 	.word	0x400204b8
 8005c08:	58025408 	.word	0x58025408
 8005c0c:	5802541c 	.word	0x5802541c
 8005c10:	58025430 	.word	0x58025430
 8005c14:	58025444 	.word	0x58025444
 8005c18:	58025458 	.word	0x58025458
 8005c1c:	5802546c 	.word	0x5802546c
 8005c20:	58025480 	.word	0x58025480
 8005c24:	58025494 	.word	0x58025494
 8005c28:	2300      	movs	r3, #0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d028      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c3c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c42:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c5c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00c      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c74:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c7e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop

08005cac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b089      	sub	sp, #36	; 0x24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005cba:	4b89      	ldr	r3, [pc, #548]	; (8005ee0 <HAL_GPIO_Init+0x234>)
 8005cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cbe:	e194      	b.n	8005fea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ccc:	4013      	ands	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 8186 	beq.w	8005fe4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d005      	beq.n	8005cf0 <HAL_GPIO_Init+0x44>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f003 0303 	and.w	r3, r3, #3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d130      	bne.n	8005d52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	2203      	movs	r2, #3
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	43db      	mvns	r3, r3
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	4013      	ands	r3, r2
 8005d06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d26:	2201      	movs	r2, #1
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2e:	43db      	mvns	r3, r3
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	4013      	ands	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	091b      	lsrs	r3, r3, #4
 8005d3c:	f003 0201 	and.w	r2, r3, #1
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	fa02 f303 	lsl.w	r3, r2, r3
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f003 0303 	and.w	r3, r3, #3
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d017      	beq.n	8005d8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	2203      	movs	r2, #3
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	4013      	ands	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d123      	bne.n	8005de2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	08da      	lsrs	r2, r3, #3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3208      	adds	r2, #8
 8005da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	220f      	movs	r2, #15
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43db      	mvns	r3, r3
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	08da      	lsrs	r2, r3, #3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3208      	adds	r2, #8
 8005ddc:	69b9      	ldr	r1, [r7, #24]
 8005dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	2203      	movs	r2, #3
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	43db      	mvns	r3, r3
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	4013      	ands	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f003 0203 	and.w	r2, r3, #3
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 80e0 	beq.w	8005fe4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e24:	4b2f      	ldr	r3, [pc, #188]	; (8005ee4 <HAL_GPIO_Init+0x238>)
 8005e26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e2a:	4a2e      	ldr	r2, [pc, #184]	; (8005ee4 <HAL_GPIO_Init+0x238>)
 8005e2c:	f043 0302 	orr.w	r3, r3, #2
 8005e30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005e34:	4b2b      	ldr	r3, [pc, #172]	; (8005ee4 <HAL_GPIO_Init+0x238>)
 8005e36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e42:	4a29      	ldr	r2, [pc, #164]	; (8005ee8 <HAL_GPIO_Init+0x23c>)
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	089b      	lsrs	r3, r3, #2
 8005e48:	3302      	adds	r3, #2
 8005e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	220f      	movs	r2, #15
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4013      	ands	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a20      	ldr	r2, [pc, #128]	; (8005eec <HAL_GPIO_Init+0x240>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d052      	beq.n	8005f14 <HAL_GPIO_Init+0x268>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a1f      	ldr	r2, [pc, #124]	; (8005ef0 <HAL_GPIO_Init+0x244>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d031      	beq.n	8005eda <HAL_GPIO_Init+0x22e>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a1e      	ldr	r2, [pc, #120]	; (8005ef4 <HAL_GPIO_Init+0x248>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d02b      	beq.n	8005ed6 <HAL_GPIO_Init+0x22a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a1d      	ldr	r2, [pc, #116]	; (8005ef8 <HAL_GPIO_Init+0x24c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d025      	beq.n	8005ed2 <HAL_GPIO_Init+0x226>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a1c      	ldr	r2, [pc, #112]	; (8005efc <HAL_GPIO_Init+0x250>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d01f      	beq.n	8005ece <HAL_GPIO_Init+0x222>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <HAL_GPIO_Init+0x254>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d019      	beq.n	8005eca <HAL_GPIO_Init+0x21e>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a1a      	ldr	r2, [pc, #104]	; (8005f04 <HAL_GPIO_Init+0x258>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d013      	beq.n	8005ec6 <HAL_GPIO_Init+0x21a>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a19      	ldr	r2, [pc, #100]	; (8005f08 <HAL_GPIO_Init+0x25c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00d      	beq.n	8005ec2 <HAL_GPIO_Init+0x216>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a18      	ldr	r2, [pc, #96]	; (8005f0c <HAL_GPIO_Init+0x260>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d007      	beq.n	8005ebe <HAL_GPIO_Init+0x212>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a17      	ldr	r2, [pc, #92]	; (8005f10 <HAL_GPIO_Init+0x264>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d101      	bne.n	8005eba <HAL_GPIO_Init+0x20e>
 8005eb6:	2309      	movs	r3, #9
 8005eb8:	e02d      	b.n	8005f16 <HAL_GPIO_Init+0x26a>
 8005eba:	230a      	movs	r3, #10
 8005ebc:	e02b      	b.n	8005f16 <HAL_GPIO_Init+0x26a>
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	e029      	b.n	8005f16 <HAL_GPIO_Init+0x26a>
 8005ec2:	2307      	movs	r3, #7
 8005ec4:	e027      	b.n	8005f16 <HAL_GPIO_Init+0x26a>
 8005ec6:	2306      	movs	r3, #6
 8005ec8:	e025      	b.n	8005f16 <HAL_GPIO_Init+0x26a>
 8005eca:	2305      	movs	r3, #5
 8005ecc:	e023      	b.n	8005f16 <HAL_GPIO_Init+0x26a>
 8005ece:	2304      	movs	r3, #4
 8005ed0:	e021      	b.n	8005f16 <HAL_GPIO_Init+0x26a>
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e01f      	b.n	8005f16 <HAL_GPIO_Init+0x26a>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e01d      	b.n	8005f16 <HAL_GPIO_Init+0x26a>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e01b      	b.n	8005f16 <HAL_GPIO_Init+0x26a>
 8005ede:	bf00      	nop
 8005ee0:	58000080 	.word	0x58000080
 8005ee4:	58024400 	.word	0x58024400
 8005ee8:	58000400 	.word	0x58000400
 8005eec:	58020000 	.word	0x58020000
 8005ef0:	58020400 	.word	0x58020400
 8005ef4:	58020800 	.word	0x58020800
 8005ef8:	58020c00 	.word	0x58020c00
 8005efc:	58021000 	.word	0x58021000
 8005f00:	58021400 	.word	0x58021400
 8005f04:	58021800 	.word	0x58021800
 8005f08:	58021c00 	.word	0x58021c00
 8005f0c:	58022000 	.word	0x58022000
 8005f10:	58022400 	.word	0x58022400
 8005f14:	2300      	movs	r3, #0
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	f002 0203 	and.w	r2, r2, #3
 8005f1c:	0092      	lsls	r2, r2, #2
 8005f1e:	4093      	lsls	r3, r2
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f26:	4938      	ldr	r1, [pc, #224]	; (8006008 <HAL_GPIO_Init+0x35c>)
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	089b      	lsrs	r3, r3, #2
 8005f2c:	3302      	adds	r3, #2
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	43db      	mvns	r3, r3
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	4013      	ands	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	4013      	ands	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	43db      	mvns	r3, r3
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f47f ae63 	bne.w	8005cc0 <HAL_GPIO_Init+0x14>
  }
}
 8005ffa:	bf00      	nop
 8005ffc:	bf00      	nop
 8005ffe:	3724      	adds	r7, #36	; 0x24
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	58000400 	.word	0x58000400

0800600c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006014:	4a08      	ldr	r2, [pc, #32]	; (8006038 <HAL_HSEM_FastTake+0x2c>)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3320      	adds	r3, #32
 800601a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800601e:	4a07      	ldr	r2, [pc, #28]	; (800603c <HAL_HSEM_FastTake+0x30>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d101      	bne.n	8006028 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	e000      	b.n	800602a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	58026400 	.word	0x58026400
 800603c:	80000300 	.word	0x80000300

08006040 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800604a:	4906      	ldr	r1, [pc, #24]	; (8006064 <HAL_HSEM_Release+0x24>)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	58026400 	.word	0x58026400

08006068 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800606a:	b08f      	sub	sp, #60	; 0x3c
 800606c:	af0a      	add	r7, sp, #40	; 0x28
 800606e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e116      	b.n	80062a8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d106      	bne.n	800609a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7fc ff17 	bl	8002ec8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2203      	movs	r2, #3
 800609e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d102      	bne.n	80060b4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f004 fdbd 	bl	800ac38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	687e      	ldr	r6, [r7, #4]
 80060c6:	466d      	mov	r5, sp
 80060c8:	f106 0410 	add.w	r4, r6, #16
 80060cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80060d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80060dc:	1d33      	adds	r3, r6, #4
 80060de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060e0:	6838      	ldr	r0, [r7, #0]
 80060e2:	f004 fd3b 	bl	800ab5c <USB_CoreInit>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e0d7      	b.n	80062a8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2100      	movs	r1, #0
 80060fe:	4618      	mov	r0, r3
 8006100:	f004 fdab 	bl	800ac5a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006104:	2300      	movs	r3, #0
 8006106:	73fb      	strb	r3, [r7, #15]
 8006108:	e04a      	b.n	80061a0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800610a:	7bfa      	ldrb	r2, [r7, #15]
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	4613      	mov	r3, r2
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	440b      	add	r3, r1
 8006118:	333d      	adds	r3, #61	; 0x3d
 800611a:	2201      	movs	r2, #1
 800611c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800611e:	7bfa      	ldrb	r2, [r7, #15]
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	4613      	mov	r3, r2
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	440b      	add	r3, r1
 800612c:	333c      	adds	r3, #60	; 0x3c
 800612e:	7bfa      	ldrb	r2, [r7, #15]
 8006130:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006132:	7bfa      	ldrb	r2, [r7, #15]
 8006134:	7bfb      	ldrb	r3, [r7, #15]
 8006136:	b298      	uxth	r0, r3
 8006138:	6879      	ldr	r1, [r7, #4]
 800613a:	4613      	mov	r3, r2
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	440b      	add	r3, r1
 8006144:	3344      	adds	r3, #68	; 0x44
 8006146:	4602      	mov	r2, r0
 8006148:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800614a:	7bfa      	ldrb	r2, [r7, #15]
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	4613      	mov	r3, r2
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	440b      	add	r3, r1
 8006158:	3340      	adds	r3, #64	; 0x40
 800615a:	2200      	movs	r2, #0
 800615c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800615e:	7bfa      	ldrb	r2, [r7, #15]
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	4613      	mov	r3, r2
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	440b      	add	r3, r1
 800616c:	3348      	adds	r3, #72	; 0x48
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006172:	7bfa      	ldrb	r2, [r7, #15]
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	334c      	adds	r3, #76	; 0x4c
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006186:	7bfa      	ldrb	r2, [r7, #15]
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	440b      	add	r3, r1
 8006194:	3354      	adds	r3, #84	; 0x54
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	3301      	adds	r3, #1
 800619e:	73fb      	strb	r3, [r7, #15]
 80061a0:	7bfa      	ldrb	r2, [r7, #15]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d3af      	bcc.n	800610a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061aa:	2300      	movs	r3, #0
 80061ac:	73fb      	strb	r3, [r7, #15]
 80061ae:	e044      	b.n	800623a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80061b0:	7bfa      	ldrb	r2, [r7, #15]
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	4413      	add	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	440b      	add	r3, r1
 80061be:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80061c2:	2200      	movs	r2, #0
 80061c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80061c6:	7bfa      	ldrb	r2, [r7, #15]
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80061d8:	7bfa      	ldrb	r2, [r7, #15]
 80061da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80061dc:	7bfa      	ldrb	r2, [r7, #15]
 80061de:	6879      	ldr	r1, [r7, #4]
 80061e0:	4613      	mov	r3, r2
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	4413      	add	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	440b      	add	r3, r1
 80061ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80061ee:	2200      	movs	r2, #0
 80061f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80061f2:	7bfa      	ldrb	r2, [r7, #15]
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	440b      	add	r3, r1
 8006200:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006204:	2200      	movs	r2, #0
 8006206:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006208:	7bfa      	ldrb	r2, [r7, #15]
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	440b      	add	r3, r1
 8006216:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800621e:	7bfa      	ldrb	r2, [r7, #15]
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	4613      	mov	r3, r2
 8006224:	00db      	lsls	r3, r3, #3
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	440b      	add	r3, r1
 800622c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006234:	7bfb      	ldrb	r3, [r7, #15]
 8006236:	3301      	adds	r3, #1
 8006238:	73fb      	strb	r3, [r7, #15]
 800623a:	7bfa      	ldrb	r2, [r7, #15]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	429a      	cmp	r2, r3
 8006242:	d3b5      	bcc.n	80061b0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	603b      	str	r3, [r7, #0]
 800624a:	687e      	ldr	r6, [r7, #4]
 800624c:	466d      	mov	r5, sp
 800624e:	f106 0410 	add.w	r4, r6, #16
 8006252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800625a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800625e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006262:	1d33      	adds	r3, r6, #4
 8006264:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006266:	6838      	ldr	r0, [r7, #0]
 8006268:	f004 fd44 	bl	800acf4 <USB_DevInit>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d005      	beq.n	800627e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e014      	b.n	80062a8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	2b01      	cmp	r3, #1
 8006294:	d102      	bne.n	800629c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f80a 	bl	80062b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f004 ff02 	bl	800b0aa <USB_DevDisconnect>

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062de:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	10000003 	.word	0x10000003

080062f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006300:	4b29      	ldr	r3, [pc, #164]	; (80063a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	2b06      	cmp	r3, #6
 800630a:	d00a      	beq.n	8006322 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800630c:	4b26      	ldr	r3, [pc, #152]	; (80063a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	429a      	cmp	r2, r3
 8006318:	d001      	beq.n	800631e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e040      	b.n	80063a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	e03e      	b.n	80063a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006322:	4b21      	ldr	r3, [pc, #132]	; (80063a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800632a:	491f      	ldr	r1, [pc, #124]	; (80063a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4313      	orrs	r3, r2
 8006330:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006332:	f7fe fe3b 	bl	8004fac <HAL_GetTick>
 8006336:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006338:	e009      	b.n	800634e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800633a:	f7fe fe37 	bl	8004fac <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006348:	d901      	bls.n	800634e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e028      	b.n	80063a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800634e:	4b16      	ldr	r3, [pc, #88]	; (80063a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635a:	d1ee      	bne.n	800633a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b1e      	cmp	r3, #30
 8006360:	d008      	beq.n	8006374 <HAL_PWREx_ConfigSupply+0x7c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b2e      	cmp	r3, #46	; 0x2e
 8006366:	d005      	beq.n	8006374 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b1d      	cmp	r3, #29
 800636c:	d002      	beq.n	8006374 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b2d      	cmp	r3, #45	; 0x2d
 8006372:	d114      	bne.n	800639e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006374:	f7fe fe1a 	bl	8004fac <HAL_GetTick>
 8006378:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800637a:	e009      	b.n	8006390 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800637c:	f7fe fe16 	bl	8004fac <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800638a:	d901      	bls.n	8006390 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e007      	b.n	80063a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006390:	4b05      	ldr	r3, [pc, #20]	; (80063a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800639c:	d1ee      	bne.n	800637c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	58024800 	.word	0x58024800

080063ac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80063b0:	4b05      	ldr	r3, [pc, #20]	; (80063c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	4a04      	ldr	r2, [pc, #16]	; (80063c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80063b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063ba:	60d3      	str	r3, [r2, #12]
}
 80063bc:	bf00      	nop
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	58024800 	.word	0x58024800

080063cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08c      	sub	sp, #48	; 0x30
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d102      	bne.n	80063e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f000 bc1d 	b.w	8006c1a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 8087 	beq.w	80064fc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ee:	4b99      	ldr	r3, [pc, #612]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063f8:	4b96      	ldr	r3, [pc, #600]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80063fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006400:	2b10      	cmp	r3, #16
 8006402:	d007      	beq.n	8006414 <HAL_RCC_OscConfig+0x48>
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	2b18      	cmp	r3, #24
 8006408:	d110      	bne.n	800642c <HAL_RCC_OscConfig+0x60>
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	f003 0303 	and.w	r3, r3, #3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d10b      	bne.n	800642c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006414:	4b8f      	ldr	r3, [pc, #572]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d06c      	beq.n	80064fa <HAL_RCC_OscConfig+0x12e>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d168      	bne.n	80064fa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e3f6      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006434:	d106      	bne.n	8006444 <HAL_RCC_OscConfig+0x78>
 8006436:	4b87      	ldr	r3, [pc, #540]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a86      	ldr	r2, [pc, #536]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 800643c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	e02e      	b.n	80064a2 <HAL_RCC_OscConfig+0xd6>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10c      	bne.n	8006466 <HAL_RCC_OscConfig+0x9a>
 800644c:	4b81      	ldr	r3, [pc, #516]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a80      	ldr	r2, [pc, #512]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 8006452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	4b7e      	ldr	r3, [pc, #504]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a7d      	ldr	r2, [pc, #500]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 800645e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	e01d      	b.n	80064a2 <HAL_RCC_OscConfig+0xd6>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800646e:	d10c      	bne.n	800648a <HAL_RCC_OscConfig+0xbe>
 8006470:	4b78      	ldr	r3, [pc, #480]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a77      	ldr	r2, [pc, #476]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 8006476:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	4b75      	ldr	r3, [pc, #468]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a74      	ldr	r2, [pc, #464]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 8006482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	e00b      	b.n	80064a2 <HAL_RCC_OscConfig+0xd6>
 800648a:	4b72      	ldr	r3, [pc, #456]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a71      	ldr	r2, [pc, #452]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 8006490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	4b6f      	ldr	r3, [pc, #444]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a6e      	ldr	r2, [pc, #440]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 800649c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d013      	beq.n	80064d2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064aa:	f7fe fd7f 	bl	8004fac <HAL_GetTick>
 80064ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064b0:	e008      	b.n	80064c4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064b2:	f7fe fd7b 	bl	8004fac <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b64      	cmp	r3, #100	; 0x64
 80064be:	d901      	bls.n	80064c4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e3aa      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064c4:	4b63      	ldr	r3, [pc, #396]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0f0      	beq.n	80064b2 <HAL_RCC_OscConfig+0xe6>
 80064d0:	e014      	b.n	80064fc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d2:	f7fe fd6b 	bl	8004fac <HAL_GetTick>
 80064d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064d8:	e008      	b.n	80064ec <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064da:	f7fe fd67 	bl	8004fac <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b64      	cmp	r3, #100	; 0x64
 80064e6:	d901      	bls.n	80064ec <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e396      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064ec:	4b59      	ldr	r3, [pc, #356]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1f0      	bne.n	80064da <HAL_RCC_OscConfig+0x10e>
 80064f8:	e000      	b.n	80064fc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 80cb 	beq.w	80066a0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800650a:	4b52      	ldr	r3, [pc, #328]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006512:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006514:	4b4f      	ldr	r3, [pc, #316]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 8006516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006518:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <HAL_RCC_OscConfig+0x164>
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	2b18      	cmp	r3, #24
 8006524:	d156      	bne.n	80065d4 <HAL_RCC_OscConfig+0x208>
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	f003 0303 	and.w	r3, r3, #3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d151      	bne.n	80065d4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006530:	4b48      	ldr	r3, [pc, #288]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_RCC_OscConfig+0x17c>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e368      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006548:	4b42      	ldr	r3, [pc, #264]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f023 0219 	bic.w	r2, r3, #25
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	493f      	ldr	r1, [pc, #252]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 8006556:	4313      	orrs	r3, r2
 8006558:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800655a:	f7fe fd27 	bl	8004fac <HAL_GetTick>
 800655e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006560:	e008      	b.n	8006574 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006562:	f7fe fd23 	bl	8004fac <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d901      	bls.n	8006574 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e352      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006574:	4b37      	ldr	r3, [pc, #220]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0f0      	beq.n	8006562 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006580:	f7fe fd44 	bl	800500c <HAL_GetREVID>
 8006584:	4603      	mov	r3, r0
 8006586:	f241 0203 	movw	r2, #4099	; 0x1003
 800658a:	4293      	cmp	r3, r2
 800658c:	d817      	bhi.n	80065be <HAL_RCC_OscConfig+0x1f2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b40      	cmp	r3, #64	; 0x40
 8006594:	d108      	bne.n	80065a8 <HAL_RCC_OscConfig+0x1dc>
 8006596:	4b2f      	ldr	r3, [pc, #188]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800659e:	4a2d      	ldr	r2, [pc, #180]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 80065a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065a6:	e07b      	b.n	80066a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065a8:	4b2a      	ldr	r3, [pc, #168]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	031b      	lsls	r3, r3, #12
 80065b6:	4927      	ldr	r1, [pc, #156]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065bc:	e070      	b.n	80066a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065be:	4b25      	ldr	r3, [pc, #148]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	061b      	lsls	r3, r3, #24
 80065cc:	4921      	ldr	r1, [pc, #132]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065d2:	e065      	b.n	80066a0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d048      	beq.n	800666e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065dc:	4b1d      	ldr	r3, [pc, #116]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f023 0219 	bic.w	r2, r3, #25
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	491a      	ldr	r1, [pc, #104]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ee:	f7fe fcdd 	bl	8004fac <HAL_GetTick>
 80065f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065f4:	e008      	b.n	8006608 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065f6:	f7fe fcd9 	bl	8004fac <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e308      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006608:	4b12      	ldr	r3, [pc, #72]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0f0      	beq.n	80065f6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006614:	f7fe fcfa 	bl	800500c <HAL_GetREVID>
 8006618:	4603      	mov	r3, r0
 800661a:	f241 0203 	movw	r2, #4099	; 0x1003
 800661e:	4293      	cmp	r3, r2
 8006620:	d81a      	bhi.n	8006658 <HAL_RCC_OscConfig+0x28c>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b40      	cmp	r3, #64	; 0x40
 8006628:	d108      	bne.n	800663c <HAL_RCC_OscConfig+0x270>
 800662a:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006632:	4a08      	ldr	r2, [pc, #32]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 8006634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006638:	6053      	str	r3, [r2, #4]
 800663a:	e031      	b.n	80066a0 <HAL_RCC_OscConfig+0x2d4>
 800663c:	4b05      	ldr	r3, [pc, #20]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	031b      	lsls	r3, r3, #12
 800664a:	4902      	ldr	r1, [pc, #8]	; (8006654 <HAL_RCC_OscConfig+0x288>)
 800664c:	4313      	orrs	r3, r2
 800664e:	604b      	str	r3, [r1, #4]
 8006650:	e026      	b.n	80066a0 <HAL_RCC_OscConfig+0x2d4>
 8006652:	bf00      	nop
 8006654:	58024400 	.word	0x58024400
 8006658:	4b9a      	ldr	r3, [pc, #616]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	061b      	lsls	r3, r3, #24
 8006666:	4997      	ldr	r1, [pc, #604]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 8006668:	4313      	orrs	r3, r2
 800666a:	604b      	str	r3, [r1, #4]
 800666c:	e018      	b.n	80066a0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800666e:	4b95      	ldr	r3, [pc, #596]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a94      	ldr	r2, [pc, #592]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 8006674:	f023 0301 	bic.w	r3, r3, #1
 8006678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667a:	f7fe fc97 	bl	8004fac <HAL_GetTick>
 800667e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006680:	e008      	b.n	8006694 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006682:	f7fe fc93 	bl	8004fac <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e2c2      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006694:	4b8b      	ldr	r3, [pc, #556]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1f0      	bne.n	8006682 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 80a9 	beq.w	8006800 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066ae:	4b85      	ldr	r3, [pc, #532]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066b8:	4b82      	ldr	r3, [pc, #520]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 80066ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066bc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d007      	beq.n	80066d4 <HAL_RCC_OscConfig+0x308>
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	2b18      	cmp	r3, #24
 80066c8:	d13a      	bne.n	8006740 <HAL_RCC_OscConfig+0x374>
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d135      	bne.n	8006740 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066d4:	4b7b      	ldr	r3, [pc, #492]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d005      	beq.n	80066ec <HAL_RCC_OscConfig+0x320>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	2b80      	cmp	r3, #128	; 0x80
 80066e6:	d001      	beq.n	80066ec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e296      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066ec:	f7fe fc8e 	bl	800500c <HAL_GetREVID>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d817      	bhi.n	800672a <HAL_RCC_OscConfig+0x35e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d108      	bne.n	8006714 <HAL_RCC_OscConfig+0x348>
 8006702:	4b70      	ldr	r3, [pc, #448]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800670a:	4a6e      	ldr	r2, [pc, #440]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 800670c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006710:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006712:	e075      	b.n	8006800 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006714:	4b6b      	ldr	r3, [pc, #428]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	069b      	lsls	r3, r3, #26
 8006722:	4968      	ldr	r1, [pc, #416]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 8006724:	4313      	orrs	r3, r2
 8006726:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006728:	e06a      	b.n	8006800 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800672a:	4b66      	ldr	r3, [pc, #408]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	061b      	lsls	r3, r3, #24
 8006738:	4962      	ldr	r1, [pc, #392]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 800673a:	4313      	orrs	r3, r2
 800673c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800673e:	e05f      	b.n	8006800 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d042      	beq.n	80067ce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006748:	4b5e      	ldr	r3, [pc, #376]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a5d      	ldr	r2, [pc, #372]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 800674e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006754:	f7fe fc2a 	bl	8004fac <HAL_GetTick>
 8006758:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800675c:	f7fe fc26 	bl	8004fac <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b02      	cmp	r3, #2
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e255      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800676e:	4b55      	ldr	r3, [pc, #340]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0f0      	beq.n	800675c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800677a:	f7fe fc47 	bl	800500c <HAL_GetREVID>
 800677e:	4603      	mov	r3, r0
 8006780:	f241 0203 	movw	r2, #4099	; 0x1003
 8006784:	4293      	cmp	r3, r2
 8006786:	d817      	bhi.n	80067b8 <HAL_RCC_OscConfig+0x3ec>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	2b20      	cmp	r3, #32
 800678e:	d108      	bne.n	80067a2 <HAL_RCC_OscConfig+0x3d6>
 8006790:	4b4c      	ldr	r3, [pc, #304]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006798:	4a4a      	ldr	r2, [pc, #296]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 800679a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800679e:	6053      	str	r3, [r2, #4]
 80067a0:	e02e      	b.n	8006800 <HAL_RCC_OscConfig+0x434>
 80067a2:	4b48      	ldr	r3, [pc, #288]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	069b      	lsls	r3, r3, #26
 80067b0:	4944      	ldr	r1, [pc, #272]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	604b      	str	r3, [r1, #4]
 80067b6:	e023      	b.n	8006800 <HAL_RCC_OscConfig+0x434>
 80067b8:	4b42      	ldr	r3, [pc, #264]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	061b      	lsls	r3, r3, #24
 80067c6:	493f      	ldr	r1, [pc, #252]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60cb      	str	r3, [r1, #12]
 80067cc:	e018      	b.n	8006800 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80067ce:	4b3d      	ldr	r3, [pc, #244]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a3c      	ldr	r2, [pc, #240]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 80067d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067da:	f7fe fbe7 	bl	8004fac <HAL_GetTick>
 80067de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067e0:	e008      	b.n	80067f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80067e2:	f7fe fbe3 	bl	8004fac <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d901      	bls.n	80067f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e212      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067f4:	4b33      	ldr	r3, [pc, #204]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1f0      	bne.n	80067e2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0308 	and.w	r3, r3, #8
 8006808:	2b00      	cmp	r3, #0
 800680a:	d036      	beq.n	800687a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d019      	beq.n	8006848 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006814:	4b2b      	ldr	r3, [pc, #172]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 8006816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006818:	4a2a      	ldr	r2, [pc, #168]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 800681a:	f043 0301 	orr.w	r3, r3, #1
 800681e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006820:	f7fe fbc4 	bl	8004fac <HAL_GetTick>
 8006824:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006828:	f7fe fbc0 	bl	8004fac <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e1ef      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800683a:	4b22      	ldr	r3, [pc, #136]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 800683c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0f0      	beq.n	8006828 <HAL_RCC_OscConfig+0x45c>
 8006846:	e018      	b.n	800687a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006848:	4b1e      	ldr	r3, [pc, #120]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 800684a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800684c:	4a1d      	ldr	r2, [pc, #116]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 800684e:	f023 0301 	bic.w	r3, r3, #1
 8006852:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006854:	f7fe fbaa 	bl	8004fac <HAL_GetTick>
 8006858:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800685c:	f7fe fba6 	bl	8004fac <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e1d5      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800686e:	4b15      	ldr	r3, [pc, #84]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 8006870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f0      	bne.n	800685c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b00      	cmp	r3, #0
 8006884:	d039      	beq.n	80068fa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d01c      	beq.n	80068c8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800688e:	4b0d      	ldr	r3, [pc, #52]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a0c      	ldr	r2, [pc, #48]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 8006894:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006898:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800689a:	f7fe fb87 	bl	8004fac <HAL_GetTick>
 800689e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068a0:	e008      	b.n	80068b4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80068a2:	f7fe fb83 	bl	8004fac <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e1b2      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068b4:	4b03      	ldr	r3, [pc, #12]	; (80068c4 <HAL_RCC_OscConfig+0x4f8>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <HAL_RCC_OscConfig+0x4d6>
 80068c0:	e01b      	b.n	80068fa <HAL_RCC_OscConfig+0x52e>
 80068c2:	bf00      	nop
 80068c4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068c8:	4b9b      	ldr	r3, [pc, #620]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a9a      	ldr	r2, [pc, #616]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 80068ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068d4:	f7fe fb6a 	bl	8004fac <HAL_GetTick>
 80068d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80068dc:	f7fe fb66 	bl	8004fac <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e195      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068ee:	4b92      	ldr	r3, [pc, #584]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f0      	bne.n	80068dc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 8081 	beq.w	8006a0a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006908:	4b8c      	ldr	r3, [pc, #560]	; (8006b3c <HAL_RCC_OscConfig+0x770>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a8b      	ldr	r2, [pc, #556]	; (8006b3c <HAL_RCC_OscConfig+0x770>)
 800690e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006912:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006914:	f7fe fb4a 	bl	8004fac <HAL_GetTick>
 8006918:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800691a:	e008      	b.n	800692e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800691c:	f7fe fb46 	bl	8004fac <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b64      	cmp	r3, #100	; 0x64
 8006928:	d901      	bls.n	800692e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e175      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800692e:	4b83      	ldr	r3, [pc, #524]	; (8006b3c <HAL_RCC_OscConfig+0x770>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0f0      	beq.n	800691c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d106      	bne.n	8006950 <HAL_RCC_OscConfig+0x584>
 8006942:	4b7d      	ldr	r3, [pc, #500]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006946:	4a7c      	ldr	r2, [pc, #496]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006948:	f043 0301 	orr.w	r3, r3, #1
 800694c:	6713      	str	r3, [r2, #112]	; 0x70
 800694e:	e02d      	b.n	80069ac <HAL_RCC_OscConfig+0x5e0>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10c      	bne.n	8006972 <HAL_RCC_OscConfig+0x5a6>
 8006958:	4b77      	ldr	r3, [pc, #476]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 800695a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695c:	4a76      	ldr	r2, [pc, #472]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 800695e:	f023 0301 	bic.w	r3, r3, #1
 8006962:	6713      	str	r3, [r2, #112]	; 0x70
 8006964:	4b74      	ldr	r3, [pc, #464]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006968:	4a73      	ldr	r2, [pc, #460]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 800696a:	f023 0304 	bic.w	r3, r3, #4
 800696e:	6713      	str	r3, [r2, #112]	; 0x70
 8006970:	e01c      	b.n	80069ac <HAL_RCC_OscConfig+0x5e0>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	2b05      	cmp	r3, #5
 8006978:	d10c      	bne.n	8006994 <HAL_RCC_OscConfig+0x5c8>
 800697a:	4b6f      	ldr	r3, [pc, #444]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 800697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697e:	4a6e      	ldr	r2, [pc, #440]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006980:	f043 0304 	orr.w	r3, r3, #4
 8006984:	6713      	str	r3, [r2, #112]	; 0x70
 8006986:	4b6c      	ldr	r3, [pc, #432]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698a:	4a6b      	ldr	r2, [pc, #428]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 800698c:	f043 0301 	orr.w	r3, r3, #1
 8006990:	6713      	str	r3, [r2, #112]	; 0x70
 8006992:	e00b      	b.n	80069ac <HAL_RCC_OscConfig+0x5e0>
 8006994:	4b68      	ldr	r3, [pc, #416]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006998:	4a67      	ldr	r2, [pc, #412]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 800699a:	f023 0301 	bic.w	r3, r3, #1
 800699e:	6713      	str	r3, [r2, #112]	; 0x70
 80069a0:	4b65      	ldr	r3, [pc, #404]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 80069a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a4:	4a64      	ldr	r2, [pc, #400]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 80069a6:	f023 0304 	bic.w	r3, r3, #4
 80069aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d015      	beq.n	80069e0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b4:	f7fe fafa 	bl	8004fac <HAL_GetTick>
 80069b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069ba:	e00a      	b.n	80069d2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069bc:	f7fe faf6 	bl	8004fac <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e123      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069d2:	4b59      	ldr	r3, [pc, #356]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0ee      	beq.n	80069bc <HAL_RCC_OscConfig+0x5f0>
 80069de:	e014      	b.n	8006a0a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e0:	f7fe fae4 	bl	8004fac <HAL_GetTick>
 80069e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069e6:	e00a      	b.n	80069fe <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069e8:	f7fe fae0 	bl	8004fac <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e10d      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069fe:	4b4e      	ldr	r3, [pc, #312]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1ee      	bne.n	80069e8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 8102 	beq.w	8006c18 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a14:	4b48      	ldr	r3, [pc, #288]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a1c:	2b18      	cmp	r3, #24
 8006a1e:	f000 80bd 	beq.w	8006b9c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	f040 809e 	bne.w	8006b68 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a2c:	4b42      	ldr	r3, [pc, #264]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a41      	ldr	r2, [pc, #260]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a38:	f7fe fab8 	bl	8004fac <HAL_GetTick>
 8006a3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a40:	f7fe fab4 	bl	8004fac <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e0e3      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a52:	4b39      	ldr	r3, [pc, #228]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f0      	bne.n	8006a40 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a5e:	4b36      	ldr	r3, [pc, #216]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a62:	4b37      	ldr	r3, [pc, #220]	; (8006b40 <HAL_RCC_OscConfig+0x774>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a6e:	0112      	lsls	r2, r2, #4
 8006a70:	430a      	orrs	r2, r1
 8006a72:	4931      	ldr	r1, [pc, #196]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	628b      	str	r3, [r1, #40]	; 0x28
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a86:	3b01      	subs	r3, #1
 8006a88:	025b      	lsls	r3, r3, #9
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	3b01      	subs	r3, #1
 8006a94:	041b      	lsls	r3, r3, #16
 8006a96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	061b      	lsls	r3, r3, #24
 8006aa4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006aa8:	4923      	ldr	r1, [pc, #140]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006aae:	4b22      	ldr	r3, [pc, #136]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab2:	4a21      	ldr	r2, [pc, #132]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006aba:	4b1f      	ldr	r3, [pc, #124]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006abe:	4b21      	ldr	r3, [pc, #132]	; (8006b44 <HAL_RCC_OscConfig+0x778>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ac6:	00d2      	lsls	r2, r2, #3
 8006ac8:	491b      	ldr	r1, [pc, #108]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ace:	4b1a      	ldr	r3, [pc, #104]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	f023 020c 	bic.w	r2, r3, #12
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	4917      	ldr	r1, [pc, #92]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ae0:	4b15      	ldr	r3, [pc, #84]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	f023 0202 	bic.w	r2, r3, #2
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aec:	4912      	ldr	r1, [pc, #72]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006af2:	4b11      	ldr	r3, [pc, #68]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	4a10      	ldr	r2, [pc, #64]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006afc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006afe:	4b0e      	ldr	r3, [pc, #56]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b02:	4a0d      	ldr	r2, [pc, #52]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b0a:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	4a0a      	ldr	r2, [pc, #40]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006b16:	4b08      	ldr	r3, [pc, #32]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1a:	4a07      	ldr	r2, [pc, #28]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006b1c:	f043 0301 	orr.w	r3, r3, #1
 8006b20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b22:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a04      	ldr	r2, [pc, #16]	; (8006b38 <HAL_RCC_OscConfig+0x76c>)
 8006b28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b2e:	f7fe fa3d 	bl	8004fac <HAL_GetTick>
 8006b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b34:	e011      	b.n	8006b5a <HAL_RCC_OscConfig+0x78e>
 8006b36:	bf00      	nop
 8006b38:	58024400 	.word	0x58024400
 8006b3c:	58024800 	.word	0x58024800
 8006b40:	fffffc0c 	.word	0xfffffc0c
 8006b44:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b48:	f7fe fa30 	bl	8004fac <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e05f      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b5a:	4b32      	ldr	r3, [pc, #200]	; (8006c24 <HAL_RCC_OscConfig+0x858>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0f0      	beq.n	8006b48 <HAL_RCC_OscConfig+0x77c>
 8006b66:	e057      	b.n	8006c18 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b68:	4b2e      	ldr	r3, [pc, #184]	; (8006c24 <HAL_RCC_OscConfig+0x858>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a2d      	ldr	r2, [pc, #180]	; (8006c24 <HAL_RCC_OscConfig+0x858>)
 8006b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b74:	f7fe fa1a 	bl	8004fac <HAL_GetTick>
 8006b78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b7c:	f7fe fa16 	bl	8004fac <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e045      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b8e:	4b25      	ldr	r3, [pc, #148]	; (8006c24 <HAL_RCC_OscConfig+0x858>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1f0      	bne.n	8006b7c <HAL_RCC_OscConfig+0x7b0>
 8006b9a:	e03d      	b.n	8006c18 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b9c:	4b21      	ldr	r3, [pc, #132]	; (8006c24 <HAL_RCC_OscConfig+0x858>)
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006ba2:	4b20      	ldr	r3, [pc, #128]	; (8006c24 <HAL_RCC_OscConfig+0x858>)
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d031      	beq.n	8006c14 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f003 0203 	and.w	r2, r3, #3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d12a      	bne.n	8006c14 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	091b      	lsrs	r3, r3, #4
 8006bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d122      	bne.n	8006c14 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d11a      	bne.n	8006c14 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	0a5b      	lsrs	r3, r3, #9
 8006be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d111      	bne.n	8006c14 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	0c1b      	lsrs	r3, r3, #16
 8006bf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d108      	bne.n	8006c14 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	0e1b      	lsrs	r3, r3, #24
 8006c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d001      	beq.n	8006c18 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e000      	b.n	8006c1a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3730      	adds	r7, #48	; 0x30
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	58024400 	.word	0x58024400

08006c28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e19c      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c3c:	4b8a      	ldr	r3, [pc, #552]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d910      	bls.n	8006c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c4a:	4b87      	ldr	r3, [pc, #540]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f023 020f 	bic.w	r2, r3, #15
 8006c52:	4985      	ldr	r1, [pc, #532]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c5a:	4b83      	ldr	r3, [pc, #524]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 030f 	and.w	r3, r3, #15
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d001      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e184      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d010      	beq.n	8006c9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691a      	ldr	r2, [r3, #16]
 8006c7c:	4b7b      	ldr	r3, [pc, #492]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d908      	bls.n	8006c9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c88:	4b78      	ldr	r3, [pc, #480]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	4975      	ldr	r1, [pc, #468]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d010      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	4b70      	ldr	r3, [pc, #448]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d908      	bls.n	8006cc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cb6:	4b6d      	ldr	r3, [pc, #436]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	496a      	ldr	r1, [pc, #424]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0310 	and.w	r3, r3, #16
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d010      	beq.n	8006cf6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	4b64      	ldr	r3, [pc, #400]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d908      	bls.n	8006cf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ce4:	4b61      	ldr	r3, [pc, #388]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	495e      	ldr	r1, [pc, #376]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d010      	beq.n	8006d24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69da      	ldr	r2, [r3, #28]
 8006d06:	4b59      	ldr	r3, [pc, #356]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d908      	bls.n	8006d24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006d12:	4b56      	ldr	r3, [pc, #344]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	4953      	ldr	r1, [pc, #332]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d010      	beq.n	8006d52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	4b4d      	ldr	r3, [pc, #308]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d908      	bls.n	8006d52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d40:	4b4a      	ldr	r3, [pc, #296]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f023 020f 	bic.w	r2, r3, #15
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	4947      	ldr	r1, [pc, #284]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d055      	beq.n	8006e0a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d5e:	4b43      	ldr	r3, [pc, #268]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	4940      	ldr	r1, [pc, #256]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d107      	bne.n	8006d88 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d78:	4b3c      	ldr	r3, [pc, #240]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d121      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e0f6      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d107      	bne.n	8006da0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d90:	4b36      	ldr	r3, [pc, #216]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d115      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e0ea      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d107      	bne.n	8006db8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006da8:	4b30      	ldr	r3, [pc, #192]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d109      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e0de      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006db8:	4b2c      	ldr	r3, [pc, #176]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e0d6      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dc8:	4b28      	ldr	r3, [pc, #160]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f023 0207 	bic.w	r2, r3, #7
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	4925      	ldr	r1, [pc, #148]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dda:	f7fe f8e7 	bl	8004fac <HAL_GetTick>
 8006dde:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de0:	e00a      	b.n	8006df8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006de2:	f7fe f8e3 	bl	8004fac <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e0be      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006df8:	4b1c      	ldr	r3, [pc, #112]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d1eb      	bne.n	8006de2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d010      	beq.n	8006e38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d208      	bcs.n	8006e38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e26:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	f023 020f 	bic.w	r2, r3, #15
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	490e      	ldr	r1, [pc, #56]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e38:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d214      	bcs.n	8006e70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e46:	4b08      	ldr	r3, [pc, #32]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f023 020f 	bic.w	r2, r3, #15
 8006e4e:	4906      	ldr	r1, [pc, #24]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e56:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d005      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e086      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
 8006e68:	52002000 	.word	0x52002000
 8006e6c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d010      	beq.n	8006e9e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	4b3f      	ldr	r3, [pc, #252]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d208      	bcs.n	8006e9e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e8c:	4b3c      	ldr	r3, [pc, #240]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	4939      	ldr	r1, [pc, #228]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d010      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695a      	ldr	r2, [r3, #20]
 8006eae:	4b34      	ldr	r3, [pc, #208]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d208      	bcs.n	8006ecc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006eba:	4b31      	ldr	r3, [pc, #196]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	492e      	ldr	r1, [pc, #184]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d010      	beq.n	8006efa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699a      	ldr	r2, [r3, #24]
 8006edc:	4b28      	ldr	r3, [pc, #160]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d208      	bcs.n	8006efa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ee8:	4b25      	ldr	r3, [pc, #148]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	4922      	ldr	r1, [pc, #136]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d010      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69da      	ldr	r2, [r3, #28]
 8006f0a:	4b1d      	ldr	r3, [pc, #116]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d208      	bcs.n	8006f28 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006f16:	4b1a      	ldr	r3, [pc, #104]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	4917      	ldr	r1, [pc, #92]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f28:	f000 f834 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	4b14      	ldr	r3, [pc, #80]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	0a1b      	lsrs	r3, r3, #8
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	4912      	ldr	r1, [pc, #72]	; (8006f84 <HAL_RCC_ClockConfig+0x35c>)
 8006f3a:	5ccb      	ldrb	r3, [r1, r3]
 8006f3c:	f003 031f 	and.w	r3, r3, #31
 8006f40:	fa22 f303 	lsr.w	r3, r2, r3
 8006f44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f46:	4b0e      	ldr	r3, [pc, #56]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	4a0d      	ldr	r2, [pc, #52]	; (8006f84 <HAL_RCC_ClockConfig+0x35c>)
 8006f50:	5cd3      	ldrb	r3, [r2, r3]
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5c:	4a0a      	ldr	r2, [pc, #40]	; (8006f88 <HAL_RCC_ClockConfig+0x360>)
 8006f5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f60:	4a0a      	ldr	r2, [pc, #40]	; (8006f8c <HAL_RCC_ClockConfig+0x364>)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006f66:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <HAL_RCC_ClockConfig+0x368>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fb fd5a 	bl	8002a24 <HAL_InitTick>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	58024400 	.word	0x58024400
 8006f84:	0801232c 	.word	0x0801232c
 8006f88:	24000004 	.word	0x24000004
 8006f8c:	24000000 	.word	0x24000000
 8006f90:	24000008 	.word	0x24000008

08006f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b089      	sub	sp, #36	; 0x24
 8006f98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f9a:	4bb3      	ldr	r3, [pc, #716]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fa2:	2b18      	cmp	r3, #24
 8006fa4:	f200 8155 	bhi.w	8007252 <HAL_RCC_GetSysClockFreq+0x2be>
 8006fa8:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	08007015 	.word	0x08007015
 8006fb4:	08007253 	.word	0x08007253
 8006fb8:	08007253 	.word	0x08007253
 8006fbc:	08007253 	.word	0x08007253
 8006fc0:	08007253 	.word	0x08007253
 8006fc4:	08007253 	.word	0x08007253
 8006fc8:	08007253 	.word	0x08007253
 8006fcc:	08007253 	.word	0x08007253
 8006fd0:	0800703b 	.word	0x0800703b
 8006fd4:	08007253 	.word	0x08007253
 8006fd8:	08007253 	.word	0x08007253
 8006fdc:	08007253 	.word	0x08007253
 8006fe0:	08007253 	.word	0x08007253
 8006fe4:	08007253 	.word	0x08007253
 8006fe8:	08007253 	.word	0x08007253
 8006fec:	08007253 	.word	0x08007253
 8006ff0:	08007041 	.word	0x08007041
 8006ff4:	08007253 	.word	0x08007253
 8006ff8:	08007253 	.word	0x08007253
 8006ffc:	08007253 	.word	0x08007253
 8007000:	08007253 	.word	0x08007253
 8007004:	08007253 	.word	0x08007253
 8007008:	08007253 	.word	0x08007253
 800700c:	08007253 	.word	0x08007253
 8007010:	08007047 	.word	0x08007047
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007014:	4b94      	ldr	r3, [pc, #592]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0320 	and.w	r3, r3, #32
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007020:	4b91      	ldr	r3, [pc, #580]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	08db      	lsrs	r3, r3, #3
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	4a90      	ldr	r2, [pc, #576]	; (800726c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800702c:	fa22 f303 	lsr.w	r3, r2, r3
 8007030:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007032:	e111      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007034:	4b8d      	ldr	r3, [pc, #564]	; (800726c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007036:	61bb      	str	r3, [r7, #24]
    break;
 8007038:	e10e      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800703a:	4b8d      	ldr	r3, [pc, #564]	; (8007270 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800703c:	61bb      	str	r3, [r7, #24]
    break;
 800703e:	e10b      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007040:	4b8c      	ldr	r3, [pc, #560]	; (8007274 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007042:	61bb      	str	r3, [r7, #24]
    break;
 8007044:	e108      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007046:	4b88      	ldr	r3, [pc, #544]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007050:	4b85      	ldr	r3, [pc, #532]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007054:	091b      	lsrs	r3, r3, #4
 8007056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800705a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800705c:	4b82      	ldr	r3, [pc, #520]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007066:	4b80      	ldr	r3, [pc, #512]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706a:	08db      	lsrs	r3, r3, #3
 800706c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	fb02 f303 	mul.w	r3, r2, r3
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 80e1 	beq.w	800724c <HAL_RCC_GetSysClockFreq+0x2b8>
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b02      	cmp	r3, #2
 800708e:	f000 8083 	beq.w	8007198 <HAL_RCC_GetSysClockFreq+0x204>
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b02      	cmp	r3, #2
 8007096:	f200 80a1 	bhi.w	80071dc <HAL_RCC_GetSysClockFreq+0x248>
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <HAL_RCC_GetSysClockFreq+0x114>
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d056      	beq.n	8007154 <HAL_RCC_GetSysClockFreq+0x1c0>
 80070a6:	e099      	b.n	80071dc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070a8:	4b6f      	ldr	r3, [pc, #444]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d02d      	beq.n	8007110 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070b4:	4b6c      	ldr	r3, [pc, #432]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	08db      	lsrs	r3, r3, #3
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	4a6b      	ldr	r2, [pc, #428]	; (800726c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070c0:	fa22 f303 	lsr.w	r3, r2, r3
 80070c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	ee07 3a90 	vmov	s15, r3
 80070cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070de:	4b62      	ldr	r3, [pc, #392]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80070f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800710e:	e087      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800727c <HAL_RCC_GetSysClockFreq+0x2e8>
 800711e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007122:	4b51      	ldr	r3, [pc, #324]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007132:	ed97 6a02 	vldr	s12, [r7, #8]
 8007136:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 800713a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007152:	e065      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007280 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007166:	4b40      	ldr	r3, [pc, #256]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007176:	ed97 6a02 	vldr	s12, [r7, #8]
 800717a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 800717e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800718a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007196:	e043      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007284 <HAL_RCC_GetSysClockFreq+0x2f0>
 80071a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071aa:	4b2f      	ldr	r3, [pc, #188]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80071be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071da:	e021      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007280 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ee:	4b1e      	ldr	r3, [pc, #120]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007202:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800720e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800721e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007220:	4b11      	ldr	r3, [pc, #68]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007224:	0a5b      	lsrs	r3, r3, #9
 8007226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800722a:	3301      	adds	r3, #1
 800722c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	ee07 3a90 	vmov	s15, r3
 8007234:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007238:	edd7 6a07 	vldr	s13, [r7, #28]
 800723c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007244:	ee17 3a90 	vmov	r3, s15
 8007248:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800724a:	e005      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	61bb      	str	r3, [r7, #24]
    break;
 8007250:	e002      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007252:	4b07      	ldr	r3, [pc, #28]	; (8007270 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007254:	61bb      	str	r3, [r7, #24]
    break;
 8007256:	bf00      	nop
  }

  return sysclockfreq;
 8007258:	69bb      	ldr	r3, [r7, #24]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3724      	adds	r7, #36	; 0x24
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	58024400 	.word	0x58024400
 800726c:	03d09000 	.word	0x03d09000
 8007270:	003d0900 	.word	0x003d0900
 8007274:	007a1200 	.word	0x007a1200
 8007278:	46000000 	.word	0x46000000
 800727c:	4c742400 	.word	0x4c742400
 8007280:	4a742400 	.word	0x4a742400
 8007284:	4af42400 	.word	0x4af42400

08007288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800728e:	f7ff fe81 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8007292:	4602      	mov	r2, r0
 8007294:	4b10      	ldr	r3, [pc, #64]	; (80072d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	0a1b      	lsrs	r3, r3, #8
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	490f      	ldr	r1, [pc, #60]	; (80072dc <HAL_RCC_GetHCLKFreq+0x54>)
 80072a0:	5ccb      	ldrb	r3, [r1, r3]
 80072a2:	f003 031f 	and.w	r3, r3, #31
 80072a6:	fa22 f303 	lsr.w	r3, r2, r3
 80072aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072ac:	4b0a      	ldr	r3, [pc, #40]	; (80072d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f003 030f 	and.w	r3, r3, #15
 80072b4:	4a09      	ldr	r2, [pc, #36]	; (80072dc <HAL_RCC_GetHCLKFreq+0x54>)
 80072b6:	5cd3      	ldrb	r3, [r2, r3]
 80072b8:	f003 031f 	and.w	r3, r3, #31
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	fa22 f303 	lsr.w	r3, r2, r3
 80072c2:	4a07      	ldr	r2, [pc, #28]	; (80072e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80072c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072c6:	4a07      	ldr	r2, [pc, #28]	; (80072e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072cc:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80072ce:	681b      	ldr	r3, [r3, #0]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	58024400 	.word	0x58024400
 80072dc:	0801232c 	.word	0x0801232c
 80072e0:	24000004 	.word	0x24000004
 80072e4:	24000000 	.word	0x24000000

080072e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072ec:	f7ff ffcc 	bl	8007288 <HAL_RCC_GetHCLKFreq>
 80072f0:	4602      	mov	r2, r0
 80072f2:	4b06      	ldr	r3, [pc, #24]	; (800730c <HAL_RCC_GetPCLK1Freq+0x24>)
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	091b      	lsrs	r3, r3, #4
 80072f8:	f003 0307 	and.w	r3, r3, #7
 80072fc:	4904      	ldr	r1, [pc, #16]	; (8007310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072fe:	5ccb      	ldrb	r3, [r1, r3]
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007308:	4618      	mov	r0, r3
 800730a:	bd80      	pop	{r7, pc}
 800730c:	58024400 	.word	0x58024400
 8007310:	0801232c 	.word	0x0801232c

08007314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007318:	f7ff ffb6 	bl	8007288 <HAL_RCC_GetHCLKFreq>
 800731c:	4602      	mov	r2, r0
 800731e:	4b06      	ldr	r3, [pc, #24]	; (8007338 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	0a1b      	lsrs	r3, r3, #8
 8007324:	f003 0307 	and.w	r3, r3, #7
 8007328:	4904      	ldr	r1, [pc, #16]	; (800733c <HAL_RCC_GetPCLK2Freq+0x28>)
 800732a:	5ccb      	ldrb	r3, [r1, r3]
 800732c:	f003 031f 	and.w	r3, r3, #31
 8007330:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007334:	4618      	mov	r0, r3
 8007336:	bd80      	pop	{r7, pc}
 8007338:	58024400 	.word	0x58024400
 800733c:	0801232c 	.word	0x0801232c

08007340 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	223f      	movs	r2, #63	; 0x3f
 800734e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007350:	4b1a      	ldr	r3, [pc, #104]	; (80073bc <HAL_RCC_GetClockConfig+0x7c>)
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	f003 0207 	and.w	r2, r3, #7
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800735c:	4b17      	ldr	r3, [pc, #92]	; (80073bc <HAL_RCC_GetClockConfig+0x7c>)
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007368:	4b14      	ldr	r3, [pc, #80]	; (80073bc <HAL_RCC_GetClockConfig+0x7c>)
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	f003 020f 	and.w	r2, r3, #15
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007374:	4b11      	ldr	r3, [pc, #68]	; (80073bc <HAL_RCC_GetClockConfig+0x7c>)
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007380:	4b0e      	ldr	r3, [pc, #56]	; (80073bc <HAL_RCC_GetClockConfig+0x7c>)
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800738c:	4b0b      	ldr	r3, [pc, #44]	; (80073bc <HAL_RCC_GetClockConfig+0x7c>)
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007398:	4b08      	ldr	r3, [pc, #32]	; (80073bc <HAL_RCC_GetClockConfig+0x7c>)
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80073a4:	4b06      	ldr	r3, [pc, #24]	; (80073c0 <HAL_RCC_GetClockConfig+0x80>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 020f 	and.w	r2, r3, #15
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	601a      	str	r2, [r3, #0]
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	58024400 	.word	0x58024400
 80073c0:	52002000 	.word	0x52002000

080073c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073cc:	2300      	movs	r3, #0
 80073ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073d0:	2300      	movs	r3, #0
 80073d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d03f      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073e8:	d02a      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80073ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073ee:	d824      	bhi.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073f4:	d018      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80073f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073fa:	d81e      	bhi.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007404:	d007      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007406:	e018      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007408:	4ba3      	ldr	r3, [pc, #652]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740c:	4aa2      	ldr	r2, [pc, #648]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800740e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007412:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007414:	e015      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	3304      	adds	r3, #4
 800741a:	2102      	movs	r1, #2
 800741c:	4618      	mov	r0, r3
 800741e:	f001 f9d5 	bl	80087cc <RCCEx_PLL2_Config>
 8007422:	4603      	mov	r3, r0
 8007424:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007426:	e00c      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3324      	adds	r3, #36	; 0x24
 800742c:	2102      	movs	r1, #2
 800742e:	4618      	mov	r0, r3
 8007430:	f001 fa7e 	bl	8008930 <RCCEx_PLL3_Config>
 8007434:	4603      	mov	r3, r0
 8007436:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007438:	e003      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	75fb      	strb	r3, [r7, #23]
      break;
 800743e:	e000      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007442:	7dfb      	ldrb	r3, [r7, #23]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d109      	bne.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007448:	4b93      	ldr	r3, [pc, #588]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800744a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800744c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007454:	4990      	ldr	r1, [pc, #576]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007456:	4313      	orrs	r3, r2
 8007458:	650b      	str	r3, [r1, #80]	; 0x50
 800745a:	e001      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007468:	2b00      	cmp	r3, #0
 800746a:	d03d      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007470:	2b04      	cmp	r3, #4
 8007472:	d826      	bhi.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007474:	a201      	add	r2, pc, #4	; (adr r2, 800747c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747a:	bf00      	nop
 800747c:	08007491 	.word	0x08007491
 8007480:	0800749f 	.word	0x0800749f
 8007484:	080074b1 	.word	0x080074b1
 8007488:	080074c9 	.word	0x080074c9
 800748c:	080074c9 	.word	0x080074c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007490:	4b81      	ldr	r3, [pc, #516]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	4a80      	ldr	r2, [pc, #512]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800749a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800749c:	e015      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3304      	adds	r3, #4
 80074a2:	2100      	movs	r1, #0
 80074a4:	4618      	mov	r0, r3
 80074a6:	f001 f991 	bl	80087cc <RCCEx_PLL2_Config>
 80074aa:	4603      	mov	r3, r0
 80074ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074ae:	e00c      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	3324      	adds	r3, #36	; 0x24
 80074b4:	2100      	movs	r1, #0
 80074b6:	4618      	mov	r0, r3
 80074b8:	f001 fa3a 	bl	8008930 <RCCEx_PLL3_Config>
 80074bc:	4603      	mov	r3, r0
 80074be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074c0:	e003      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	75fb      	strb	r3, [r7, #23]
      break;
 80074c6:	e000      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80074c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ca:	7dfb      	ldrb	r3, [r7, #23]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d109      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074d0:	4b71      	ldr	r3, [pc, #452]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d4:	f023 0207 	bic.w	r2, r3, #7
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074dc:	496e      	ldr	r1, [pc, #440]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	650b      	str	r3, [r1, #80]	; 0x50
 80074e2:	e001      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
 80074e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d042      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074fc:	d02b      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80074fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007502:	d825      	bhi.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007504:	2bc0      	cmp	r3, #192	; 0xc0
 8007506:	d028      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007508:	2bc0      	cmp	r3, #192	; 0xc0
 800750a:	d821      	bhi.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800750c:	2b80      	cmp	r3, #128	; 0x80
 800750e:	d016      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007510:	2b80      	cmp	r3, #128	; 0x80
 8007512:	d81d      	bhi.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007518:	2b40      	cmp	r3, #64	; 0x40
 800751a:	d007      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800751c:	e018      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800751e:	4b5e      	ldr	r3, [pc, #376]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	4a5d      	ldr	r2, [pc, #372]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007528:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800752a:	e017      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3304      	adds	r3, #4
 8007530:	2100      	movs	r1, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f001 f94a 	bl	80087cc <RCCEx_PLL2_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800753c:	e00e      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3324      	adds	r3, #36	; 0x24
 8007542:	2100      	movs	r1, #0
 8007544:	4618      	mov	r0, r3
 8007546:	f001 f9f3 	bl	8008930 <RCCEx_PLL3_Config>
 800754a:	4603      	mov	r3, r0
 800754c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800754e:	e005      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	75fb      	strb	r3, [r7, #23]
      break;
 8007554:	e002      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007556:	bf00      	nop
 8007558:	e000      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800755a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800755c:	7dfb      	ldrb	r3, [r7, #23]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d109      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007562:	4b4d      	ldr	r3, [pc, #308]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007566:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800756e:	494a      	ldr	r1, [pc, #296]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007570:	4313      	orrs	r3, r2
 8007572:	650b      	str	r3, [r1, #80]	; 0x50
 8007574:	e001      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007582:	2b00      	cmp	r3, #0
 8007584:	d049      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800758c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007590:	d030      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007592:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007596:	d82a      	bhi.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007598:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800759c:	d02c      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800759e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80075a2:	d824      	bhi.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80075a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075a8:	d018      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80075aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075ae:	d81e      	bhi.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80075b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075b8:	d007      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 80075ba:	e018      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075bc:	4b36      	ldr	r3, [pc, #216]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80075be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c0:	4a35      	ldr	r2, [pc, #212]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80075c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075c8:	e017      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3304      	adds	r3, #4
 80075ce:	2100      	movs	r1, #0
 80075d0:	4618      	mov	r0, r3
 80075d2:	f001 f8fb 	bl	80087cc <RCCEx_PLL2_Config>
 80075d6:	4603      	mov	r3, r0
 80075d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80075da:	e00e      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3324      	adds	r3, #36	; 0x24
 80075e0:	2100      	movs	r1, #0
 80075e2:	4618      	mov	r0, r3
 80075e4:	f001 f9a4 	bl	8008930 <RCCEx_PLL3_Config>
 80075e8:	4603      	mov	r3, r0
 80075ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075ec:	e005      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	75fb      	strb	r3, [r7, #23]
      break;
 80075f2:	e002      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80075f4:	bf00      	nop
 80075f6:	e000      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80075f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10a      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007600:	4b25      	ldr	r3, [pc, #148]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007604:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800760e:	4922      	ldr	r1, [pc, #136]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007610:	4313      	orrs	r3, r2
 8007612:	658b      	str	r3, [r1, #88]	; 0x58
 8007614:	e001      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007622:	2b00      	cmp	r3, #0
 8007624:	d04b      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800762c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007630:	d030      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007632:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007636:	d82a      	bhi.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007638:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800763c:	d02e      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800763e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007642:	d824      	bhi.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007644:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007648:	d018      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800764a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800764e:	d81e      	bhi.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007658:	d007      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800765a:	e018      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800765c:	4b0e      	ldr	r3, [pc, #56]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	4a0d      	ldr	r2, [pc, #52]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007666:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007668:	e019      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3304      	adds	r3, #4
 800766e:	2100      	movs	r1, #0
 8007670:	4618      	mov	r0, r3
 8007672:	f001 f8ab 	bl	80087cc <RCCEx_PLL2_Config>
 8007676:	4603      	mov	r3, r0
 8007678:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800767a:	e010      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3324      	adds	r3, #36	; 0x24
 8007680:	2100      	movs	r1, #0
 8007682:	4618      	mov	r0, r3
 8007684:	f001 f954 	bl	8008930 <RCCEx_PLL3_Config>
 8007688:	4603      	mov	r3, r0
 800768a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800768c:	e007      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	75fb      	strb	r3, [r7, #23]
      break;
 8007692:	e004      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007694:	bf00      	nop
 8007696:	e002      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007698:	58024400 	.word	0x58024400
      break;
 800769c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800769e:	7dfb      	ldrb	r3, [r7, #23]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10a      	bne.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80076a4:	4b99      	ldr	r3, [pc, #612]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076a8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80076b2:	4996      	ldr	r1, [pc, #600]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	658b      	str	r3, [r1, #88]	; 0x58
 80076b8:	e001      	b.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
 80076bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d032      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ce:	2b30      	cmp	r3, #48	; 0x30
 80076d0:	d01c      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80076d2:	2b30      	cmp	r3, #48	; 0x30
 80076d4:	d817      	bhi.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d00c      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80076da:	2b20      	cmp	r3, #32
 80076dc:	d813      	bhi.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d016      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80076e2:	2b10      	cmp	r3, #16
 80076e4:	d10f      	bne.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e6:	4b89      	ldr	r3, [pc, #548]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ea:	4a88      	ldr	r2, [pc, #544]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80076f2:	e00e      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3304      	adds	r3, #4
 80076f8:	2102      	movs	r1, #2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 f866 	bl	80087cc <RCCEx_PLL2_Config>
 8007700:	4603      	mov	r3, r0
 8007702:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007704:	e005      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	75fb      	strb	r3, [r7, #23]
      break;
 800770a:	e002      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800770c:	bf00      	nop
 800770e:	e000      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d109      	bne.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007718:	4b7c      	ldr	r3, [pc, #496]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800771a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007724:	4979      	ldr	r1, [pc, #484]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007726:	4313      	orrs	r3, r2
 8007728:	64cb      	str	r3, [r1, #76]	; 0x4c
 800772a:	e001      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772c:	7dfb      	ldrb	r3, [r7, #23]
 800772e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d047      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007744:	d030      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800774a:	d82a      	bhi.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800774c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007750:	d02c      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007752:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007756:	d824      	bhi.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800775c:	d018      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800775e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007762:	d81e      	bhi.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776c:	d007      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800776e:	e018      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007770:	4b66      	ldr	r3, [pc, #408]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007774:	4a65      	ldr	r2, [pc, #404]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800777a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800777c:	e017      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3304      	adds	r3, #4
 8007782:	2100      	movs	r1, #0
 8007784:	4618      	mov	r0, r3
 8007786:	f001 f821 	bl	80087cc <RCCEx_PLL2_Config>
 800778a:	4603      	mov	r3, r0
 800778c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800778e:	e00e      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3324      	adds	r3, #36	; 0x24
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f001 f8ca 	bl	8008930 <RCCEx_PLL3_Config>
 800779c:	4603      	mov	r3, r0
 800779e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80077a0:	e005      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	75fb      	strb	r3, [r7, #23]
      break;
 80077a6:	e002      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80077a8:	bf00      	nop
 80077aa:	e000      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80077ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d109      	bne.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80077b4:	4b55      	ldr	r3, [pc, #340]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80077b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c0:	4952      	ldr	r1, [pc, #328]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	650b      	str	r3, [r1, #80]	; 0x50
 80077c6:	e001      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
 80077ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d049      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077e0:	d02e      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80077e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077e6:	d828      	bhi.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80077e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077ec:	d02a      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80077ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077f2:	d822      	bhi.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80077f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077f8:	d026      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80077fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077fe:	d81c      	bhi.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007804:	d010      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800780a:	d816      	bhi.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01d      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007814:	d111      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3304      	adds	r3, #4
 800781a:	2101      	movs	r1, #1
 800781c:	4618      	mov	r0, r3
 800781e:	f000 ffd5 	bl	80087cc <RCCEx_PLL2_Config>
 8007822:	4603      	mov	r3, r0
 8007824:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007826:	e012      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3324      	adds	r3, #36	; 0x24
 800782c:	2101      	movs	r1, #1
 800782e:	4618      	mov	r0, r3
 8007830:	f001 f87e 	bl	8008930 <RCCEx_PLL3_Config>
 8007834:	4603      	mov	r3, r0
 8007836:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007838:	e009      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	75fb      	strb	r3, [r7, #23]
      break;
 800783e:	e006      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007840:	bf00      	nop
 8007842:	e004      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007844:	bf00      	nop
 8007846:	e002      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007848:	bf00      	nop
 800784a:	e000      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800784c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800784e:	7dfb      	ldrb	r3, [r7, #23]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d109      	bne.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007854:	4b2d      	ldr	r3, [pc, #180]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007858:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007860:	492a      	ldr	r1, [pc, #168]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007862:	4313      	orrs	r3, r2
 8007864:	650b      	str	r3, [r1, #80]	; 0x50
 8007866:	e001      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007868:	7dfb      	ldrb	r3, [r7, #23]
 800786a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d04d      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800787e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007882:	d02e      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007888:	d828      	bhi.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x518>
 800788a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800788e:	d02a      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007894:	d822      	bhi.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007896:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800789a:	d026      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x526>
 800789c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078a0:	d81c      	bhi.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80078a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078a6:	d010      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x506>
 80078a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ac:	d816      	bhi.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d01d      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80078b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078b6:	d111      	bne.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3304      	adds	r3, #4
 80078bc:	2101      	movs	r1, #1
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 ff84 	bl	80087cc <RCCEx_PLL2_Config>
 80078c4:	4603      	mov	r3, r0
 80078c6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80078c8:	e012      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	3324      	adds	r3, #36	; 0x24
 80078ce:	2101      	movs	r1, #1
 80078d0:	4618      	mov	r0, r3
 80078d2:	f001 f82d 	bl	8008930 <RCCEx_PLL3_Config>
 80078d6:	4603      	mov	r3, r0
 80078d8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80078da:	e009      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	75fb      	strb	r3, [r7, #23]
      break;
 80078e0:	e006      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80078e2:	bf00      	nop
 80078e4:	e004      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80078e6:	bf00      	nop
 80078e8:	e002      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80078ea:	bf00      	nop
 80078ec:	e000      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80078ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10c      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078f6:	4b05      	ldr	r3, [pc, #20]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007904:	4901      	ldr	r1, [pc, #4]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007906:	4313      	orrs	r3, r2
 8007908:	658b      	str	r3, [r1, #88]	; 0x58
 800790a:	e003      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800790c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007910:	7dfb      	ldrb	r3, [r7, #23]
 8007912:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d02f      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007928:	d00e      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800792a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800792e:	d814      	bhi.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007930:	2b00      	cmp	r3, #0
 8007932:	d015      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007934:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007938:	d10f      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800793a:	4baf      	ldr	r3, [pc, #700]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793e:	4aae      	ldr	r2, [pc, #696]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007944:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007946:	e00c      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	3304      	adds	r3, #4
 800794c:	2101      	movs	r1, #1
 800794e:	4618      	mov	r0, r3
 8007950:	f000 ff3c 	bl	80087cc <RCCEx_PLL2_Config>
 8007954:	4603      	mov	r3, r0
 8007956:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007958:	e003      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	75fb      	strb	r3, [r7, #23]
      break;
 800795e:	e000      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007962:	7dfb      	ldrb	r3, [r7, #23]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d109      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007968:	4ba3      	ldr	r3, [pc, #652]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800796a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800796c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007974:	49a0      	ldr	r1, [pc, #640]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007976:	4313      	orrs	r3, r2
 8007978:	650b      	str	r3, [r1, #80]	; 0x50
 800797a:	e001      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d032      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007990:	2b03      	cmp	r3, #3
 8007992:	d81b      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007994:	a201      	add	r2, pc, #4	; (adr r2, 800799c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799a:	bf00      	nop
 800799c:	080079d3 	.word	0x080079d3
 80079a0:	080079ad 	.word	0x080079ad
 80079a4:	080079bb 	.word	0x080079bb
 80079a8:	080079d3 	.word	0x080079d3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079ac:	4b92      	ldr	r3, [pc, #584]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b0:	4a91      	ldr	r2, [pc, #580]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80079b8:	e00c      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3304      	adds	r3, #4
 80079be:	2102      	movs	r1, #2
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 ff03 	bl	80087cc <RCCEx_PLL2_Config>
 80079c6:	4603      	mov	r3, r0
 80079c8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80079ca:	e003      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	75fb      	strb	r3, [r7, #23]
      break;
 80079d0:	e000      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80079d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d109      	bne.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80079da:	4b87      	ldr	r3, [pc, #540]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079de:	f023 0203 	bic.w	r2, r3, #3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e6:	4984      	ldr	r1, [pc, #528]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80079ec:	e001      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
 80079f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 8086 	beq.w	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a00:	4b7e      	ldr	r3, [pc, #504]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a7d      	ldr	r2, [pc, #500]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a0c:	f7fd face 	bl	8004fac <HAL_GetTick>
 8007a10:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a12:	e009      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a14:	f7fd faca 	bl	8004fac <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b64      	cmp	r3, #100	; 0x64
 8007a20:	d902      	bls.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	75fb      	strb	r3, [r7, #23]
        break;
 8007a26:	e005      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a28:	4b74      	ldr	r3, [pc, #464]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0ef      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007a34:	7dfb      	ldrb	r3, [r7, #23]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d166      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a3a:	4b6f      	ldr	r3, [pc, #444]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a44:	4053      	eors	r3, r2
 8007a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d013      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a4e:	4b6a      	ldr	r3, [pc, #424]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a56:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a58:	4b67      	ldr	r3, [pc, #412]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5c:	4a66      	ldr	r2, [pc, #408]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a62:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a64:	4b64      	ldr	r3, [pc, #400]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a68:	4a63      	ldr	r2, [pc, #396]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a6e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a70:	4a61      	ldr	r2, [pc, #388]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a80:	d115      	bne.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a82:	f7fd fa93 	bl	8004fac <HAL_GetTick>
 8007a86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a88:	e00b      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a8a:	f7fd fa8f 	bl	8004fac <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d902      	bls.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	75fb      	strb	r3, [r7, #23]
            break;
 8007aa0:	e005      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007aa2:	4b55      	ldr	r3, [pc, #340]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d0ed      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007aae:	7dfb      	ldrb	r3, [r7, #23]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d126      	bne.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ac2:	d10d      	bne.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007ac4:	4b4c      	ldr	r3, [pc, #304]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ad2:	0919      	lsrs	r1, r3, #4
 8007ad4:	4b4a      	ldr	r3, [pc, #296]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007ad6:	400b      	ands	r3, r1
 8007ad8:	4947      	ldr	r1, [pc, #284]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	610b      	str	r3, [r1, #16]
 8007ade:	e005      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007ae0:	4b45      	ldr	r3, [pc, #276]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	4a44      	ldr	r2, [pc, #272]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ae6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007aea:	6113      	str	r3, [r2, #16]
 8007aec:	4b42      	ldr	r3, [pc, #264]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007aee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007afa:	493f      	ldr	r1, [pc, #252]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007afc:	4313      	orrs	r3, r2
 8007afe:	670b      	str	r3, [r1, #112]	; 0x70
 8007b00:	e004      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	75bb      	strb	r3, [r7, #22]
 8007b06:	e001      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 8085 	beq.w	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b1e:	2b28      	cmp	r3, #40	; 0x28
 8007b20:	d866      	bhi.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007b22:	a201      	add	r2, pc, #4	; (adr r2, 8007b28 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b28:	08007c05 	.word	0x08007c05
 8007b2c:	08007bf1 	.word	0x08007bf1
 8007b30:	08007bf1 	.word	0x08007bf1
 8007b34:	08007bf1 	.word	0x08007bf1
 8007b38:	08007bf1 	.word	0x08007bf1
 8007b3c:	08007bf1 	.word	0x08007bf1
 8007b40:	08007bf1 	.word	0x08007bf1
 8007b44:	08007bf1 	.word	0x08007bf1
 8007b48:	08007bcd 	.word	0x08007bcd
 8007b4c:	08007bf1 	.word	0x08007bf1
 8007b50:	08007bf1 	.word	0x08007bf1
 8007b54:	08007bf1 	.word	0x08007bf1
 8007b58:	08007bf1 	.word	0x08007bf1
 8007b5c:	08007bf1 	.word	0x08007bf1
 8007b60:	08007bf1 	.word	0x08007bf1
 8007b64:	08007bf1 	.word	0x08007bf1
 8007b68:	08007bdf 	.word	0x08007bdf
 8007b6c:	08007bf1 	.word	0x08007bf1
 8007b70:	08007bf1 	.word	0x08007bf1
 8007b74:	08007bf1 	.word	0x08007bf1
 8007b78:	08007bf1 	.word	0x08007bf1
 8007b7c:	08007bf1 	.word	0x08007bf1
 8007b80:	08007bf1 	.word	0x08007bf1
 8007b84:	08007bf1 	.word	0x08007bf1
 8007b88:	08007c05 	.word	0x08007c05
 8007b8c:	08007bf1 	.word	0x08007bf1
 8007b90:	08007bf1 	.word	0x08007bf1
 8007b94:	08007bf1 	.word	0x08007bf1
 8007b98:	08007bf1 	.word	0x08007bf1
 8007b9c:	08007bf1 	.word	0x08007bf1
 8007ba0:	08007bf1 	.word	0x08007bf1
 8007ba4:	08007bf1 	.word	0x08007bf1
 8007ba8:	08007c05 	.word	0x08007c05
 8007bac:	08007bf1 	.word	0x08007bf1
 8007bb0:	08007bf1 	.word	0x08007bf1
 8007bb4:	08007bf1 	.word	0x08007bf1
 8007bb8:	08007bf1 	.word	0x08007bf1
 8007bbc:	08007bf1 	.word	0x08007bf1
 8007bc0:	08007bf1 	.word	0x08007bf1
 8007bc4:	08007bf1 	.word	0x08007bf1
 8007bc8:	08007c05 	.word	0x08007c05
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fdfa 	bl	80087cc <RCCEx_PLL2_Config>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007bdc:	e013      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	3324      	adds	r3, #36	; 0x24
 8007be2:	2101      	movs	r1, #1
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 fea3 	bl	8008930 <RCCEx_PLL3_Config>
 8007bea:	4603      	mov	r3, r0
 8007bec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007bee:	e00a      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bf4:	e007      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007bf6:	bf00      	nop
 8007bf8:	58024400 	.word	0x58024400
 8007bfc:	58024800 	.word	0x58024800
 8007c00:	00ffffcf 	.word	0x00ffffcf
      break;
 8007c04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d109      	bne.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c0c:	4b96      	ldr	r3, [pc, #600]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c10:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c18:	4993      	ldr	r1, [pc, #588]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	654b      	str	r3, [r1, #84]	; 0x54
 8007c1e:	e001      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c20:	7dfb      	ldrb	r3, [r7, #23]
 8007c22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d038      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c34:	2b05      	cmp	r3, #5
 8007c36:	d821      	bhi.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007c38:	a201      	add	r2, pc, #4	; (adr r2, 8007c40 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3e:	bf00      	nop
 8007c40:	08007c83 	.word	0x08007c83
 8007c44:	08007c59 	.word	0x08007c59
 8007c48:	08007c6b 	.word	0x08007c6b
 8007c4c:	08007c83 	.word	0x08007c83
 8007c50:	08007c83 	.word	0x08007c83
 8007c54:	08007c83 	.word	0x08007c83
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 fdb4 	bl	80087cc <RCCEx_PLL2_Config>
 8007c64:	4603      	mov	r3, r0
 8007c66:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c68:	e00c      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	3324      	adds	r3, #36	; 0x24
 8007c6e:	2101      	movs	r1, #1
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 fe5d 	bl	8008930 <RCCEx_PLL3_Config>
 8007c76:	4603      	mov	r3, r0
 8007c78:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c7a:	e003      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c80:	e000      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d109      	bne.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c8a:	4b77      	ldr	r3, [pc, #476]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8e:	f023 0207 	bic.w	r2, r3, #7
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c96:	4974      	ldr	r1, [pc, #464]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	654b      	str	r3, [r1, #84]	; 0x54
 8007c9c:	e001      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ca0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d03a      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb4:	2b05      	cmp	r3, #5
 8007cb6:	d821      	bhi.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007cb8:	a201      	add	r2, pc, #4	; (adr r2, 8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbe:	bf00      	nop
 8007cc0:	08007d03 	.word	0x08007d03
 8007cc4:	08007cd9 	.word	0x08007cd9
 8007cc8:	08007ceb 	.word	0x08007ceb
 8007ccc:	08007d03 	.word	0x08007d03
 8007cd0:	08007d03 	.word	0x08007d03
 8007cd4:	08007d03 	.word	0x08007d03
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3304      	adds	r3, #4
 8007cdc:	2101      	movs	r1, #1
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 fd74 	bl	80087cc <RCCEx_PLL2_Config>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007ce8:	e00c      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3324      	adds	r3, #36	; 0x24
 8007cee:	2101      	movs	r1, #1
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fe1d 	bl	8008930 <RCCEx_PLL3_Config>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007cfa:	e003      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8007d00:	e000      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007d02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10a      	bne.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d0a:	4b57      	ldr	r3, [pc, #348]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d0e:	f023 0207 	bic.w	r2, r3, #7
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d18:	4953      	ldr	r1, [pc, #332]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	658b      	str	r3, [r1, #88]	; 0x58
 8007d1e:	e001      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d20:	7dfb      	ldrb	r3, [r7, #23]
 8007d22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0320 	and.w	r3, r3, #32
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d04b      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d3a:	d02e      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d40:	d828      	bhi.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d46:	d02a      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d4c:	d822      	bhi.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007d4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d52:	d026      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007d54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d58:	d81c      	bhi.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d5e:	d010      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d64:	d816      	bhi.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d01d      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007d6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d6e:	d111      	bne.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3304      	adds	r3, #4
 8007d74:	2100      	movs	r1, #0
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 fd28 	bl	80087cc <RCCEx_PLL2_Config>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d80:	e012      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	3324      	adds	r3, #36	; 0x24
 8007d86:	2102      	movs	r1, #2
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 fdd1 	bl	8008930 <RCCEx_PLL3_Config>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d92:	e009      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	75fb      	strb	r3, [r7, #23]
      break;
 8007d98:	e006      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007d9a:	bf00      	nop
 8007d9c:	e004      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007d9e:	bf00      	nop
 8007da0:	e002      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007da2:	bf00      	nop
 8007da4:	e000      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007da6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10a      	bne.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dae:	4b2e      	ldr	r3, [pc, #184]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dbc:	492a      	ldr	r1, [pc, #168]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	654b      	str	r3, [r1, #84]	; 0x54
 8007dc2:	e001      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
 8007dc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d04d      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007dde:	d02e      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007de0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007de4:	d828      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dea:	d02a      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df0:	d822      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007df2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007df6:	d026      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007df8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dfc:	d81c      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e02:	d010      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e08:	d816      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d01d      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e12:	d111      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3304      	adds	r3, #4
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 fcd6 	bl	80087cc <RCCEx_PLL2_Config>
 8007e20:	4603      	mov	r3, r0
 8007e22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e24:	e012      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	3324      	adds	r3, #36	; 0x24
 8007e2a:	2102      	movs	r1, #2
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 fd7f 	bl	8008930 <RCCEx_PLL3_Config>
 8007e32:	4603      	mov	r3, r0
 8007e34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e36:	e009      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e3c:	e006      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007e3e:	bf00      	nop
 8007e40:	e004      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007e42:	bf00      	nop
 8007e44:	e002      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007e46:	bf00      	nop
 8007e48:	e000      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10c      	bne.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e52:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e56:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e60:	4901      	ldr	r1, [pc, #4]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	658b      	str	r3, [r1, #88]	; 0x58
 8007e66:	e003      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007e68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
 8007e6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d04b      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e82:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e86:	d02e      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007e88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e8c:	d828      	bhi.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e92:	d02a      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e98:	d822      	bhi.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007e9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e9e:	d026      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007ea0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007ea4:	d81c      	bhi.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007eaa:	d010      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007eb0:	d816      	bhi.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d01d      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eba:	d111      	bne.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 fc82 	bl	80087cc <RCCEx_PLL2_Config>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007ecc:	e012      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	3324      	adds	r3, #36	; 0x24
 8007ed2:	2102      	movs	r1, #2
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 fd2b 	bl	8008930 <RCCEx_PLL3_Config>
 8007eda:	4603      	mov	r3, r0
 8007edc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007ede:	e009      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee4:	e006      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007ee6:	bf00      	nop
 8007ee8:	e004      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007eea:	bf00      	nop
 8007eec:	e002      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007eee:	bf00      	nop
 8007ef0:	e000      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10a      	bne.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007efa:	4b9d      	ldr	r3, [pc, #628]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f08:	4999      	ldr	r1, [pc, #612]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	658b      	str	r3, [r1, #88]	; 0x58
 8007f0e:	e001      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0308 	and.w	r3, r3, #8
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d01a      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f2a:	d10a      	bne.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3324      	adds	r3, #36	; 0x24
 8007f30:	2102      	movs	r1, #2
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 fcfc 	bl	8008930 <RCCEx_PLL3_Config>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f42:	4b8b      	ldr	r3, [pc, #556]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f50:	4987      	ldr	r1, [pc, #540]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0310 	and.w	r3, r3, #16
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d01a      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f6c:	d10a      	bne.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	3324      	adds	r3, #36	; 0x24
 8007f72:	2102      	movs	r1, #2
 8007f74:	4618      	mov	r0, r3
 8007f76:	f000 fcdb 	bl	8008930 <RCCEx_PLL3_Config>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f84:	4b7a      	ldr	r3, [pc, #488]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f92:	4977      	ldr	r1, [pc, #476]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d034      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007faa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fae:	d01d      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fb4:	d817      	bhi.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fbe:	d009      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007fc0:	e011      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 fbff 	bl	80087cc <RCCEx_PLL2_Config>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007fd2:	e00c      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3324      	adds	r3, #36	; 0x24
 8007fd8:	2102      	movs	r1, #2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 fca8 	bl	8008930 <RCCEx_PLL3_Config>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007fe4:	e003      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8007fea:	e000      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10a      	bne.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ff4:	4b5e      	ldr	r3, [pc, #376]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008002:	495b      	ldr	r1, [pc, #364]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008004:	4313      	orrs	r3, r2
 8008006:	658b      	str	r3, [r1, #88]	; 0x58
 8008008:	e001      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800800a:	7dfb      	ldrb	r3, [r7, #23]
 800800c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d033      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008020:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008024:	d01c      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8008026:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800802a:	d816      	bhi.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800802c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008030:	d003      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008032:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008036:	d007      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008038:	e00f      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800803a:	4b4d      	ldr	r3, [pc, #308]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803e:	4a4c      	ldr	r2, [pc, #304]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008044:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008046:	e00c      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3324      	adds	r3, #36	; 0x24
 800804c:	2101      	movs	r1, #1
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fc6e 	bl	8008930 <RCCEx_PLL3_Config>
 8008054:	4603      	mov	r3, r0
 8008056:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008058:	e003      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	75fb      	strb	r3, [r7, #23]
      break;
 800805e:	e000      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10a      	bne.n	800807e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008068:	4b41      	ldr	r3, [pc, #260]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800806a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800806c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008076:	493e      	ldr	r1, [pc, #248]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008078:	4313      	orrs	r3, r2
 800807a:	654b      	str	r3, [r1, #84]	; 0x54
 800807c:	e001      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d029      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8008096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800809a:	d007      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800809c:	e00f      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800809e:	4b34      	ldr	r3, [pc, #208]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a2:	4a33      	ldr	r2, [pc, #204]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80080aa:	e00b      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3304      	adds	r3, #4
 80080b0:	2102      	movs	r1, #2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 fb8a 	bl	80087cc <RCCEx_PLL2_Config>
 80080b8:	4603      	mov	r3, r0
 80080ba:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80080bc:	e002      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	75fb      	strb	r3, [r7, #23]
      break;
 80080c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d109      	bne.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080ca:	4b29      	ldr	r3, [pc, #164]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080d6:	4926      	ldr	r1, [pc, #152]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080dc:	e001      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080de:	7dfb      	ldrb	r3, [r7, #23]
 80080e0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00a      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	3324      	adds	r3, #36	; 0x24
 80080f2:	2102      	movs	r1, #2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 fc1b 	bl	8008930 <RCCEx_PLL3_Config>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d033      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008118:	d017      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800811a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800811e:	d811      	bhi.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008124:	d013      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800812a:	d80b      	bhi.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800812c:	2b00      	cmp	r3, #0
 800812e:	d010      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008134:	d106      	bne.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008136:	4b0e      	ldr	r3, [pc, #56]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813a:	4a0d      	ldr	r2, [pc, #52]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800813c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008140:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008142:	e007      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	75fb      	strb	r3, [r7, #23]
      break;
 8008148:	e004      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800814a:	bf00      	nop
 800814c:	e002      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800814e:	bf00      	nop
 8008150:	e000      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10c      	bne.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800815a:	4b05      	ldr	r3, [pc, #20]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800815c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800815e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008166:	4902      	ldr	r1, [pc, #8]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008168:	4313      	orrs	r3, r2
 800816a:	654b      	str	r3, [r1, #84]	; 0x54
 800816c:	e004      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800816e:	bf00      	nop
 8008170:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d008      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008184:	4b31      	ldr	r3, [pc, #196]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008188:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008190:	492e      	ldr	r1, [pc, #184]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008192:	4313      	orrs	r3, r2
 8008194:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d009      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80081a2:	4b2a      	ldr	r3, [pc, #168]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80081b0:	4926      	ldr	r1, [pc, #152]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d008      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80081c2:	4b22      	ldr	r3, [pc, #136]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ce:	491f      	ldr	r1, [pc, #124]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00d      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081e0:	4b1a      	ldr	r3, [pc, #104]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	4a19      	ldr	r2, [pc, #100]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081ea:	6113      	str	r3, [r2, #16]
 80081ec:	4b17      	ldr	r3, [pc, #92]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081ee:	691a      	ldr	r2, [r3, #16]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80081f6:	4915      	ldr	r1, [pc, #84]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	da08      	bge.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008204:	4b11      	ldr	r3, [pc, #68]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008208:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008210:	490e      	ldr	r1, [pc, #56]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008212:	4313      	orrs	r3, r2
 8008214:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d009      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008222:	4b0a      	ldr	r3, [pc, #40]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008226:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008230:	4906      	ldr	r1, [pc, #24]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008232:	4313      	orrs	r3, r2
 8008234:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008236:	7dbb      	ldrb	r3, [r7, #22]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	e000      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	58024400 	.word	0x58024400

08008250 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008254:	f7ff f818 	bl	8007288 <HAL_RCC_GetHCLKFreq>
 8008258:	4602      	mov	r2, r0
 800825a:	4b06      	ldr	r3, [pc, #24]	; (8008274 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	091b      	lsrs	r3, r3, #4
 8008260:	f003 0307 	and.w	r3, r3, #7
 8008264:	4904      	ldr	r1, [pc, #16]	; (8008278 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008266:	5ccb      	ldrb	r3, [r1, r3]
 8008268:	f003 031f 	and.w	r3, r3, #31
 800826c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008270:	4618      	mov	r0, r3
 8008272:	bd80      	pop	{r7, pc}
 8008274:	58024400 	.word	0x58024400
 8008278:	0801232c 	.word	0x0801232c

0800827c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800827c:	b480      	push	{r7}
 800827e:	b089      	sub	sp, #36	; 0x24
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008284:	4ba1      	ldr	r3, [pc, #644]	; (800850c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008288:	f003 0303 	and.w	r3, r3, #3
 800828c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800828e:	4b9f      	ldr	r3, [pc, #636]	; (800850c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008292:	0b1b      	lsrs	r3, r3, #12
 8008294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008298:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800829a:	4b9c      	ldr	r3, [pc, #624]	; (800850c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800829c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829e:	091b      	lsrs	r3, r3, #4
 80082a0:	f003 0301 	and.w	r3, r3, #1
 80082a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80082a6:	4b99      	ldr	r3, [pc, #612]	; (800850c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082aa:	08db      	lsrs	r3, r3, #3
 80082ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	fb02 f303 	mul.w	r3, r2, r3
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 8111 	beq.w	80084ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	f000 8083 	beq.w	80083d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	f200 80a1 	bhi.w	800841c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d003      	beq.n	80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d056      	beq.n	8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80082e6:	e099      	b.n	800841c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082e8:	4b88      	ldr	r3, [pc, #544]	; (800850c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0320 	and.w	r3, r3, #32
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d02d      	beq.n	8008350 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082f4:	4b85      	ldr	r3, [pc, #532]	; (800850c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	08db      	lsrs	r3, r3, #3
 80082fa:	f003 0303 	and.w	r3, r3, #3
 80082fe:	4a84      	ldr	r2, [pc, #528]	; (8008510 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008300:	fa22 f303 	lsr.w	r3, r2, r3
 8008304:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	ee07 3a90 	vmov	s15, r3
 800830c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800831e:	4b7b      	ldr	r3, [pc, #492]	; (800850c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008332:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008514 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800833a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800833e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800834e:	e087      	b.n	8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	ee07 3a90 	vmov	s15, r3
 8008356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008518 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800835e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008362:	4b6a      	ldr	r3, [pc, #424]	; (800850c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008372:	ed97 6a03 	vldr	s12, [r7, #12]
 8008376:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008514 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800837a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800837e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800838a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800838e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008392:	e065      	b.n	8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	ee07 3a90 	vmov	s15, r3
 800839a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800851c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083a6:	4b59      	ldr	r3, [pc, #356]	; (800850c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ae:	ee07 3a90 	vmov	s15, r3
 80083b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008514 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083d6:	e043      	b.n	8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	ee07 3a90 	vmov	s15, r3
 80083de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80083e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ea:	4b48      	ldr	r3, [pc, #288]	; (800850c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80083fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008514 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800840a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800840e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800841a:	e021      	b.n	8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	ee07 3a90 	vmov	s15, r3
 8008422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008426:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800851c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800842a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800842e:	4b37      	ldr	r3, [pc, #220]	; (800850c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800843e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008442:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008514 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800844a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800844e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800845a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800845e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008460:	4b2a      	ldr	r3, [pc, #168]	; (800850c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008464:	0a5b      	lsrs	r3, r3, #9
 8008466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800846a:	ee07 3a90 	vmov	s15, r3
 800846e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008476:	ee37 7a87 	vadd.f32	s14, s15, s14
 800847a:	edd7 6a07 	vldr	s13, [r7, #28]
 800847e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008486:	ee17 2a90 	vmov	r2, s15
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800848e:	4b1f      	ldr	r3, [pc, #124]	; (800850c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008492:	0c1b      	lsrs	r3, r3, #16
 8008494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008498:	ee07 3a90 	vmov	s15, r3
 800849c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80084ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084b4:	ee17 2a90 	vmov	r2, s15
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80084bc:	4b13      	ldr	r3, [pc, #76]	; (800850c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c0:	0e1b      	lsrs	r3, r3, #24
 80084c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084c6:	ee07 3a90 	vmov	s15, r3
 80084ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80084da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084e2:	ee17 2a90 	vmov	r2, s15
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80084ea:	e008      	b.n	80084fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	609a      	str	r2, [r3, #8]
}
 80084fe:	bf00      	nop
 8008500:	3724      	adds	r7, #36	; 0x24
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	58024400 	.word	0x58024400
 8008510:	03d09000 	.word	0x03d09000
 8008514:	46000000 	.word	0x46000000
 8008518:	4c742400 	.word	0x4c742400
 800851c:	4a742400 	.word	0x4a742400
 8008520:	4af42400 	.word	0x4af42400

08008524 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008524:	b480      	push	{r7}
 8008526:	b089      	sub	sp, #36	; 0x24
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800852c:	4ba1      	ldr	r3, [pc, #644]	; (80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800852e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008530:	f003 0303 	and.w	r3, r3, #3
 8008534:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008536:	4b9f      	ldr	r3, [pc, #636]	; (80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853a:	0d1b      	lsrs	r3, r3, #20
 800853c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008540:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008542:	4b9c      	ldr	r3, [pc, #624]	; (80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008546:	0a1b      	lsrs	r3, r3, #8
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800854e:	4b99      	ldr	r3, [pc, #612]	; (80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008552:	08db      	lsrs	r3, r3, #3
 8008554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	fb02 f303 	mul.w	r3, r2, r3
 800855e:	ee07 3a90 	vmov	s15, r3
 8008562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008566:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 8111 	beq.w	8008794 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	2b02      	cmp	r3, #2
 8008576:	f000 8083 	beq.w	8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	2b02      	cmp	r3, #2
 800857e:	f200 80a1 	bhi.w	80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d003      	beq.n	8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d056      	beq.n	800863c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800858e:	e099      	b.n	80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008590:	4b88      	ldr	r3, [pc, #544]	; (80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0320 	and.w	r3, r3, #32
 8008598:	2b00      	cmp	r3, #0
 800859a:	d02d      	beq.n	80085f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800859c:	4b85      	ldr	r3, [pc, #532]	; (80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	08db      	lsrs	r3, r3, #3
 80085a2:	f003 0303 	and.w	r3, r3, #3
 80085a6:	4a84      	ldr	r2, [pc, #528]	; (80087b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80085a8:	fa22 f303 	lsr.w	r3, r2, r3
 80085ac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	ee07 3a90 	vmov	s15, r3
 80085b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c6:	4b7b      	ldr	r3, [pc, #492]	; (80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80087bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80085f6:	e087      	b.n	8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008602:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80087c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800860a:	4b6a      	ldr	r3, [pc, #424]	; (80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800860c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861a:	ed97 6a03 	vldr	s12, [r7, #12]
 800861e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80087bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800862a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800862e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008636:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800863a:	e065      	b.n	8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008646:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80087c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800864a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800864e:	4b59      	ldr	r3, [pc, #356]	; (80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008656:	ee07 3a90 	vmov	s15, r3
 800865a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800865e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008662:	eddf 5a56 	vldr	s11, [pc, #344]	; 80087bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800866a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800866e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800867a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800867e:	e043      	b.n	8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	ee07 3a90 	vmov	s15, r3
 8008686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800868a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80087c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800868e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008692:	4b48      	ldr	r3, [pc, #288]	; (80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800869a:	ee07 3a90 	vmov	s15, r3
 800869e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80086a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80087bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086c2:	e021      	b.n	8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80087c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086d6:	4b37      	ldr	r3, [pc, #220]	; (80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80087bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008702:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008706:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008708:	4b2a      	ldr	r3, [pc, #168]	; (80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800870a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870c:	0a5b      	lsrs	r3, r3, #9
 800870e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008712:	ee07 3a90 	vmov	s15, r3
 8008716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800871a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800871e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008722:	edd7 6a07 	vldr	s13, [r7, #28]
 8008726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800872a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800872e:	ee17 2a90 	vmov	r2, s15
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008736:	4b1f      	ldr	r3, [pc, #124]	; (80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873a:	0c1b      	lsrs	r3, r3, #16
 800873c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008740:	ee07 3a90 	vmov	s15, r3
 8008744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008748:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800874c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008750:	edd7 6a07 	vldr	s13, [r7, #28]
 8008754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800875c:	ee17 2a90 	vmov	r2, s15
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008764:	4b13      	ldr	r3, [pc, #76]	; (80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008768:	0e1b      	lsrs	r3, r3, #24
 800876a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800876e:	ee07 3a90 	vmov	s15, r3
 8008772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008776:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800877a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800877e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800878a:	ee17 2a90 	vmov	r2, s15
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008792:	e008      	b.n	80087a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	609a      	str	r2, [r3, #8]
}
 80087a6:	bf00      	nop
 80087a8:	3724      	adds	r7, #36	; 0x24
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	58024400 	.word	0x58024400
 80087b8:	03d09000 	.word	0x03d09000
 80087bc:	46000000 	.word	0x46000000
 80087c0:	4c742400 	.word	0x4c742400
 80087c4:	4a742400 	.word	0x4a742400
 80087c8:	4af42400 	.word	0x4af42400

080087cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087da:	4b53      	ldr	r3, [pc, #332]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 80087dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087de:	f003 0303 	and.w	r3, r3, #3
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d101      	bne.n	80087ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e099      	b.n	800891e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80087ea:	4b4f      	ldr	r3, [pc, #316]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a4e      	ldr	r2, [pc, #312]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 80087f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087f6:	f7fc fbd9 	bl	8004fac <HAL_GetTick>
 80087fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087fc:	e008      	b.n	8008810 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80087fe:	f7fc fbd5 	bl	8004fac <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	2b02      	cmp	r3, #2
 800880a:	d901      	bls.n	8008810 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e086      	b.n	800891e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008810:	4b45      	ldr	r3, [pc, #276]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1f0      	bne.n	80087fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800881c:	4b42      	ldr	r3, [pc, #264]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 800881e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008820:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	031b      	lsls	r3, r3, #12
 800882a:	493f      	ldr	r1, [pc, #252]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 800882c:	4313      	orrs	r3, r2
 800882e:	628b      	str	r3, [r1, #40]	; 0x28
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	3b01      	subs	r3, #1
 8008836:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	3b01      	subs	r3, #1
 8008840:	025b      	lsls	r3, r3, #9
 8008842:	b29b      	uxth	r3, r3
 8008844:	431a      	orrs	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	3b01      	subs	r3, #1
 800884c:	041b      	lsls	r3, r3, #16
 800884e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008852:	431a      	orrs	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	3b01      	subs	r3, #1
 800885a:	061b      	lsls	r3, r3, #24
 800885c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008860:	4931      	ldr	r1, [pc, #196]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 8008862:	4313      	orrs	r3, r2
 8008864:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008866:	4b30      	ldr	r3, [pc, #192]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 8008868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	492d      	ldr	r1, [pc, #180]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 8008874:	4313      	orrs	r3, r2
 8008876:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008878:	4b2b      	ldr	r3, [pc, #172]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 800887a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887c:	f023 0220 	bic.w	r2, r3, #32
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	4928      	ldr	r1, [pc, #160]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 8008886:	4313      	orrs	r3, r2
 8008888:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800888a:	4b27      	ldr	r3, [pc, #156]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 800888c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888e:	4a26      	ldr	r2, [pc, #152]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 8008890:	f023 0310 	bic.w	r3, r3, #16
 8008894:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008896:	4b24      	ldr	r3, [pc, #144]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 8008898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800889a:	4b24      	ldr	r3, [pc, #144]	; (800892c <RCCEx_PLL2_Config+0x160>)
 800889c:	4013      	ands	r3, r2
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	69d2      	ldr	r2, [r2, #28]
 80088a2:	00d2      	lsls	r2, r2, #3
 80088a4:	4920      	ldr	r1, [pc, #128]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80088aa:	4b1f      	ldr	r3, [pc, #124]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 80088ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ae:	4a1e      	ldr	r2, [pc, #120]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 80088b0:	f043 0310 	orr.w	r3, r3, #16
 80088b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d106      	bne.n	80088ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80088bc:	4b1a      	ldr	r3, [pc, #104]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 80088be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c0:	4a19      	ldr	r2, [pc, #100]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 80088c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088c8:	e00f      	b.n	80088ea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d106      	bne.n	80088de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80088d0:	4b15      	ldr	r3, [pc, #84]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 80088d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d4:	4a14      	ldr	r2, [pc, #80]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 80088d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088dc:	e005      	b.n	80088ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80088de:	4b12      	ldr	r3, [pc, #72]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 80088e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e2:	4a11      	ldr	r2, [pc, #68]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 80088e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80088ea:	4b0f      	ldr	r3, [pc, #60]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a0e      	ldr	r2, [pc, #56]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 80088f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088f6:	f7fc fb59 	bl	8004fac <HAL_GetTick>
 80088fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088fc:	e008      	b.n	8008910 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80088fe:	f7fc fb55 	bl	8004fac <HAL_GetTick>
 8008902:	4602      	mov	r2, r0
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	2b02      	cmp	r3, #2
 800890a:	d901      	bls.n	8008910 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e006      	b.n	800891e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008910:	4b05      	ldr	r3, [pc, #20]	; (8008928 <RCCEx_PLL2_Config+0x15c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d0f0      	beq.n	80088fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800891c:	7bfb      	ldrb	r3, [r7, #15]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	58024400 	.word	0x58024400
 800892c:	ffff0007 	.word	0xffff0007

08008930 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800893a:	2300      	movs	r3, #0
 800893c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800893e:	4b53      	ldr	r3, [pc, #332]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008942:	f003 0303 	and.w	r3, r3, #3
 8008946:	2b03      	cmp	r3, #3
 8008948:	d101      	bne.n	800894e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e099      	b.n	8008a82 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800894e:	4b4f      	ldr	r3, [pc, #316]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a4e      	ldr	r2, [pc, #312]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800895a:	f7fc fb27 	bl	8004fac <HAL_GetTick>
 800895e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008960:	e008      	b.n	8008974 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008962:	f7fc fb23 	bl	8004fac <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	2b02      	cmp	r3, #2
 800896e:	d901      	bls.n	8008974 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e086      	b.n	8008a82 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008974:	4b45      	ldr	r3, [pc, #276]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1f0      	bne.n	8008962 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008980:	4b42      	ldr	r3, [pc, #264]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008984:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	051b      	lsls	r3, r3, #20
 800898e:	493f      	ldr	r1, [pc, #252]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008990:	4313      	orrs	r3, r2
 8008992:	628b      	str	r3, [r1, #40]	; 0x28
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	3b01      	subs	r3, #1
 800899a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	025b      	lsls	r3, r3, #9
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	431a      	orrs	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	3b01      	subs	r3, #1
 80089b0:	041b      	lsls	r3, r3, #16
 80089b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80089b6:	431a      	orrs	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	3b01      	subs	r3, #1
 80089be:	061b      	lsls	r3, r3, #24
 80089c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80089c4:	4931      	ldr	r1, [pc, #196]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80089ca:	4b30      	ldr	r3, [pc, #192]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 80089cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	492d      	ldr	r1, [pc, #180]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 80089d8:	4313      	orrs	r3, r2
 80089da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80089dc:	4b2b      	ldr	r3, [pc, #172]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 80089de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	4928      	ldr	r1, [pc, #160]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80089ee:	4b27      	ldr	r3, [pc, #156]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 80089f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f2:	4a26      	ldr	r2, [pc, #152]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 80089f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80089fa:	4b24      	ldr	r3, [pc, #144]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 80089fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089fe:	4b24      	ldr	r3, [pc, #144]	; (8008a90 <RCCEx_PLL3_Config+0x160>)
 8008a00:	4013      	ands	r3, r2
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	69d2      	ldr	r2, [r2, #28]
 8008a06:	00d2      	lsls	r2, r2, #3
 8008a08:	4920      	ldr	r1, [pc, #128]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008a0e:	4b1f      	ldr	r3, [pc, #124]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a12:	4a1e      	ldr	r2, [pc, #120]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d106      	bne.n	8008a2e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a20:	4b1a      	ldr	r3, [pc, #104]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a24:	4a19      	ldr	r2, [pc, #100]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008a26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008a2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a2c:	e00f      	b.n	8008a4e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d106      	bne.n	8008a42 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008a34:	4b15      	ldr	r3, [pc, #84]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	4a14      	ldr	r2, [pc, #80]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008a3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a40:	e005      	b.n	8008a4e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a42:	4b12      	ldr	r3, [pc, #72]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a46:	4a11      	ldr	r2, [pc, #68]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008a48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a4e:	4b0f      	ldr	r3, [pc, #60]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a0e      	ldr	r2, [pc, #56]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a5a:	f7fc faa7 	bl	8004fac <HAL_GetTick>
 8008a5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a60:	e008      	b.n	8008a74 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a62:	f7fc faa3 	bl	8004fac <HAL_GetTick>
 8008a66:	4602      	mov	r2, r0
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d901      	bls.n	8008a74 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e006      	b.n	8008a82 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a74:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <RCCEx_PLL3_Config+0x15c>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d0f0      	beq.n	8008a62 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	58024400 	.word	0x58024400
 8008a90:	ffff0007 	.word	0xffff0007

08008a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e049      	b.n	8008b3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d106      	bne.n	8008ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f841 	bl	8008b42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3304      	adds	r3, #4
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	f000 fa00 	bl	8008ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
	...

08008b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d001      	beq.n	8008b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e054      	b.n	8008c1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0201 	orr.w	r2, r2, #1
 8008b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a26      	ldr	r2, [pc, #152]	; (8008c28 <HAL_TIM_Base_Start_IT+0xd0>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d022      	beq.n	8008bd8 <HAL_TIM_Base_Start_IT+0x80>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b9a:	d01d      	beq.n	8008bd8 <HAL_TIM_Base_Start_IT+0x80>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a22      	ldr	r2, [pc, #136]	; (8008c2c <HAL_TIM_Base_Start_IT+0xd4>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d018      	beq.n	8008bd8 <HAL_TIM_Base_Start_IT+0x80>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a21      	ldr	r2, [pc, #132]	; (8008c30 <HAL_TIM_Base_Start_IT+0xd8>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d013      	beq.n	8008bd8 <HAL_TIM_Base_Start_IT+0x80>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a1f      	ldr	r2, [pc, #124]	; (8008c34 <HAL_TIM_Base_Start_IT+0xdc>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d00e      	beq.n	8008bd8 <HAL_TIM_Base_Start_IT+0x80>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a1e      	ldr	r2, [pc, #120]	; (8008c38 <HAL_TIM_Base_Start_IT+0xe0>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d009      	beq.n	8008bd8 <HAL_TIM_Base_Start_IT+0x80>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a1c      	ldr	r2, [pc, #112]	; (8008c3c <HAL_TIM_Base_Start_IT+0xe4>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d004      	beq.n	8008bd8 <HAL_TIM_Base_Start_IT+0x80>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a1b      	ldr	r2, [pc, #108]	; (8008c40 <HAL_TIM_Base_Start_IT+0xe8>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d115      	bne.n	8008c04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689a      	ldr	r2, [r3, #8]
 8008bde:	4b19      	ldr	r3, [pc, #100]	; (8008c44 <HAL_TIM_Base_Start_IT+0xec>)
 8008be0:	4013      	ands	r3, r2
 8008be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2b06      	cmp	r3, #6
 8008be8:	d015      	beq.n	8008c16 <HAL_TIM_Base_Start_IT+0xbe>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bf0:	d011      	beq.n	8008c16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f042 0201 	orr.w	r2, r2, #1
 8008c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c02:	e008      	b.n	8008c16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f042 0201 	orr.w	r2, r2, #1
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	e000      	b.n	8008c18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	40010000 	.word	0x40010000
 8008c2c:	40000400 	.word	0x40000400
 8008c30:	40000800 	.word	0x40000800
 8008c34:	40000c00 	.word	0x40000c00
 8008c38:	40010400 	.word	0x40010400
 8008c3c:	40001800 	.word	0x40001800
 8008c40:	40014000 	.word	0x40014000
 8008c44:	00010007 	.word	0x00010007

08008c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	f003 0302 	and.w	r3, r3, #2
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d122      	bne.n	8008ca4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f003 0302 	and.w	r3, r3, #2
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d11b      	bne.n	8008ca4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f06f 0202 	mvn.w	r2, #2
 8008c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	f003 0303 	and.w	r3, r3, #3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d003      	beq.n	8008c92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f905 	bl	8008e9a <HAL_TIM_IC_CaptureCallback>
 8008c90:	e005      	b.n	8008c9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f8f7 	bl	8008e86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f908 	bl	8008eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	f003 0304 	and.w	r3, r3, #4
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	d122      	bne.n	8008cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	f003 0304 	and.w	r3, r3, #4
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d11b      	bne.n	8008cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f06f 0204 	mvn.w	r2, #4
 8008cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2202      	movs	r2, #2
 8008cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f8db 	bl	8008e9a <HAL_TIM_IC_CaptureCallback>
 8008ce4:	e005      	b.n	8008cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f8cd 	bl	8008e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f8de 	bl	8008eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	f003 0308 	and.w	r3, r3, #8
 8008d02:	2b08      	cmp	r3, #8
 8008d04:	d122      	bne.n	8008d4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	f003 0308 	and.w	r3, r3, #8
 8008d10:	2b08      	cmp	r3, #8
 8008d12:	d11b      	bne.n	8008d4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f06f 0208 	mvn.w	r2, #8
 8008d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2204      	movs	r2, #4
 8008d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	f003 0303 	and.w	r3, r3, #3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f8b1 	bl	8008e9a <HAL_TIM_IC_CaptureCallback>
 8008d38:	e005      	b.n	8008d46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f8a3 	bl	8008e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f8b4 	bl	8008eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	f003 0310 	and.w	r3, r3, #16
 8008d56:	2b10      	cmp	r3, #16
 8008d58:	d122      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b10      	cmp	r3, #16
 8008d66:	d11b      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f06f 0210 	mvn.w	r2, #16
 8008d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2208      	movs	r2, #8
 8008d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f887 	bl	8008e9a <HAL_TIM_IC_CaptureCallback>
 8008d8c:	e005      	b.n	8008d9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f879 	bl	8008e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f88a 	bl	8008eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d10e      	bne.n	8008dcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d107      	bne.n	8008dcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f06f 0201 	mvn.w	r2, #1
 8008dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7f9 fdf6 	bl	80029b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd6:	2b80      	cmp	r3, #128	; 0x80
 8008dd8:	d10e      	bne.n	8008df8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de4:	2b80      	cmp	r3, #128	; 0x80
 8008de6:	d107      	bne.n	8008df8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f914 	bl	8009020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e06:	d10e      	bne.n	8008e26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e12:	2b80      	cmp	r3, #128	; 0x80
 8008e14:	d107      	bne.n	8008e26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f907 	bl	8009034 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e30:	2b40      	cmp	r3, #64	; 0x40
 8008e32:	d10e      	bne.n	8008e52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3e:	2b40      	cmp	r3, #64	; 0x40
 8008e40:	d107      	bne.n	8008e52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f838 	bl	8008ec2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	f003 0320 	and.w	r3, r3, #32
 8008e5c:	2b20      	cmp	r3, #32
 8008e5e:	d10e      	bne.n	8008e7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	f003 0320 	and.w	r3, r3, #32
 8008e6a:	2b20      	cmp	r3, #32
 8008e6c:	d107      	bne.n	8008e7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f06f 0220 	mvn.w	r2, #32
 8008e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f8c7 	bl	800900c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e7e:	bf00      	nop
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b083      	sub	sp, #12
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e8e:	bf00      	nop
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b083      	sub	sp, #12
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ea2:	bf00      	nop
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008eb6:	bf00      	nop
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008eca:	bf00      	nop
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
	...

08008ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a40      	ldr	r2, [pc, #256]	; (8008fec <TIM_Base_SetConfig+0x114>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d013      	beq.n	8008f18 <TIM_Base_SetConfig+0x40>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef6:	d00f      	beq.n	8008f18 <TIM_Base_SetConfig+0x40>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a3d      	ldr	r2, [pc, #244]	; (8008ff0 <TIM_Base_SetConfig+0x118>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d00b      	beq.n	8008f18 <TIM_Base_SetConfig+0x40>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a3c      	ldr	r2, [pc, #240]	; (8008ff4 <TIM_Base_SetConfig+0x11c>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d007      	beq.n	8008f18 <TIM_Base_SetConfig+0x40>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a3b      	ldr	r2, [pc, #236]	; (8008ff8 <TIM_Base_SetConfig+0x120>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d003      	beq.n	8008f18 <TIM_Base_SetConfig+0x40>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a3a      	ldr	r2, [pc, #232]	; (8008ffc <TIM_Base_SetConfig+0x124>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d108      	bne.n	8008f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a2f      	ldr	r2, [pc, #188]	; (8008fec <TIM_Base_SetConfig+0x114>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d01f      	beq.n	8008f72 <TIM_Base_SetConfig+0x9a>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f38:	d01b      	beq.n	8008f72 <TIM_Base_SetConfig+0x9a>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a2c      	ldr	r2, [pc, #176]	; (8008ff0 <TIM_Base_SetConfig+0x118>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d017      	beq.n	8008f72 <TIM_Base_SetConfig+0x9a>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a2b      	ldr	r2, [pc, #172]	; (8008ff4 <TIM_Base_SetConfig+0x11c>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d013      	beq.n	8008f72 <TIM_Base_SetConfig+0x9a>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a2a      	ldr	r2, [pc, #168]	; (8008ff8 <TIM_Base_SetConfig+0x120>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d00f      	beq.n	8008f72 <TIM_Base_SetConfig+0x9a>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a29      	ldr	r2, [pc, #164]	; (8008ffc <TIM_Base_SetConfig+0x124>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d00b      	beq.n	8008f72 <TIM_Base_SetConfig+0x9a>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a28      	ldr	r2, [pc, #160]	; (8009000 <TIM_Base_SetConfig+0x128>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d007      	beq.n	8008f72 <TIM_Base_SetConfig+0x9a>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a27      	ldr	r2, [pc, #156]	; (8009004 <TIM_Base_SetConfig+0x12c>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d003      	beq.n	8008f72 <TIM_Base_SetConfig+0x9a>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a26      	ldr	r2, [pc, #152]	; (8009008 <TIM_Base_SetConfig+0x130>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d108      	bne.n	8008f84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	689a      	ldr	r2, [r3, #8]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a10      	ldr	r2, [pc, #64]	; (8008fec <TIM_Base_SetConfig+0x114>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d00f      	beq.n	8008fd0 <TIM_Base_SetConfig+0xf8>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a12      	ldr	r2, [pc, #72]	; (8008ffc <TIM_Base_SetConfig+0x124>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d00b      	beq.n	8008fd0 <TIM_Base_SetConfig+0xf8>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a11      	ldr	r2, [pc, #68]	; (8009000 <TIM_Base_SetConfig+0x128>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d007      	beq.n	8008fd0 <TIM_Base_SetConfig+0xf8>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a10      	ldr	r2, [pc, #64]	; (8009004 <TIM_Base_SetConfig+0x12c>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d003      	beq.n	8008fd0 <TIM_Base_SetConfig+0xf8>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a0f      	ldr	r2, [pc, #60]	; (8009008 <TIM_Base_SetConfig+0x130>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d103      	bne.n	8008fd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	691a      	ldr	r2, [r3, #16]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	615a      	str	r2, [r3, #20]
}
 8008fde:	bf00      	nop
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	40010000 	.word	0x40010000
 8008ff0:	40000400 	.word	0x40000400
 8008ff4:	40000800 	.word	0x40000800
 8008ff8:	40000c00 	.word	0x40000c00
 8008ffc:	40010400 	.word	0x40010400
 8009000:	40014000 	.word	0x40014000
 8009004:	40014400 	.word	0x40014400
 8009008:	40014800 	.word	0x40014800

0800900c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e042      	b.n	80090e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009060:	2b00      	cmp	r3, #0
 8009062:	d106      	bne.n	8009072 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7f9 fe65 	bl	8002d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2224      	movs	r2, #36	; 0x24
 8009076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f022 0201 	bic.w	r2, r2, #1
 8009088:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fc80 	bl	8009990 <UART_SetConfig>
 8009090:	4603      	mov	r3, r0
 8009092:	2b01      	cmp	r3, #1
 8009094:	d101      	bne.n	800909a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e022      	b.n	80090e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d002      	beq.n	80090a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f001 f9dc 	bl	800a460 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689a      	ldr	r2, [r3, #8]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f042 0201 	orr.w	r2, r2, #1
 80090d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 fa63 	bl	800a5a4 <UART_CheckIdleState>
 80090de:	4603      	mov	r3, r0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08a      	sub	sp, #40	; 0x28
 80090ec:	af02      	add	r7, sp, #8
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	603b      	str	r3, [r7, #0]
 80090f4:	4613      	mov	r3, r2
 80090f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090fe:	2b20      	cmp	r3, #32
 8009100:	f040 8083 	bne.w	800920a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d002      	beq.n	8009110 <HAL_UART_Transmit+0x28>
 800910a:	88fb      	ldrh	r3, [r7, #6]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	e07b      	b.n	800920c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800911a:	2b01      	cmp	r3, #1
 800911c:	d101      	bne.n	8009122 <HAL_UART_Transmit+0x3a>
 800911e:	2302      	movs	r3, #2
 8009120:	e074      	b.n	800920c <HAL_UART_Transmit+0x124>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2221      	movs	r2, #33	; 0x21
 8009136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800913a:	f7fb ff37 	bl	8004fac <HAL_GetTick>
 800913e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	88fa      	ldrh	r2, [r7, #6]
 8009144:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	88fa      	ldrh	r2, [r7, #6]
 800914c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009158:	d108      	bne.n	800916c <HAL_UART_Transmit+0x84>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d104      	bne.n	800916c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009162:	2300      	movs	r3, #0
 8009164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	61bb      	str	r3, [r7, #24]
 800916a:	e003      	b.n	8009174 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009170:	2300      	movs	r3, #0
 8009172:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800917c:	e02c      	b.n	80091d8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2200      	movs	r2, #0
 8009186:	2180      	movs	r1, #128	; 0x80
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f001 fa56 	bl	800a63a <UART_WaitOnFlagUntilTimeout>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e039      	b.n	800920c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10b      	bne.n	80091b6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	3302      	adds	r3, #2
 80091b2:	61bb      	str	r3, [r7, #24]
 80091b4:	e007      	b.n	80091c6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	781a      	ldrb	r2, [r3, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	3301      	adds	r3, #1
 80091c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	3b01      	subs	r3, #1
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80091de:	b29b      	uxth	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1cc      	bne.n	800917e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	2200      	movs	r2, #0
 80091ec:	2140      	movs	r1, #64	; 0x40
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f001 fa23 	bl	800a63a <UART_WaitOnFlagUntilTimeout>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e006      	b.n	800920c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2220      	movs	r2, #32
 8009202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	e000      	b.n	800920c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800920a:	2302      	movs	r3, #2
  }
}
 800920c:	4618      	mov	r0, r3
 800920e:	3720      	adds	r7, #32
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b0ba      	sub	sp, #232	; 0xe8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800923a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800923e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009242:	4013      	ands	r3, r2
 8009244:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009248:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800924c:	2b00      	cmp	r3, #0
 800924e:	d11b      	bne.n	8009288 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009254:	f003 0320 	and.w	r3, r3, #32
 8009258:	2b00      	cmp	r3, #0
 800925a:	d015      	beq.n	8009288 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800925c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009260:	f003 0320 	and.w	r3, r3, #32
 8009264:	2b00      	cmp	r3, #0
 8009266:	d105      	bne.n	8009274 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800926c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d009      	beq.n	8009288 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 835a 	beq.w	8009932 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	4798      	blx	r3
      }
      return;
 8009286:	e354      	b.n	8009932 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009288:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 811f 	beq.w	80094d0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009292:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009296:	4b8b      	ldr	r3, [pc, #556]	; (80094c4 <HAL_UART_IRQHandler+0x2b0>)
 8009298:	4013      	ands	r3, r2
 800929a:	2b00      	cmp	r3, #0
 800929c:	d106      	bne.n	80092ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800929e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80092a2:	4b89      	ldr	r3, [pc, #548]	; (80094c8 <HAL_UART_IRQHandler+0x2b4>)
 80092a4:	4013      	ands	r3, r2
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 8112 	beq.w	80094d0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b0:	f003 0301 	and.w	r3, r3, #1
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d011      	beq.n	80092dc <HAL_UART_IRQHandler+0xc8>
 80092b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00b      	beq.n	80092dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2201      	movs	r2, #1
 80092ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092d2:	f043 0201 	orr.w	r2, r3, #1
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e0:	f003 0302 	and.w	r3, r3, #2
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d011      	beq.n	800930c <HAL_UART_IRQHandler+0xf8>
 80092e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092ec:	f003 0301 	and.w	r3, r3, #1
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00b      	beq.n	800930c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2202      	movs	r2, #2
 80092fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009302:	f043 0204 	orr.w	r2, r3, #4
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800930c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009310:	f003 0304 	and.w	r3, r3, #4
 8009314:	2b00      	cmp	r3, #0
 8009316:	d011      	beq.n	800933c <HAL_UART_IRQHandler+0x128>
 8009318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00b      	beq.n	800933c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2204      	movs	r2, #4
 800932a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009332:	f043 0202 	orr.w	r2, r3, #2
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800933c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009340:	f003 0308 	and.w	r3, r3, #8
 8009344:	2b00      	cmp	r3, #0
 8009346:	d017      	beq.n	8009378 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800934c:	f003 0320 	and.w	r3, r3, #32
 8009350:	2b00      	cmp	r3, #0
 8009352:	d105      	bne.n	8009360 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009354:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009358:	4b5a      	ldr	r3, [pc, #360]	; (80094c4 <HAL_UART_IRQHandler+0x2b0>)
 800935a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00b      	beq.n	8009378 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2208      	movs	r2, #8
 8009366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800936e:	f043 0208 	orr.w	r2, r3, #8
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800937c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009380:	2b00      	cmp	r3, #0
 8009382:	d012      	beq.n	80093aa <HAL_UART_IRQHandler+0x196>
 8009384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00c      	beq.n	80093aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093a0:	f043 0220 	orr.w	r2, r3, #32
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 82c0 	beq.w	8009936 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ba:	f003 0320 	and.w	r3, r3, #32
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d013      	beq.n	80093ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c6:	f003 0320 	and.w	r3, r3, #32
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d105      	bne.n	80093da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d007      	beq.n	80093ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093fe:	2b40      	cmp	r3, #64	; 0x40
 8009400:	d005      	beq.n	800940e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009406:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800940a:	2b00      	cmp	r3, #0
 800940c:	d04f      	beq.n	80094ae <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f001 f9dc 	bl	800a7cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941e:	2b40      	cmp	r3, #64	; 0x40
 8009420:	d141      	bne.n	80094a6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3308      	adds	r3, #8
 8009428:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009430:	e853 3f00 	ldrex	r3, [r3]
 8009434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009438:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800943c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3308      	adds	r3, #8
 800944a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800944e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009456:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800945a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800945e:	e841 2300 	strex	r3, r2, [r1]
 8009462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1d9      	bne.n	8009422 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009472:	2b00      	cmp	r3, #0
 8009474:	d013      	beq.n	800949e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800947a:	4a14      	ldr	r2, [pc, #80]	; (80094cc <HAL_UART_IRQHandler+0x2b8>)
 800947c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009482:	4618      	mov	r0, r3
 8009484:	f7fc f9cc 	bl	8005820 <HAL_DMA_Abort_IT>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d017      	beq.n	80094be <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009498:	4610      	mov	r0, r2
 800949a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800949c:	e00f      	b.n	80094be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fa60 	bl	8009964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a4:	e00b      	b.n	80094be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fa5c 	bl	8009964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ac:	e007      	b.n	80094be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 fa58 	bl	8009964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80094bc:	e23b      	b.n	8009936 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094be:	bf00      	nop
    return;
 80094c0:	e239      	b.n	8009936 <HAL_UART_IRQHandler+0x722>
 80094c2:	bf00      	nop
 80094c4:	10000001 	.word	0x10000001
 80094c8:	04000120 	.word	0x04000120
 80094cc:	0800a899 	.word	0x0800a899

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	f040 81ce 	bne.w	8009876 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80094da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094de:	f003 0310 	and.w	r3, r3, #16
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f000 81c7 	beq.w	8009876 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80094e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094ec:	f003 0310 	and.w	r3, r3, #16
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 81c0 	beq.w	8009876 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2210      	movs	r2, #16
 80094fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009508:	2b40      	cmp	r3, #64	; 0x40
 800950a:	f040 813b 	bne.w	8009784 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a8b      	ldr	r2, [pc, #556]	; (8009744 <HAL_UART_IRQHandler+0x530>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d059      	beq.n	80095ce <HAL_UART_IRQHandler+0x3ba>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a89      	ldr	r2, [pc, #548]	; (8009748 <HAL_UART_IRQHandler+0x534>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d053      	beq.n	80095ce <HAL_UART_IRQHandler+0x3ba>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a87      	ldr	r2, [pc, #540]	; (800974c <HAL_UART_IRQHandler+0x538>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d04d      	beq.n	80095ce <HAL_UART_IRQHandler+0x3ba>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a85      	ldr	r2, [pc, #532]	; (8009750 <HAL_UART_IRQHandler+0x53c>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d047      	beq.n	80095ce <HAL_UART_IRQHandler+0x3ba>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a83      	ldr	r2, [pc, #524]	; (8009754 <HAL_UART_IRQHandler+0x540>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d041      	beq.n	80095ce <HAL_UART_IRQHandler+0x3ba>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a81      	ldr	r2, [pc, #516]	; (8009758 <HAL_UART_IRQHandler+0x544>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d03b      	beq.n	80095ce <HAL_UART_IRQHandler+0x3ba>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a7f      	ldr	r2, [pc, #508]	; (800975c <HAL_UART_IRQHandler+0x548>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d035      	beq.n	80095ce <HAL_UART_IRQHandler+0x3ba>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a7d      	ldr	r2, [pc, #500]	; (8009760 <HAL_UART_IRQHandler+0x54c>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d02f      	beq.n	80095ce <HAL_UART_IRQHandler+0x3ba>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a7b      	ldr	r2, [pc, #492]	; (8009764 <HAL_UART_IRQHandler+0x550>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d029      	beq.n	80095ce <HAL_UART_IRQHandler+0x3ba>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a79      	ldr	r2, [pc, #484]	; (8009768 <HAL_UART_IRQHandler+0x554>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d023      	beq.n	80095ce <HAL_UART_IRQHandler+0x3ba>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a77      	ldr	r2, [pc, #476]	; (800976c <HAL_UART_IRQHandler+0x558>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d01d      	beq.n	80095ce <HAL_UART_IRQHandler+0x3ba>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a75      	ldr	r2, [pc, #468]	; (8009770 <HAL_UART_IRQHandler+0x55c>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d017      	beq.n	80095ce <HAL_UART_IRQHandler+0x3ba>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a73      	ldr	r2, [pc, #460]	; (8009774 <HAL_UART_IRQHandler+0x560>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d011      	beq.n	80095ce <HAL_UART_IRQHandler+0x3ba>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a71      	ldr	r2, [pc, #452]	; (8009778 <HAL_UART_IRQHandler+0x564>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d00b      	beq.n	80095ce <HAL_UART_IRQHandler+0x3ba>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a6f      	ldr	r2, [pc, #444]	; (800977c <HAL_UART_IRQHandler+0x568>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d005      	beq.n	80095ce <HAL_UART_IRQHandler+0x3ba>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a6d      	ldr	r2, [pc, #436]	; (8009780 <HAL_UART_IRQHandler+0x56c>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d105      	bne.n	80095da <HAL_UART_IRQHandler+0x3c6>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	e004      	b.n	80095e4 <HAL_UART_IRQHandler+0x3d0>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 81a4 	beq.w	800993a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095fc:	429a      	cmp	r2, r3
 80095fe:	f080 819c 	bcs.w	800993a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009608:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009616:	f000 8086 	beq.w	8009726 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009622:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009626:	e853 3f00 	ldrex	r3, [r3]
 800962a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800962e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009632:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009636:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009644:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009648:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009650:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009654:	e841 2300 	strex	r3, r2, [r1]
 8009658:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800965c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1da      	bne.n	800961a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3308      	adds	r3, #8
 800966a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800966e:	e853 3f00 	ldrex	r3, [r3]
 8009672:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009674:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009676:	f023 0301 	bic.w	r3, r3, #1
 800967a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3308      	adds	r3, #8
 8009684:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009688:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800968c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009690:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009694:	e841 2300 	strex	r3, r2, [r1]
 8009698:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800969a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1e1      	bne.n	8009664 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3308      	adds	r3, #8
 80096a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096aa:	e853 3f00 	ldrex	r3, [r3]
 80096ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80096b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	3308      	adds	r3, #8
 80096c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80096c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80096c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096cc:	e841 2300 	strex	r3, r2, [r1]
 80096d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80096d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1e3      	bne.n	80096a0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2220      	movs	r2, #32
 80096dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ee:	e853 3f00 	ldrex	r3, [r3]
 80096f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096f6:	f023 0310 	bic.w	r3, r3, #16
 80096fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009708:	65bb      	str	r3, [r7, #88]	; 0x58
 800970a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800970e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009710:	e841 2300 	strex	r3, r2, [r1]
 8009714:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1e4      	bne.n	80096e6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009720:	4618      	mov	r0, r3
 8009722:	f7fb fd5f 	bl	80051e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009732:	b29b      	uxth	r3, r3
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	b29b      	uxth	r3, r3
 8009738:	4619      	mov	r1, r3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f91c 	bl	8009978 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009740:	e0fb      	b.n	800993a <HAL_UART_IRQHandler+0x726>
 8009742:	bf00      	nop
 8009744:	40020010 	.word	0x40020010
 8009748:	40020028 	.word	0x40020028
 800974c:	40020040 	.word	0x40020040
 8009750:	40020058 	.word	0x40020058
 8009754:	40020070 	.word	0x40020070
 8009758:	40020088 	.word	0x40020088
 800975c:	400200a0 	.word	0x400200a0
 8009760:	400200b8 	.word	0x400200b8
 8009764:	40020410 	.word	0x40020410
 8009768:	40020428 	.word	0x40020428
 800976c:	40020440 	.word	0x40020440
 8009770:	40020458 	.word	0x40020458
 8009774:	40020470 	.word	0x40020470
 8009778:	40020488 	.word	0x40020488
 800977c:	400204a0 	.word	0x400204a0
 8009780:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009790:	b29b      	uxth	r3, r3
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800979e:	b29b      	uxth	r3, r3
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f000 80cc 	beq.w	800993e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80097a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f000 80c7 	beq.w	800993e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	461a      	mov	r2, r3
 80097ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097d2:	647b      	str	r3, [r7, #68]	; 0x44
 80097d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e4      	bne.n	80097b0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3308      	adds	r3, #8
 80097ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f0:	e853 3f00 	ldrex	r3, [r3]
 80097f4:	623b      	str	r3, [r7, #32]
   return(result);
 80097f6:	6a3a      	ldr	r2, [r7, #32]
 80097f8:	4b54      	ldr	r3, [pc, #336]	; (800994c <HAL_UART_IRQHandler+0x738>)
 80097fa:	4013      	ands	r3, r2
 80097fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	3308      	adds	r3, #8
 8009806:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800980a:	633a      	str	r2, [r7, #48]	; 0x30
 800980c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009812:	e841 2300 	strex	r3, r2, [r1]
 8009816:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1e3      	bne.n	80097e6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2220      	movs	r2, #32
 8009822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	e853 3f00 	ldrex	r3, [r3]
 800983e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f023 0310 	bic.w	r3, r3, #16
 8009846:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009854:	61fb      	str	r3, [r7, #28]
 8009856:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009858:	69b9      	ldr	r1, [r7, #24]
 800985a:	69fa      	ldr	r2, [r7, #28]
 800985c:	e841 2300 	strex	r3, r2, [r1]
 8009860:	617b      	str	r3, [r7, #20]
   return(result);
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1e4      	bne.n	8009832 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f882 	bl	8009978 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009874:	e063      	b.n	800993e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800987a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00e      	beq.n	80098a0 <HAL_UART_IRQHandler+0x68c>
 8009882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800988a:	2b00      	cmp	r3, #0
 800988c:	d008      	beq.n	80098a0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009896:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f001 f83e 	bl	800a91a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800989e:	e051      	b.n	8009944 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d014      	beq.n	80098d6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d105      	bne.n	80098c4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d008      	beq.n	80098d6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d03a      	beq.n	8009942 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	4798      	blx	r3
    }
    return;
 80098d4:	e035      	b.n	8009942 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d009      	beq.n	80098f6 <HAL_UART_IRQHandler+0x6e2>
 80098e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 ffe8 	bl	800a8c4 <UART_EndTransmit_IT>
    return;
 80098f4:	e026      	b.n	8009944 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80098f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d009      	beq.n	8009916 <HAL_UART_IRQHandler+0x702>
 8009902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009906:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d003      	beq.n	8009916 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f001 f817 	bl	800a942 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009914:	e016      	b.n	8009944 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800991a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d010      	beq.n	8009944 <HAL_UART_IRQHandler+0x730>
 8009922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009926:	2b00      	cmp	r3, #0
 8009928:	da0c      	bge.n	8009944 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 ffff 	bl	800a92e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009930:	e008      	b.n	8009944 <HAL_UART_IRQHandler+0x730>
      return;
 8009932:	bf00      	nop
 8009934:	e006      	b.n	8009944 <HAL_UART_IRQHandler+0x730>
    return;
 8009936:	bf00      	nop
 8009938:	e004      	b.n	8009944 <HAL_UART_IRQHandler+0x730>
      return;
 800993a:	bf00      	nop
 800993c:	e002      	b.n	8009944 <HAL_UART_IRQHandler+0x730>
      return;
 800993e:	bf00      	nop
 8009940:	e000      	b.n	8009944 <HAL_UART_IRQHandler+0x730>
    return;
 8009942:	bf00      	nop
  }
}
 8009944:	37e8      	adds	r7, #232	; 0xe8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	effffffe 	.word	0xeffffffe

08009950 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009994:	b092      	sub	sp, #72	; 0x48
 8009996:	af00      	add	r7, sp, #0
 8009998:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	689a      	ldr	r2, [r3, #8]
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	431a      	orrs	r2, r3
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	431a      	orrs	r2, r3
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	69db      	ldr	r3, [r3, #28]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	4bbe      	ldr	r3, [pc, #760]	; (8009cb8 <UART_SetConfig+0x328>)
 80099c0:	4013      	ands	r3, r2
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	6812      	ldr	r2, [r2, #0]
 80099c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099c8:	430b      	orrs	r3, r1
 80099ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	68da      	ldr	r2, [r3, #12]
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	430a      	orrs	r2, r1
 80099e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4ab3      	ldr	r2, [pc, #716]	; (8009cbc <UART_SetConfig+0x32c>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d004      	beq.n	80099fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099f8:	4313      	orrs	r3, r2
 80099fa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	689a      	ldr	r2, [r3, #8]
 8009a02:	4baf      	ldr	r3, [pc, #700]	; (8009cc0 <UART_SetConfig+0x330>)
 8009a04:	4013      	ands	r3, r2
 8009a06:	697a      	ldr	r2, [r7, #20]
 8009a08:	6812      	ldr	r2, [r2, #0]
 8009a0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a0c:	430b      	orrs	r3, r1
 8009a0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a16:	f023 010f 	bic.w	r1, r3, #15
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	430a      	orrs	r2, r1
 8009a24:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4aa6      	ldr	r2, [pc, #664]	; (8009cc4 <UART_SetConfig+0x334>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d177      	bne.n	8009b20 <UART_SetConfig+0x190>
 8009a30:	4ba5      	ldr	r3, [pc, #660]	; (8009cc8 <UART_SetConfig+0x338>)
 8009a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a38:	2b28      	cmp	r3, #40	; 0x28
 8009a3a:	d86d      	bhi.n	8009b18 <UART_SetConfig+0x188>
 8009a3c:	a201      	add	r2, pc, #4	; (adr r2, 8009a44 <UART_SetConfig+0xb4>)
 8009a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a42:	bf00      	nop
 8009a44:	08009ae9 	.word	0x08009ae9
 8009a48:	08009b19 	.word	0x08009b19
 8009a4c:	08009b19 	.word	0x08009b19
 8009a50:	08009b19 	.word	0x08009b19
 8009a54:	08009b19 	.word	0x08009b19
 8009a58:	08009b19 	.word	0x08009b19
 8009a5c:	08009b19 	.word	0x08009b19
 8009a60:	08009b19 	.word	0x08009b19
 8009a64:	08009af1 	.word	0x08009af1
 8009a68:	08009b19 	.word	0x08009b19
 8009a6c:	08009b19 	.word	0x08009b19
 8009a70:	08009b19 	.word	0x08009b19
 8009a74:	08009b19 	.word	0x08009b19
 8009a78:	08009b19 	.word	0x08009b19
 8009a7c:	08009b19 	.word	0x08009b19
 8009a80:	08009b19 	.word	0x08009b19
 8009a84:	08009af9 	.word	0x08009af9
 8009a88:	08009b19 	.word	0x08009b19
 8009a8c:	08009b19 	.word	0x08009b19
 8009a90:	08009b19 	.word	0x08009b19
 8009a94:	08009b19 	.word	0x08009b19
 8009a98:	08009b19 	.word	0x08009b19
 8009a9c:	08009b19 	.word	0x08009b19
 8009aa0:	08009b19 	.word	0x08009b19
 8009aa4:	08009b01 	.word	0x08009b01
 8009aa8:	08009b19 	.word	0x08009b19
 8009aac:	08009b19 	.word	0x08009b19
 8009ab0:	08009b19 	.word	0x08009b19
 8009ab4:	08009b19 	.word	0x08009b19
 8009ab8:	08009b19 	.word	0x08009b19
 8009abc:	08009b19 	.word	0x08009b19
 8009ac0:	08009b19 	.word	0x08009b19
 8009ac4:	08009b09 	.word	0x08009b09
 8009ac8:	08009b19 	.word	0x08009b19
 8009acc:	08009b19 	.word	0x08009b19
 8009ad0:	08009b19 	.word	0x08009b19
 8009ad4:	08009b19 	.word	0x08009b19
 8009ad8:	08009b19 	.word	0x08009b19
 8009adc:	08009b19 	.word	0x08009b19
 8009ae0:	08009b19 	.word	0x08009b19
 8009ae4:	08009b11 	.word	0x08009b11
 8009ae8:	2301      	movs	r3, #1
 8009aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aee:	e222      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009af0:	2304      	movs	r3, #4
 8009af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af6:	e21e      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009af8:	2308      	movs	r3, #8
 8009afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afe:	e21a      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009b00:	2310      	movs	r3, #16
 8009b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b06:	e216      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009b08:	2320      	movs	r3, #32
 8009b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0e:	e212      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009b10:	2340      	movs	r3, #64	; 0x40
 8009b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b16:	e20e      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009b18:	2380      	movs	r3, #128	; 0x80
 8009b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1e:	e20a      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a69      	ldr	r2, [pc, #420]	; (8009ccc <UART_SetConfig+0x33c>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d130      	bne.n	8009b8c <UART_SetConfig+0x1fc>
 8009b2a:	4b67      	ldr	r3, [pc, #412]	; (8009cc8 <UART_SetConfig+0x338>)
 8009b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b2e:	f003 0307 	and.w	r3, r3, #7
 8009b32:	2b05      	cmp	r3, #5
 8009b34:	d826      	bhi.n	8009b84 <UART_SetConfig+0x1f4>
 8009b36:	a201      	add	r2, pc, #4	; (adr r2, 8009b3c <UART_SetConfig+0x1ac>)
 8009b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3c:	08009b55 	.word	0x08009b55
 8009b40:	08009b5d 	.word	0x08009b5d
 8009b44:	08009b65 	.word	0x08009b65
 8009b48:	08009b6d 	.word	0x08009b6d
 8009b4c:	08009b75 	.word	0x08009b75
 8009b50:	08009b7d 	.word	0x08009b7d
 8009b54:	2300      	movs	r3, #0
 8009b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5a:	e1ec      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009b5c:	2304      	movs	r3, #4
 8009b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b62:	e1e8      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009b64:	2308      	movs	r3, #8
 8009b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6a:	e1e4      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009b6c:	2310      	movs	r3, #16
 8009b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b72:	e1e0      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009b74:	2320      	movs	r3, #32
 8009b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7a:	e1dc      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009b7c:	2340      	movs	r3, #64	; 0x40
 8009b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b82:	e1d8      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009b84:	2380      	movs	r3, #128	; 0x80
 8009b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b8a:	e1d4      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a4f      	ldr	r2, [pc, #316]	; (8009cd0 <UART_SetConfig+0x340>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d130      	bne.n	8009bf8 <UART_SetConfig+0x268>
 8009b96:	4b4c      	ldr	r3, [pc, #304]	; (8009cc8 <UART_SetConfig+0x338>)
 8009b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b9a:	f003 0307 	and.w	r3, r3, #7
 8009b9e:	2b05      	cmp	r3, #5
 8009ba0:	d826      	bhi.n	8009bf0 <UART_SetConfig+0x260>
 8009ba2:	a201      	add	r2, pc, #4	; (adr r2, 8009ba8 <UART_SetConfig+0x218>)
 8009ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba8:	08009bc1 	.word	0x08009bc1
 8009bac:	08009bc9 	.word	0x08009bc9
 8009bb0:	08009bd1 	.word	0x08009bd1
 8009bb4:	08009bd9 	.word	0x08009bd9
 8009bb8:	08009be1 	.word	0x08009be1
 8009bbc:	08009be9 	.word	0x08009be9
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bc6:	e1b6      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009bc8:	2304      	movs	r3, #4
 8009bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bce:	e1b2      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009bd0:	2308      	movs	r3, #8
 8009bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bd6:	e1ae      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009bd8:	2310      	movs	r3, #16
 8009bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bde:	e1aa      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009be0:	2320      	movs	r3, #32
 8009be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be6:	e1a6      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009be8:	2340      	movs	r3, #64	; 0x40
 8009bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bee:	e1a2      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009bf0:	2380      	movs	r3, #128	; 0x80
 8009bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf6:	e19e      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a35      	ldr	r2, [pc, #212]	; (8009cd4 <UART_SetConfig+0x344>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d130      	bne.n	8009c64 <UART_SetConfig+0x2d4>
 8009c02:	4b31      	ldr	r3, [pc, #196]	; (8009cc8 <UART_SetConfig+0x338>)
 8009c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c06:	f003 0307 	and.w	r3, r3, #7
 8009c0a:	2b05      	cmp	r3, #5
 8009c0c:	d826      	bhi.n	8009c5c <UART_SetConfig+0x2cc>
 8009c0e:	a201      	add	r2, pc, #4	; (adr r2, 8009c14 <UART_SetConfig+0x284>)
 8009c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c14:	08009c2d 	.word	0x08009c2d
 8009c18:	08009c35 	.word	0x08009c35
 8009c1c:	08009c3d 	.word	0x08009c3d
 8009c20:	08009c45 	.word	0x08009c45
 8009c24:	08009c4d 	.word	0x08009c4d
 8009c28:	08009c55 	.word	0x08009c55
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c32:	e180      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009c34:	2304      	movs	r3, #4
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c3a:	e17c      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009c3c:	2308      	movs	r3, #8
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c42:	e178      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009c44:	2310      	movs	r3, #16
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4a:	e174      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009c4c:	2320      	movs	r3, #32
 8009c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c52:	e170      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009c54:	2340      	movs	r3, #64	; 0x40
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c5a:	e16c      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009c5c:	2380      	movs	r3, #128	; 0x80
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c62:	e168      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a1b      	ldr	r2, [pc, #108]	; (8009cd8 <UART_SetConfig+0x348>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d142      	bne.n	8009cf4 <UART_SetConfig+0x364>
 8009c6e:	4b16      	ldr	r3, [pc, #88]	; (8009cc8 <UART_SetConfig+0x338>)
 8009c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c72:	f003 0307 	and.w	r3, r3, #7
 8009c76:	2b05      	cmp	r3, #5
 8009c78:	d838      	bhi.n	8009cec <UART_SetConfig+0x35c>
 8009c7a:	a201      	add	r2, pc, #4	; (adr r2, 8009c80 <UART_SetConfig+0x2f0>)
 8009c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c80:	08009c99 	.word	0x08009c99
 8009c84:	08009ca1 	.word	0x08009ca1
 8009c88:	08009ca9 	.word	0x08009ca9
 8009c8c:	08009cb1 	.word	0x08009cb1
 8009c90:	08009cdd 	.word	0x08009cdd
 8009c94:	08009ce5 	.word	0x08009ce5
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c9e:	e14a      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009ca0:	2304      	movs	r3, #4
 8009ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ca6:	e146      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009ca8:	2308      	movs	r3, #8
 8009caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cae:	e142      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009cb0:	2310      	movs	r3, #16
 8009cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cb6:	e13e      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009cb8:	cfff69f3 	.word	0xcfff69f3
 8009cbc:	58000c00 	.word	0x58000c00
 8009cc0:	11fff4ff 	.word	0x11fff4ff
 8009cc4:	40011000 	.word	0x40011000
 8009cc8:	58024400 	.word	0x58024400
 8009ccc:	40004400 	.word	0x40004400
 8009cd0:	40004800 	.word	0x40004800
 8009cd4:	40004c00 	.word	0x40004c00
 8009cd8:	40005000 	.word	0x40005000
 8009cdc:	2320      	movs	r3, #32
 8009cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce2:	e128      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009ce4:	2340      	movs	r3, #64	; 0x40
 8009ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cea:	e124      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009cec:	2380      	movs	r3, #128	; 0x80
 8009cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf2:	e120      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4acb      	ldr	r2, [pc, #812]	; (800a028 <UART_SetConfig+0x698>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d176      	bne.n	8009dec <UART_SetConfig+0x45c>
 8009cfe:	4bcb      	ldr	r3, [pc, #812]	; (800a02c <UART_SetConfig+0x69c>)
 8009d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d06:	2b28      	cmp	r3, #40	; 0x28
 8009d08:	d86c      	bhi.n	8009de4 <UART_SetConfig+0x454>
 8009d0a:	a201      	add	r2, pc, #4	; (adr r2, 8009d10 <UART_SetConfig+0x380>)
 8009d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d10:	08009db5 	.word	0x08009db5
 8009d14:	08009de5 	.word	0x08009de5
 8009d18:	08009de5 	.word	0x08009de5
 8009d1c:	08009de5 	.word	0x08009de5
 8009d20:	08009de5 	.word	0x08009de5
 8009d24:	08009de5 	.word	0x08009de5
 8009d28:	08009de5 	.word	0x08009de5
 8009d2c:	08009de5 	.word	0x08009de5
 8009d30:	08009dbd 	.word	0x08009dbd
 8009d34:	08009de5 	.word	0x08009de5
 8009d38:	08009de5 	.word	0x08009de5
 8009d3c:	08009de5 	.word	0x08009de5
 8009d40:	08009de5 	.word	0x08009de5
 8009d44:	08009de5 	.word	0x08009de5
 8009d48:	08009de5 	.word	0x08009de5
 8009d4c:	08009de5 	.word	0x08009de5
 8009d50:	08009dc5 	.word	0x08009dc5
 8009d54:	08009de5 	.word	0x08009de5
 8009d58:	08009de5 	.word	0x08009de5
 8009d5c:	08009de5 	.word	0x08009de5
 8009d60:	08009de5 	.word	0x08009de5
 8009d64:	08009de5 	.word	0x08009de5
 8009d68:	08009de5 	.word	0x08009de5
 8009d6c:	08009de5 	.word	0x08009de5
 8009d70:	08009dcd 	.word	0x08009dcd
 8009d74:	08009de5 	.word	0x08009de5
 8009d78:	08009de5 	.word	0x08009de5
 8009d7c:	08009de5 	.word	0x08009de5
 8009d80:	08009de5 	.word	0x08009de5
 8009d84:	08009de5 	.word	0x08009de5
 8009d88:	08009de5 	.word	0x08009de5
 8009d8c:	08009de5 	.word	0x08009de5
 8009d90:	08009dd5 	.word	0x08009dd5
 8009d94:	08009de5 	.word	0x08009de5
 8009d98:	08009de5 	.word	0x08009de5
 8009d9c:	08009de5 	.word	0x08009de5
 8009da0:	08009de5 	.word	0x08009de5
 8009da4:	08009de5 	.word	0x08009de5
 8009da8:	08009de5 	.word	0x08009de5
 8009dac:	08009de5 	.word	0x08009de5
 8009db0:	08009ddd 	.word	0x08009ddd
 8009db4:	2301      	movs	r3, #1
 8009db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dba:	e0bc      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009dbc:	2304      	movs	r3, #4
 8009dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dc2:	e0b8      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009dc4:	2308      	movs	r3, #8
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dca:	e0b4      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009dcc:	2310      	movs	r3, #16
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dd2:	e0b0      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009dd4:	2320      	movs	r3, #32
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dda:	e0ac      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009ddc:	2340      	movs	r3, #64	; 0x40
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009de2:	e0a8      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009de4:	2380      	movs	r3, #128	; 0x80
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dea:	e0a4      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a8f      	ldr	r2, [pc, #572]	; (800a030 <UART_SetConfig+0x6a0>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d130      	bne.n	8009e58 <UART_SetConfig+0x4c8>
 8009df6:	4b8d      	ldr	r3, [pc, #564]	; (800a02c <UART_SetConfig+0x69c>)
 8009df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dfa:	f003 0307 	and.w	r3, r3, #7
 8009dfe:	2b05      	cmp	r3, #5
 8009e00:	d826      	bhi.n	8009e50 <UART_SetConfig+0x4c0>
 8009e02:	a201      	add	r2, pc, #4	; (adr r2, 8009e08 <UART_SetConfig+0x478>)
 8009e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e08:	08009e21 	.word	0x08009e21
 8009e0c:	08009e29 	.word	0x08009e29
 8009e10:	08009e31 	.word	0x08009e31
 8009e14:	08009e39 	.word	0x08009e39
 8009e18:	08009e41 	.word	0x08009e41
 8009e1c:	08009e49 	.word	0x08009e49
 8009e20:	2300      	movs	r3, #0
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e26:	e086      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009e28:	2304      	movs	r3, #4
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2e:	e082      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009e30:	2308      	movs	r3, #8
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e36:	e07e      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009e38:	2310      	movs	r3, #16
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3e:	e07a      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009e40:	2320      	movs	r3, #32
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e46:	e076      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009e48:	2340      	movs	r3, #64	; 0x40
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4e:	e072      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009e50:	2380      	movs	r3, #128	; 0x80
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e56:	e06e      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a75      	ldr	r2, [pc, #468]	; (800a034 <UART_SetConfig+0x6a4>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d130      	bne.n	8009ec4 <UART_SetConfig+0x534>
 8009e62:	4b72      	ldr	r3, [pc, #456]	; (800a02c <UART_SetConfig+0x69c>)
 8009e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e66:	f003 0307 	and.w	r3, r3, #7
 8009e6a:	2b05      	cmp	r3, #5
 8009e6c:	d826      	bhi.n	8009ebc <UART_SetConfig+0x52c>
 8009e6e:	a201      	add	r2, pc, #4	; (adr r2, 8009e74 <UART_SetConfig+0x4e4>)
 8009e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e74:	08009e8d 	.word	0x08009e8d
 8009e78:	08009e95 	.word	0x08009e95
 8009e7c:	08009e9d 	.word	0x08009e9d
 8009e80:	08009ea5 	.word	0x08009ea5
 8009e84:	08009ead 	.word	0x08009ead
 8009e88:	08009eb5 	.word	0x08009eb5
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e92:	e050      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009e94:	2304      	movs	r3, #4
 8009e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e9a:	e04c      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009e9c:	2308      	movs	r3, #8
 8009e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ea2:	e048      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009ea4:	2310      	movs	r3, #16
 8009ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eaa:	e044      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009eac:	2320      	movs	r3, #32
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eb2:	e040      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009eb4:	2340      	movs	r3, #64	; 0x40
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eba:	e03c      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009ebc:	2380      	movs	r3, #128	; 0x80
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec2:	e038      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a5b      	ldr	r2, [pc, #364]	; (800a038 <UART_SetConfig+0x6a8>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d130      	bne.n	8009f30 <UART_SetConfig+0x5a0>
 8009ece:	4b57      	ldr	r3, [pc, #348]	; (800a02c <UART_SetConfig+0x69c>)
 8009ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ed2:	f003 0307 	and.w	r3, r3, #7
 8009ed6:	2b05      	cmp	r3, #5
 8009ed8:	d826      	bhi.n	8009f28 <UART_SetConfig+0x598>
 8009eda:	a201      	add	r2, pc, #4	; (adr r2, 8009ee0 <UART_SetConfig+0x550>)
 8009edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee0:	08009ef9 	.word	0x08009ef9
 8009ee4:	08009f01 	.word	0x08009f01
 8009ee8:	08009f09 	.word	0x08009f09
 8009eec:	08009f11 	.word	0x08009f11
 8009ef0:	08009f19 	.word	0x08009f19
 8009ef4:	08009f21 	.word	0x08009f21
 8009ef8:	2302      	movs	r3, #2
 8009efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009efe:	e01a      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009f00:	2304      	movs	r3, #4
 8009f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f06:	e016      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009f08:	2308      	movs	r3, #8
 8009f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f0e:	e012      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009f10:	2310      	movs	r3, #16
 8009f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f16:	e00e      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009f18:	2320      	movs	r3, #32
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f1e:	e00a      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009f20:	2340      	movs	r3, #64	; 0x40
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f26:	e006      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009f28:	2380      	movs	r3, #128	; 0x80
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2e:	e002      	b.n	8009f36 <UART_SetConfig+0x5a6>
 8009f30:	2380      	movs	r3, #128	; 0x80
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a3f      	ldr	r2, [pc, #252]	; (800a038 <UART_SetConfig+0x6a8>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	f040 80f8 	bne.w	800a132 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f46:	2b20      	cmp	r3, #32
 8009f48:	dc46      	bgt.n	8009fd8 <UART_SetConfig+0x648>
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	f2c0 8082 	blt.w	800a054 <UART_SetConfig+0x6c4>
 8009f50:	3b02      	subs	r3, #2
 8009f52:	2b1e      	cmp	r3, #30
 8009f54:	d87e      	bhi.n	800a054 <UART_SetConfig+0x6c4>
 8009f56:	a201      	add	r2, pc, #4	; (adr r2, 8009f5c <UART_SetConfig+0x5cc>)
 8009f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5c:	08009fdf 	.word	0x08009fdf
 8009f60:	0800a055 	.word	0x0800a055
 8009f64:	08009fe7 	.word	0x08009fe7
 8009f68:	0800a055 	.word	0x0800a055
 8009f6c:	0800a055 	.word	0x0800a055
 8009f70:	0800a055 	.word	0x0800a055
 8009f74:	08009ff7 	.word	0x08009ff7
 8009f78:	0800a055 	.word	0x0800a055
 8009f7c:	0800a055 	.word	0x0800a055
 8009f80:	0800a055 	.word	0x0800a055
 8009f84:	0800a055 	.word	0x0800a055
 8009f88:	0800a055 	.word	0x0800a055
 8009f8c:	0800a055 	.word	0x0800a055
 8009f90:	0800a055 	.word	0x0800a055
 8009f94:	0800a007 	.word	0x0800a007
 8009f98:	0800a055 	.word	0x0800a055
 8009f9c:	0800a055 	.word	0x0800a055
 8009fa0:	0800a055 	.word	0x0800a055
 8009fa4:	0800a055 	.word	0x0800a055
 8009fa8:	0800a055 	.word	0x0800a055
 8009fac:	0800a055 	.word	0x0800a055
 8009fb0:	0800a055 	.word	0x0800a055
 8009fb4:	0800a055 	.word	0x0800a055
 8009fb8:	0800a055 	.word	0x0800a055
 8009fbc:	0800a055 	.word	0x0800a055
 8009fc0:	0800a055 	.word	0x0800a055
 8009fc4:	0800a055 	.word	0x0800a055
 8009fc8:	0800a055 	.word	0x0800a055
 8009fcc:	0800a055 	.word	0x0800a055
 8009fd0:	0800a055 	.word	0x0800a055
 8009fd4:	0800a047 	.word	0x0800a047
 8009fd8:	2b40      	cmp	r3, #64	; 0x40
 8009fda:	d037      	beq.n	800a04c <UART_SetConfig+0x6bc>
 8009fdc:	e03a      	b.n	800a054 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009fde:	f7fe f937 	bl	8008250 <HAL_RCCEx_GetD3PCLK1Freq>
 8009fe2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009fe4:	e03c      	b.n	800a060 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fe f946 	bl	800827c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ff4:	e034      	b.n	800a060 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ff6:	f107 0318 	add.w	r3, r7, #24
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fe fa92 	bl	8008524 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a004:	e02c      	b.n	800a060 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a006:	4b09      	ldr	r3, [pc, #36]	; (800a02c <UART_SetConfig+0x69c>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 0320 	and.w	r3, r3, #32
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d016      	beq.n	800a040 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a012:	4b06      	ldr	r3, [pc, #24]	; (800a02c <UART_SetConfig+0x69c>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	08db      	lsrs	r3, r3, #3
 800a018:	f003 0303 	and.w	r3, r3, #3
 800a01c:	4a07      	ldr	r2, [pc, #28]	; (800a03c <UART_SetConfig+0x6ac>)
 800a01e:	fa22 f303 	lsr.w	r3, r2, r3
 800a022:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a024:	e01c      	b.n	800a060 <UART_SetConfig+0x6d0>
 800a026:	bf00      	nop
 800a028:	40011400 	.word	0x40011400
 800a02c:	58024400 	.word	0x58024400
 800a030:	40007800 	.word	0x40007800
 800a034:	40007c00 	.word	0x40007c00
 800a038:	58000c00 	.word	0x58000c00
 800a03c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a040:	4b9d      	ldr	r3, [pc, #628]	; (800a2b8 <UART_SetConfig+0x928>)
 800a042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a044:	e00c      	b.n	800a060 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a046:	4b9d      	ldr	r3, [pc, #628]	; (800a2bc <UART_SetConfig+0x92c>)
 800a048:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a04a:	e009      	b.n	800a060 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a04c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a052:	e005      	b.n	800a060 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a054:	2300      	movs	r3, #0
 800a056:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a05e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a062:	2b00      	cmp	r3, #0
 800a064:	f000 81de 	beq.w	800a424 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06c:	4a94      	ldr	r2, [pc, #592]	; (800a2c0 <UART_SetConfig+0x930>)
 800a06e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a072:	461a      	mov	r2, r3
 800a074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a076:	fbb3 f3f2 	udiv	r3, r3, r2
 800a07a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	4613      	mov	r3, r2
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	4413      	add	r3, r2
 800a086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a088:	429a      	cmp	r2, r3
 800a08a:	d305      	bcc.n	800a098 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a094:	429a      	cmp	r2, r3
 800a096:	d903      	bls.n	800a0a0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a09e:	e1c1      	b.n	800a424 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	60bb      	str	r3, [r7, #8]
 800a0a6:	60fa      	str	r2, [r7, #12]
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	4a84      	ldr	r2, [pc, #528]	; (800a2c0 <UART_SetConfig+0x930>)
 800a0ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	603b      	str	r3, [r7, #0]
 800a0b8:	607a      	str	r2, [r7, #4]
 800a0ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0c2:	f7f6 f965 	bl	8000390 <__aeabi_uldivmod>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	4610      	mov	r0, r2
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	f04f 0200 	mov.w	r2, #0
 800a0d2:	f04f 0300 	mov.w	r3, #0
 800a0d6:	020b      	lsls	r3, r1, #8
 800a0d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0dc:	0202      	lsls	r2, r0, #8
 800a0de:	6979      	ldr	r1, [r7, #20]
 800a0e0:	6849      	ldr	r1, [r1, #4]
 800a0e2:	0849      	lsrs	r1, r1, #1
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	460c      	mov	r4, r1
 800a0e8:	4605      	mov	r5, r0
 800a0ea:	eb12 0804 	adds.w	r8, r2, r4
 800a0ee:	eb43 0905 	adc.w	r9, r3, r5
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	469a      	mov	sl, r3
 800a0fa:	4693      	mov	fp, r2
 800a0fc:	4652      	mov	r2, sl
 800a0fe:	465b      	mov	r3, fp
 800a100:	4640      	mov	r0, r8
 800a102:	4649      	mov	r1, r9
 800a104:	f7f6 f944 	bl	8000390 <__aeabi_uldivmod>
 800a108:	4602      	mov	r2, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	4613      	mov	r3, r2
 800a10e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a112:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a116:	d308      	bcc.n	800a12a <UART_SetConfig+0x79a>
 800a118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a11e:	d204      	bcs.n	800a12a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a126:	60da      	str	r2, [r3, #12]
 800a128:	e17c      	b.n	800a424 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a130:	e178      	b.n	800a424 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	69db      	ldr	r3, [r3, #28]
 800a136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a13a:	f040 80c5 	bne.w	800a2c8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a13e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a142:	2b20      	cmp	r3, #32
 800a144:	dc48      	bgt.n	800a1d8 <UART_SetConfig+0x848>
 800a146:	2b00      	cmp	r3, #0
 800a148:	db7b      	blt.n	800a242 <UART_SetConfig+0x8b2>
 800a14a:	2b20      	cmp	r3, #32
 800a14c:	d879      	bhi.n	800a242 <UART_SetConfig+0x8b2>
 800a14e:	a201      	add	r2, pc, #4	; (adr r2, 800a154 <UART_SetConfig+0x7c4>)
 800a150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a154:	0800a1df 	.word	0x0800a1df
 800a158:	0800a1e7 	.word	0x0800a1e7
 800a15c:	0800a243 	.word	0x0800a243
 800a160:	0800a243 	.word	0x0800a243
 800a164:	0800a1ef 	.word	0x0800a1ef
 800a168:	0800a243 	.word	0x0800a243
 800a16c:	0800a243 	.word	0x0800a243
 800a170:	0800a243 	.word	0x0800a243
 800a174:	0800a1ff 	.word	0x0800a1ff
 800a178:	0800a243 	.word	0x0800a243
 800a17c:	0800a243 	.word	0x0800a243
 800a180:	0800a243 	.word	0x0800a243
 800a184:	0800a243 	.word	0x0800a243
 800a188:	0800a243 	.word	0x0800a243
 800a18c:	0800a243 	.word	0x0800a243
 800a190:	0800a243 	.word	0x0800a243
 800a194:	0800a20f 	.word	0x0800a20f
 800a198:	0800a243 	.word	0x0800a243
 800a19c:	0800a243 	.word	0x0800a243
 800a1a0:	0800a243 	.word	0x0800a243
 800a1a4:	0800a243 	.word	0x0800a243
 800a1a8:	0800a243 	.word	0x0800a243
 800a1ac:	0800a243 	.word	0x0800a243
 800a1b0:	0800a243 	.word	0x0800a243
 800a1b4:	0800a243 	.word	0x0800a243
 800a1b8:	0800a243 	.word	0x0800a243
 800a1bc:	0800a243 	.word	0x0800a243
 800a1c0:	0800a243 	.word	0x0800a243
 800a1c4:	0800a243 	.word	0x0800a243
 800a1c8:	0800a243 	.word	0x0800a243
 800a1cc:	0800a243 	.word	0x0800a243
 800a1d0:	0800a243 	.word	0x0800a243
 800a1d4:	0800a235 	.word	0x0800a235
 800a1d8:	2b40      	cmp	r3, #64	; 0x40
 800a1da:	d02e      	beq.n	800a23a <UART_SetConfig+0x8aa>
 800a1dc:	e031      	b.n	800a242 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1de:	f7fd f883 	bl	80072e8 <HAL_RCC_GetPCLK1Freq>
 800a1e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a1e4:	e033      	b.n	800a24e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1e6:	f7fd f895 	bl	8007314 <HAL_RCC_GetPCLK2Freq>
 800a1ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a1ec:	e02f      	b.n	800a24e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe f842 	bl	800827c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1fc:	e027      	b.n	800a24e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1fe:	f107 0318 	add.w	r3, r7, #24
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe f98e 	bl	8008524 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a20c:	e01f      	b.n	800a24e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a20e:	4b2d      	ldr	r3, [pc, #180]	; (800a2c4 <UART_SetConfig+0x934>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0320 	and.w	r3, r3, #32
 800a216:	2b00      	cmp	r3, #0
 800a218:	d009      	beq.n	800a22e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a21a:	4b2a      	ldr	r3, [pc, #168]	; (800a2c4 <UART_SetConfig+0x934>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	08db      	lsrs	r3, r3, #3
 800a220:	f003 0303 	and.w	r3, r3, #3
 800a224:	4a24      	ldr	r2, [pc, #144]	; (800a2b8 <UART_SetConfig+0x928>)
 800a226:	fa22 f303 	lsr.w	r3, r2, r3
 800a22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a22c:	e00f      	b.n	800a24e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a22e:	4b22      	ldr	r3, [pc, #136]	; (800a2b8 <UART_SetConfig+0x928>)
 800a230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a232:	e00c      	b.n	800a24e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a234:	4b21      	ldr	r3, [pc, #132]	; (800a2bc <UART_SetConfig+0x92c>)
 800a236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a238:	e009      	b.n	800a24e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a23a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a240:	e005      	b.n	800a24e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a242:	2300      	movs	r3, #0
 800a244:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a24c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a24e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a250:	2b00      	cmp	r3, #0
 800a252:	f000 80e7 	beq.w	800a424 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25a:	4a19      	ldr	r2, [pc, #100]	; (800a2c0 <UART_SetConfig+0x930>)
 800a25c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a260:	461a      	mov	r2, r3
 800a262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a264:	fbb3 f3f2 	udiv	r3, r3, r2
 800a268:	005a      	lsls	r2, r3, #1
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	085b      	lsrs	r3, r3, #1
 800a270:	441a      	add	r2, r3
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	fbb2 f3f3 	udiv	r3, r2, r3
 800a27a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27e:	2b0f      	cmp	r3, #15
 800a280:	d916      	bls.n	800a2b0 <UART_SetConfig+0x920>
 800a282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a288:	d212      	bcs.n	800a2b0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	f023 030f 	bic.w	r3, r3, #15
 800a292:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a296:	085b      	lsrs	r3, r3, #1
 800a298:	b29b      	uxth	r3, r3
 800a29a:	f003 0307 	and.w	r3, r3, #7
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a2ac:	60da      	str	r2, [r3, #12]
 800a2ae:	e0b9      	b.n	800a424 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a2b6:	e0b5      	b.n	800a424 <UART_SetConfig+0xa94>
 800a2b8:	03d09000 	.word	0x03d09000
 800a2bc:	003d0900 	.word	0x003d0900
 800a2c0:	08012360 	.word	0x08012360
 800a2c4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a2cc:	2b20      	cmp	r3, #32
 800a2ce:	dc49      	bgt.n	800a364 <UART_SetConfig+0x9d4>
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	db7c      	blt.n	800a3ce <UART_SetConfig+0xa3e>
 800a2d4:	2b20      	cmp	r3, #32
 800a2d6:	d87a      	bhi.n	800a3ce <UART_SetConfig+0xa3e>
 800a2d8:	a201      	add	r2, pc, #4	; (adr r2, 800a2e0 <UART_SetConfig+0x950>)
 800a2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2de:	bf00      	nop
 800a2e0:	0800a36b 	.word	0x0800a36b
 800a2e4:	0800a373 	.word	0x0800a373
 800a2e8:	0800a3cf 	.word	0x0800a3cf
 800a2ec:	0800a3cf 	.word	0x0800a3cf
 800a2f0:	0800a37b 	.word	0x0800a37b
 800a2f4:	0800a3cf 	.word	0x0800a3cf
 800a2f8:	0800a3cf 	.word	0x0800a3cf
 800a2fc:	0800a3cf 	.word	0x0800a3cf
 800a300:	0800a38b 	.word	0x0800a38b
 800a304:	0800a3cf 	.word	0x0800a3cf
 800a308:	0800a3cf 	.word	0x0800a3cf
 800a30c:	0800a3cf 	.word	0x0800a3cf
 800a310:	0800a3cf 	.word	0x0800a3cf
 800a314:	0800a3cf 	.word	0x0800a3cf
 800a318:	0800a3cf 	.word	0x0800a3cf
 800a31c:	0800a3cf 	.word	0x0800a3cf
 800a320:	0800a39b 	.word	0x0800a39b
 800a324:	0800a3cf 	.word	0x0800a3cf
 800a328:	0800a3cf 	.word	0x0800a3cf
 800a32c:	0800a3cf 	.word	0x0800a3cf
 800a330:	0800a3cf 	.word	0x0800a3cf
 800a334:	0800a3cf 	.word	0x0800a3cf
 800a338:	0800a3cf 	.word	0x0800a3cf
 800a33c:	0800a3cf 	.word	0x0800a3cf
 800a340:	0800a3cf 	.word	0x0800a3cf
 800a344:	0800a3cf 	.word	0x0800a3cf
 800a348:	0800a3cf 	.word	0x0800a3cf
 800a34c:	0800a3cf 	.word	0x0800a3cf
 800a350:	0800a3cf 	.word	0x0800a3cf
 800a354:	0800a3cf 	.word	0x0800a3cf
 800a358:	0800a3cf 	.word	0x0800a3cf
 800a35c:	0800a3cf 	.word	0x0800a3cf
 800a360:	0800a3c1 	.word	0x0800a3c1
 800a364:	2b40      	cmp	r3, #64	; 0x40
 800a366:	d02e      	beq.n	800a3c6 <UART_SetConfig+0xa36>
 800a368:	e031      	b.n	800a3ce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a36a:	f7fc ffbd 	bl	80072e8 <HAL_RCC_GetPCLK1Freq>
 800a36e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a370:	e033      	b.n	800a3da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a372:	f7fc ffcf 	bl	8007314 <HAL_RCC_GetPCLK2Freq>
 800a376:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a378:	e02f      	b.n	800a3da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a37a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fd ff7c 	bl	800827c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a388:	e027      	b.n	800a3da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a38a:	f107 0318 	add.w	r3, r7, #24
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fe f8c8 	bl	8008524 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a398:	e01f      	b.n	800a3da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a39a:	4b2d      	ldr	r3, [pc, #180]	; (800a450 <UART_SetConfig+0xac0>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 0320 	and.w	r3, r3, #32
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d009      	beq.n	800a3ba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3a6:	4b2a      	ldr	r3, [pc, #168]	; (800a450 <UART_SetConfig+0xac0>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	08db      	lsrs	r3, r3, #3
 800a3ac:	f003 0303 	and.w	r3, r3, #3
 800a3b0:	4a28      	ldr	r2, [pc, #160]	; (800a454 <UART_SetConfig+0xac4>)
 800a3b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3b8:	e00f      	b.n	800a3da <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a3ba:	4b26      	ldr	r3, [pc, #152]	; (800a454 <UART_SetConfig+0xac4>)
 800a3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3be:	e00c      	b.n	800a3da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3c0:	4b25      	ldr	r3, [pc, #148]	; (800a458 <UART_SetConfig+0xac8>)
 800a3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3c4:	e009      	b.n	800a3da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3cc:	e005      	b.n	800a3da <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a3d8:	bf00      	nop
    }

    if (pclk != 0U)
 800a3da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d021      	beq.n	800a424 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	4a1d      	ldr	r2, [pc, #116]	; (800a45c <UART_SetConfig+0xacc>)
 800a3e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	085b      	lsrs	r3, r3, #1
 800a3f8:	441a      	add	r2, r3
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a402:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a406:	2b0f      	cmp	r3, #15
 800a408:	d909      	bls.n	800a41e <UART_SetConfig+0xa8e>
 800a40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a410:	d205      	bcs.n	800a41e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a414:	b29a      	uxth	r2, r3
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	60da      	str	r2, [r3, #12]
 800a41c:	e002      	b.n	800a424 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	2201      	movs	r2, #1
 800a428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	2201      	movs	r2, #1
 800a430:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	2200      	movs	r2, #0
 800a438:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	2200      	movs	r2, #0
 800a43e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a440:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a444:	4618      	mov	r0, r3
 800a446:	3748      	adds	r7, #72	; 0x48
 800a448:	46bd      	mov	sp, r7
 800a44a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a44e:	bf00      	nop
 800a450:	58024400 	.word	0x58024400
 800a454:	03d09000 	.word	0x03d09000
 800a458:	003d0900 	.word	0x003d0900
 800a45c:	08012360 	.word	0x08012360

0800a460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00a      	beq.n	800a48a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	430a      	orrs	r2, r1
 800a488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48e:	f003 0302 	and.w	r3, r3, #2
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00a      	beq.n	800a4ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	430a      	orrs	r2, r1
 800a4aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b0:	f003 0304 	and.w	r3, r3, #4
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00a      	beq.n	800a4ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d2:	f003 0308 	and.w	r3, r3, #8
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00a      	beq.n	800a4f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	430a      	orrs	r2, r1
 800a4ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f4:	f003 0310 	and.w	r3, r3, #16
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00a      	beq.n	800a512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	430a      	orrs	r2, r1
 800a510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a516:	f003 0320 	and.w	r3, r3, #32
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00a      	beq.n	800a534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	430a      	orrs	r2, r1
 800a532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d01a      	beq.n	800a576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	430a      	orrs	r2, r1
 800a554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a55a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a55e:	d10a      	bne.n	800a576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	430a      	orrs	r2, r1
 800a574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a57a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00a      	beq.n	800a598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	430a      	orrs	r2, r1
 800a596:	605a      	str	r2, [r3, #4]
  }
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af02      	add	r7, sp, #8
 800a5aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5b4:	f7fa fcfa 	bl	8004fac <HAL_GetTick>
 800a5b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 0308 	and.w	r3, r3, #8
 800a5c4:	2b08      	cmp	r3, #8
 800a5c6:	d10e      	bne.n	800a5e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f82f 	bl	800a63a <UART_WaitOnFlagUntilTimeout>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e025      	b.n	800a632 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 0304 	and.w	r3, r3, #4
 800a5f0:	2b04      	cmp	r3, #4
 800a5f2:	d10e      	bne.n	800a612 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f819 	bl	800a63a <UART_WaitOnFlagUntilTimeout>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d001      	beq.n	800a612 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a60e:	2303      	movs	r3, #3
 800a610:	e00f      	b.n	800a632 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2220      	movs	r2, #32
 800a616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2220      	movs	r2, #32
 800a61e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b09c      	sub	sp, #112	; 0x70
 800a63e:	af00      	add	r7, sp, #0
 800a640:	60f8      	str	r0, [r7, #12]
 800a642:	60b9      	str	r1, [r7, #8]
 800a644:	603b      	str	r3, [r7, #0]
 800a646:	4613      	mov	r3, r2
 800a648:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a64a:	e0a9      	b.n	800a7a0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a64c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a652:	f000 80a5 	beq.w	800a7a0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a656:	f7fa fca9 	bl	8004fac <HAL_GetTick>
 800a65a:	4602      	mov	r2, r0
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a662:	429a      	cmp	r2, r3
 800a664:	d302      	bcc.n	800a66c <UART_WaitOnFlagUntilTimeout+0x32>
 800a666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d140      	bne.n	800a6ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a674:	e853 3f00 	ldrex	r3, [r3]
 800a678:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a67a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a67c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a680:	667b      	str	r3, [r7, #100]	; 0x64
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	461a      	mov	r2, r3
 800a688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a68a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a68c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a690:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a692:	e841 2300 	strex	r3, r2, [r1]
 800a696:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1e6      	bne.n	800a66c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6a8:	e853 3f00 	ldrex	r3, [r3]
 800a6ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b0:	f023 0301 	bic.w	r3, r3, #1
 800a6b4:	663b      	str	r3, [r7, #96]	; 0x60
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	3308      	adds	r3, #8
 800a6bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6be:	64ba      	str	r2, [r7, #72]	; 0x48
 800a6c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6c6:	e841 2300 	strex	r3, r2, [r1]
 800a6ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1e5      	bne.n	800a69e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2220      	movs	r2, #32
 800a6d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2220      	movs	r2, #32
 800a6de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	e069      	b.n	800a7c2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 0304 	and.w	r3, r3, #4
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d051      	beq.n	800a7a0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a70a:	d149      	bne.n	800a7a0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a714:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71e:	e853 3f00 	ldrex	r3, [r3]
 800a722:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a726:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a72a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	461a      	mov	r2, r3
 800a732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a734:	637b      	str	r3, [r7, #52]	; 0x34
 800a736:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a738:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a73a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a73c:	e841 2300 	strex	r3, r2, [r1]
 800a740:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1e6      	bne.n	800a716 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	3308      	adds	r3, #8
 800a74e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	e853 3f00 	ldrex	r3, [r3]
 800a756:	613b      	str	r3, [r7, #16]
   return(result);
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	f023 0301 	bic.w	r3, r3, #1
 800a75e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	3308      	adds	r3, #8
 800a766:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a768:	623a      	str	r2, [r7, #32]
 800a76a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76c:	69f9      	ldr	r1, [r7, #28]
 800a76e:	6a3a      	ldr	r2, [r7, #32]
 800a770:	e841 2300 	strex	r3, r2, [r1]
 800a774:	61bb      	str	r3, [r7, #24]
   return(result);
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1e5      	bne.n	800a748 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2220      	movs	r2, #32
 800a780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2220      	movs	r2, #32
 800a788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2220      	movs	r2, #32
 800a790:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a79c:	2303      	movs	r3, #3
 800a79e:	e010      	b.n	800a7c2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	69da      	ldr	r2, [r3, #28]
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	68ba      	ldr	r2, [r7, #8]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	bf0c      	ite	eq
 800a7b0:	2301      	moveq	r3, #1
 800a7b2:	2300      	movne	r3, #0
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	79fb      	ldrb	r3, [r7, #7]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	f43f af46 	beq.w	800a64c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3770      	adds	r7, #112	; 0x70
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
	...

0800a7cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b095      	sub	sp, #84	; 0x54
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7dc:	e853 3f00 	ldrex	r3, [r3]
 800a7e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7f2:	643b      	str	r3, [r7, #64]	; 0x40
 800a7f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7fa:	e841 2300 	strex	r3, r2, [r1]
 800a7fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1e6      	bne.n	800a7d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3308      	adds	r3, #8
 800a80c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80e:	6a3b      	ldr	r3, [r7, #32]
 800a810:	e853 3f00 	ldrex	r3, [r3]
 800a814:	61fb      	str	r3, [r7, #28]
   return(result);
 800a816:	69fa      	ldr	r2, [r7, #28]
 800a818:	4b1e      	ldr	r3, [pc, #120]	; (800a894 <UART_EndRxTransfer+0xc8>)
 800a81a:	4013      	ands	r3, r2
 800a81c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	3308      	adds	r3, #8
 800a824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a826:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a828:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a82c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a82e:	e841 2300 	strex	r3, r2, [r1]
 800a832:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1e5      	bne.n	800a806 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d118      	bne.n	800a874 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	e853 3f00 	ldrex	r3, [r3]
 800a84e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	f023 0310 	bic.w	r3, r3, #16
 800a856:	647b      	str	r3, [r7, #68]	; 0x44
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	461a      	mov	r2, r3
 800a85e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a860:	61bb      	str	r3, [r7, #24]
 800a862:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a864:	6979      	ldr	r1, [r7, #20]
 800a866:	69ba      	ldr	r2, [r7, #24]
 800a868:	e841 2300 	strex	r3, r2, [r1]
 800a86c:	613b      	str	r3, [r7, #16]
   return(result);
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1e6      	bne.n	800a842 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2220      	movs	r2, #32
 800a878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a888:	bf00      	nop
 800a88a:	3754      	adds	r7, #84	; 0x54
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr
 800a894:	effffffe 	.word	0xeffffffe

0800a898 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f7ff f854 	bl	8009964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8bc:	bf00      	nop
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b088      	sub	sp, #32
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	e853 3f00 	ldrex	r3, [r3]
 800a8d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8e0:	61fb      	str	r3, [r7, #28]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	61bb      	str	r3, [r7, #24]
 800a8ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ee:	6979      	ldr	r1, [r7, #20]
 800a8f0:	69ba      	ldr	r2, [r7, #24]
 800a8f2:	e841 2300 	strex	r3, r2, [r1]
 800a8f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1e6      	bne.n	800a8cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2220      	movs	r2, #32
 800a902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7ff f81f 	bl	8009950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a912:	bf00      	nop
 800a914:	3720      	adds	r7, #32
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b083      	sub	sp, #12
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a922:	bf00      	nop
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a92e:	b480      	push	{r7}
 800a930:	b083      	sub	sp, #12
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a936:	bf00      	nop
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr

0800a942 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a942:	b480      	push	{r7}
 800a944:	b083      	sub	sp, #12
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a94a:	bf00      	nop
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a956:	b480      	push	{r7}
 800a958:	b085      	sub	sp, #20
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a964:	2b01      	cmp	r3, #1
 800a966:	d101      	bne.n	800a96c <HAL_UARTEx_DisableFifoMode+0x16>
 800a968:	2302      	movs	r3, #2
 800a96a:	e027      	b.n	800a9bc <HAL_UARTEx_DisableFifoMode+0x66>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2201      	movs	r2, #1
 800a970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2224      	movs	r2, #36	; 0x24
 800a978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f022 0201 	bic.w	r2, r2, #1
 800a992:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a99a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2220      	movs	r2, #32
 800a9ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3714      	adds	r7, #20
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d101      	bne.n	800a9e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9dc:	2302      	movs	r3, #2
 800a9de:	e02d      	b.n	800aa3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2224      	movs	r2, #36	; 0x24
 800a9ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f022 0201 	bic.w	r2, r2, #1
 800aa06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	683a      	ldr	r2, [r7, #0]
 800aa18:	430a      	orrs	r2, r1
 800aa1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 f84f 	bl	800aac0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d101      	bne.n	800aa5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa58:	2302      	movs	r3, #2
 800aa5a:	e02d      	b.n	800aab8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2224      	movs	r2, #36	; 0x24
 800aa68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f022 0201 	bic.w	r2, r2, #1
 800aa82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	430a      	orrs	r2, r1
 800aa96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f811 	bl	800aac0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2220      	movs	r2, #32
 800aaaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d108      	bne.n	800aae2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aae0:	e031      	b.n	800ab46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aae2:	2310      	movs	r3, #16
 800aae4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aae6:	2310      	movs	r3, #16
 800aae8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	0e5b      	lsrs	r3, r3, #25
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	f003 0307 	and.w	r3, r3, #7
 800aaf8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	0f5b      	lsrs	r3, r3, #29
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	f003 0307 	and.w	r3, r3, #7
 800ab08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab0a:	7bbb      	ldrb	r3, [r7, #14]
 800ab0c:	7b3a      	ldrb	r2, [r7, #12]
 800ab0e:	4911      	ldr	r1, [pc, #68]	; (800ab54 <UARTEx_SetNbDataToProcess+0x94>)
 800ab10:	5c8a      	ldrb	r2, [r1, r2]
 800ab12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab16:	7b3a      	ldrb	r2, [r7, #12]
 800ab18:	490f      	ldr	r1, [pc, #60]	; (800ab58 <UARTEx_SetNbDataToProcess+0x98>)
 800ab1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
 800ab2a:	7b7a      	ldrb	r2, [r7, #13]
 800ab2c:	4909      	ldr	r1, [pc, #36]	; (800ab54 <UARTEx_SetNbDataToProcess+0x94>)
 800ab2e:	5c8a      	ldrb	r2, [r1, r2]
 800ab30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab34:	7b7a      	ldrb	r2, [r7, #13]
 800ab36:	4908      	ldr	r1, [pc, #32]	; (800ab58 <UARTEx_SetNbDataToProcess+0x98>)
 800ab38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ab46:	bf00      	nop
 800ab48:	3714      	adds	r7, #20
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	08012378 	.word	0x08012378
 800ab58:	08012380 	.word	0x08012380

0800ab5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab5c:	b084      	sub	sp, #16
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	f107 001c 	add.w	r0, r7, #28
 800ab6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d120      	bne.n	800abb6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68da      	ldr	r2, [r3, #12]
 800ab84:	4b2a      	ldr	r3, [pc, #168]	; (800ac30 <USB_CoreInit+0xd4>)
 800ab86:	4013      	ands	r3, r2
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ab98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d105      	bne.n	800abaa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 faac 	bl	800b108 <USB_CoreReset>
 800abb0:	4603      	mov	r3, r0
 800abb2:	73fb      	strb	r3, [r7, #15]
 800abb4:	e01a      	b.n	800abec <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 faa0 	bl	800b108 <USB_CoreReset>
 800abc8:	4603      	mov	r3, r0
 800abca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800abcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d106      	bne.n	800abe0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	639a      	str	r2, [r3, #56]	; 0x38
 800abde:	e005      	b.n	800abec <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800abec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d116      	bne.n	800ac20 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abf6:	b29a      	uxth	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ac00:	4b0c      	ldr	r3, [pc, #48]	; (800ac34 <USB_CoreInit+0xd8>)
 800ac02:	4313      	orrs	r3, r2
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	f043 0206 	orr.w	r2, r3, #6
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	f043 0220 	orr.w	r2, r3, #32
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ac20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac2c:	b004      	add	sp, #16
 800ac2e:	4770      	bx	lr
 800ac30:	ffbdffbf 	.word	0xffbdffbf
 800ac34:	03ee0000 	.word	0x03ee0000

0800ac38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	f023 0201 	bic.w	r2, r3, #1
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	460b      	mov	r3, r1
 800ac64:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ac66:	2300      	movs	r3, #0
 800ac68:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ac76:	78fb      	ldrb	r3, [r7, #3]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d115      	bne.n	800aca8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ac88:	2001      	movs	r0, #1
 800ac8a:	f7fa f99b 	bl	8004fc4 <HAL_Delay>
      ms++;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	3301      	adds	r3, #1
 800ac92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fa29 	bl	800b0ec <USB_GetMode>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d01e      	beq.n	800acde <USB_SetCurrentMode+0x84>
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2b31      	cmp	r3, #49	; 0x31
 800aca4:	d9f0      	bls.n	800ac88 <USB_SetCurrentMode+0x2e>
 800aca6:	e01a      	b.n	800acde <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aca8:	78fb      	ldrb	r3, [r7, #3]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d115      	bne.n	800acda <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800acba:	2001      	movs	r0, #1
 800acbc:	f7fa f982 	bl	8004fc4 <HAL_Delay>
      ms++;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	3301      	adds	r3, #1
 800acc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fa10 	bl	800b0ec <USB_GetMode>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d005      	beq.n	800acde <USB_SetCurrentMode+0x84>
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2b31      	cmp	r3, #49	; 0x31
 800acd6:	d9f0      	bls.n	800acba <USB_SetCurrentMode+0x60>
 800acd8:	e001      	b.n	800acde <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e005      	b.n	800acea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2b32      	cmp	r3, #50	; 0x32
 800ace2:	d101      	bne.n	800ace8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	e000      	b.n	800acea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
	...

0800acf4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800acf4:	b084      	sub	sp, #16
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b086      	sub	sp, #24
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ad02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ad0e:	2300      	movs	r3, #0
 800ad10:	613b      	str	r3, [r7, #16]
 800ad12:	e009      	b.n	800ad28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	3340      	adds	r3, #64	; 0x40
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	2200      	movs	r2, #0
 800ad20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	3301      	adds	r3, #1
 800ad26:	613b      	str	r3, [r7, #16]
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	2b0e      	cmp	r3, #14
 800ad2c:	d9f2      	bls.n	800ad14 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ad2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d11c      	bne.n	800ad6e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad42:	f043 0302 	orr.w	r3, r3, #2
 800ad46:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	601a      	str	r2, [r3, #0]
 800ad6c:	e005      	b.n	800ad7a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad80:	461a      	mov	r2, r3
 800ad82:	2300      	movs	r3, #0
 800ad84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad94:	461a      	mov	r2, r3
 800ad96:	680b      	ldr	r3, [r1, #0]
 800ad98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d10c      	bne.n	800adba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ada0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d104      	bne.n	800adb0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ada6:	2100      	movs	r1, #0
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 f965 	bl	800b078 <USB_SetDevSpeed>
 800adae:	e008      	b.n	800adc2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800adb0:	2101      	movs	r1, #1
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f960 	bl	800b078 <USB_SetDevSpeed>
 800adb8:	e003      	b.n	800adc2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800adba:	2103      	movs	r1, #3
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f95b 	bl	800b078 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800adc2:	2110      	movs	r1, #16
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 f8f3 	bl	800afb0 <USB_FlushTxFifo>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d001      	beq.n	800add4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 f91f 	bl	800b018 <USB_FlushRxFifo>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d001      	beq.n	800ade4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adea:	461a      	mov	r2, r3
 800adec:	2300      	movs	r3, #0
 800adee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adf6:	461a      	mov	r2, r3
 800adf8:	2300      	movs	r3, #0
 800adfa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae02:	461a      	mov	r2, r3
 800ae04:	2300      	movs	r3, #0
 800ae06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae08:	2300      	movs	r3, #0
 800ae0a:	613b      	str	r3, [r7, #16]
 800ae0c:	e043      	b.n	800ae96 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	015a      	lsls	r2, r3, #5
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	4413      	add	r3, r2
 800ae16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae24:	d118      	bne.n	800ae58 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10a      	bne.n	800ae42 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	015a      	lsls	r2, r3, #5
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	4413      	add	r3, r2
 800ae34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae38:	461a      	mov	r2, r3
 800ae3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae3e:	6013      	str	r3, [r2, #0]
 800ae40:	e013      	b.n	800ae6a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	015a      	lsls	r2, r3, #5
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	4413      	add	r3, r2
 800ae4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae4e:	461a      	mov	r2, r3
 800ae50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae54:	6013      	str	r3, [r2, #0]
 800ae56:	e008      	b.n	800ae6a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	015a      	lsls	r2, r3, #5
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	4413      	add	r3, r2
 800ae60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae64:	461a      	mov	r2, r3
 800ae66:	2300      	movs	r3, #0
 800ae68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	015a      	lsls	r2, r3, #5
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	4413      	add	r3, r2
 800ae72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae76:	461a      	mov	r2, r3
 800ae78:	2300      	movs	r3, #0
 800ae7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	015a      	lsls	r2, r3, #5
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	4413      	add	r3, r2
 800ae84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae88:	461a      	mov	r2, r3
 800ae8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	3301      	adds	r3, #1
 800ae94:	613b      	str	r3, [r7, #16]
 800ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae98:	693a      	ldr	r2, [r7, #16]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d3b7      	bcc.n	800ae0e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae9e:	2300      	movs	r3, #0
 800aea0:	613b      	str	r3, [r7, #16]
 800aea2:	e043      	b.n	800af2c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	015a      	lsls	r2, r3, #5
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	4413      	add	r3, r2
 800aeac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aeb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aeba:	d118      	bne.n	800aeee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d10a      	bne.n	800aed8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	015a      	lsls	r2, r3, #5
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	4413      	add	r3, r2
 800aeca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aece:	461a      	mov	r2, r3
 800aed0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aed4:	6013      	str	r3, [r2, #0]
 800aed6:	e013      	b.n	800af00 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	015a      	lsls	r2, r3, #5
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	4413      	add	r3, r2
 800aee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aee4:	461a      	mov	r2, r3
 800aee6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aeea:	6013      	str	r3, [r2, #0]
 800aeec:	e008      	b.n	800af00 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	015a      	lsls	r2, r3, #5
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	4413      	add	r3, r2
 800aef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aefa:	461a      	mov	r2, r3
 800aefc:	2300      	movs	r3, #0
 800aefe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	015a      	lsls	r2, r3, #5
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af0c:	461a      	mov	r2, r3
 800af0e:	2300      	movs	r3, #0
 800af10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	015a      	lsls	r2, r3, #5
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	4413      	add	r3, r2
 800af1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af1e:	461a      	mov	r2, r3
 800af20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800af24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	3301      	adds	r3, #1
 800af2a:	613b      	str	r3, [r7, #16]
 800af2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	429a      	cmp	r2, r3
 800af32:	d3b7      	bcc.n	800aea4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	68fa      	ldr	r2, [r7, #12]
 800af3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800af54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800af56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d105      	bne.n	800af68 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	699b      	ldr	r3, [r3, #24]
 800af60:	f043 0210 	orr.w	r2, r3, #16
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	699a      	ldr	r2, [r3, #24]
 800af6c:	4b0e      	ldr	r3, [pc, #56]	; (800afa8 <USB_DevInit+0x2b4>)
 800af6e:	4313      	orrs	r3, r2
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800af74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af76:	2b00      	cmp	r3, #0
 800af78:	d005      	beq.n	800af86 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	f043 0208 	orr.w	r2, r3, #8
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800af86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d105      	bne.n	800af98 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	699a      	ldr	r2, [r3, #24]
 800af90:	4b06      	ldr	r3, [pc, #24]	; (800afac <USB_DevInit+0x2b8>)
 800af92:	4313      	orrs	r3, r2
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800af98:	7dfb      	ldrb	r3, [r7, #23]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3718      	adds	r7, #24
 800af9e:	46bd      	mov	sp, r7
 800afa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800afa4:	b004      	add	sp, #16
 800afa6:	4770      	bx	lr
 800afa8:	803c3800 	.word	0x803c3800
 800afac:	40000004 	.word	0x40000004

0800afb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b085      	sub	sp, #20
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800afba:	2300      	movs	r3, #0
 800afbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	3301      	adds	r3, #1
 800afc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	4a13      	ldr	r2, [pc, #76]	; (800b014 <USB_FlushTxFifo+0x64>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d901      	bls.n	800afd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800afcc:	2303      	movs	r3, #3
 800afce:	e01b      	b.n	800b008 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	691b      	ldr	r3, [r3, #16]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	daf2      	bge.n	800afbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800afd8:	2300      	movs	r3, #0
 800afda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	019b      	lsls	r3, r3, #6
 800afe0:	f043 0220 	orr.w	r2, r3, #32
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	3301      	adds	r3, #1
 800afec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	4a08      	ldr	r2, [pc, #32]	; (800b014 <USB_FlushTxFifo+0x64>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d901      	bls.n	800affa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aff6:	2303      	movs	r3, #3
 800aff8:	e006      	b.n	800b008 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	f003 0320 	and.w	r3, r3, #32
 800b002:	2b20      	cmp	r3, #32
 800b004:	d0f0      	beq.n	800afe8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	00030d40 	.word	0x00030d40

0800b018 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b020:	2300      	movs	r3, #0
 800b022:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	3301      	adds	r3, #1
 800b028:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	4a11      	ldr	r2, [pc, #68]	; (800b074 <USB_FlushRxFifo+0x5c>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d901      	bls.n	800b036 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b032:	2303      	movs	r3, #3
 800b034:	e018      	b.n	800b068 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	691b      	ldr	r3, [r3, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	daf2      	bge.n	800b024 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b03e:	2300      	movs	r3, #0
 800b040:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2210      	movs	r2, #16
 800b046:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	3301      	adds	r3, #1
 800b04c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	4a08      	ldr	r2, [pc, #32]	; (800b074 <USB_FlushRxFifo+0x5c>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d901      	bls.n	800b05a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b056:	2303      	movs	r3, #3
 800b058:	e006      	b.n	800b068 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	f003 0310 	and.w	r3, r3, #16
 800b062:	2b10      	cmp	r3, #16
 800b064:	d0f0      	beq.n	800b048 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3714      	adds	r7, #20
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr
 800b074:	00030d40 	.word	0x00030d40

0800b078 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	78fb      	ldrb	r3, [r7, #3]
 800b092:	68f9      	ldr	r1, [r7, #12]
 800b094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b098:	4313      	orrs	r3, r2
 800b09a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b0aa:	b480      	push	{r7}
 800b0ac:	b085      	sub	sp, #20
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0c4:	f023 0303 	bic.w	r3, r3, #3
 800b0c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0d8:	f043 0302 	orr.w	r3, r3, #2
 800b0dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3714      	adds	r7, #20
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	695b      	ldr	r3, [r3, #20]
 800b0f8:	f003 0301 	and.w	r3, r3, #1
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b110:	2300      	movs	r3, #0
 800b112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	3301      	adds	r3, #1
 800b118:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	4a13      	ldr	r2, [pc, #76]	; (800b16c <USB_CoreReset+0x64>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d901      	bls.n	800b126 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b122:	2303      	movs	r3, #3
 800b124:	e01b      	b.n	800b15e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	691b      	ldr	r3, [r3, #16]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	daf2      	bge.n	800b114 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b12e:	2300      	movs	r3, #0
 800b130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	f043 0201 	orr.w	r2, r3, #1
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3301      	adds	r3, #1
 800b142:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	4a09      	ldr	r2, [pc, #36]	; (800b16c <USB_CoreReset+0x64>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d901      	bls.n	800b150 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b14c:	2303      	movs	r3, #3
 800b14e:	e006      	b.n	800b15e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	f003 0301 	and.w	r3, r3, #1
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d0f0      	beq.n	800b13e <USB_CoreReset+0x36>

  return HAL_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	00030d40 	.word	0x00030d40

0800b170 <__NVIC_SetPriority>:
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	4603      	mov	r3, r0
 800b178:	6039      	str	r1, [r7, #0]
 800b17a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b17c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b180:	2b00      	cmp	r3, #0
 800b182:	db0a      	blt.n	800b19a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	b2da      	uxtb	r2, r3
 800b188:	490c      	ldr	r1, [pc, #48]	; (800b1bc <__NVIC_SetPriority+0x4c>)
 800b18a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b18e:	0112      	lsls	r2, r2, #4
 800b190:	b2d2      	uxtb	r2, r2
 800b192:	440b      	add	r3, r1
 800b194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b198:	e00a      	b.n	800b1b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	b2da      	uxtb	r2, r3
 800b19e:	4908      	ldr	r1, [pc, #32]	; (800b1c0 <__NVIC_SetPriority+0x50>)
 800b1a0:	88fb      	ldrh	r3, [r7, #6]
 800b1a2:	f003 030f 	and.w	r3, r3, #15
 800b1a6:	3b04      	subs	r3, #4
 800b1a8:	0112      	lsls	r2, r2, #4
 800b1aa:	b2d2      	uxtb	r2, r2
 800b1ac:	440b      	add	r3, r1
 800b1ae:	761a      	strb	r2, [r3, #24]
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	e000e100 	.word	0xe000e100
 800b1c0:	e000ed00 	.word	0xe000ed00

0800b1c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b1c8:	4b05      	ldr	r3, [pc, #20]	; (800b1e0 <SysTick_Handler+0x1c>)
 800b1ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b1cc:	f002 f960 	bl	800d490 <xTaskGetSchedulerState>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d001      	beq.n	800b1da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b1d6:	f000 fd97 	bl	800bd08 <xPortSysTickHandler>
  }
}
 800b1da:	bf00      	nop
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	e000e010 	.word	0xe000e010

0800b1e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	f06f 0004 	mvn.w	r0, #4
 800b1ee:	f7ff ffbf 	bl	800b170 <__NVIC_SetPriority>
#endif
}
 800b1f2:	bf00      	nop
 800b1f4:	bd80      	pop	{r7, pc}
	...

0800b1f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1fe:	f3ef 8305 	mrs	r3, IPSR
 800b202:	603b      	str	r3, [r7, #0]
  return(result);
 800b204:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b206:	2b00      	cmp	r3, #0
 800b208:	d003      	beq.n	800b212 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b20a:	f06f 0305 	mvn.w	r3, #5
 800b20e:	607b      	str	r3, [r7, #4]
 800b210:	e00c      	b.n	800b22c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b212:	4b0a      	ldr	r3, [pc, #40]	; (800b23c <osKernelInitialize+0x44>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d105      	bne.n	800b226 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b21a:	4b08      	ldr	r3, [pc, #32]	; (800b23c <osKernelInitialize+0x44>)
 800b21c:	2201      	movs	r2, #1
 800b21e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b220:	2300      	movs	r3, #0
 800b222:	607b      	str	r3, [r7, #4]
 800b224:	e002      	b.n	800b22c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b226:	f04f 33ff 	mov.w	r3, #4294967295
 800b22a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b22c:	687b      	ldr	r3, [r7, #4]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	370c      	adds	r7, #12
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	24000804 	.word	0x24000804

0800b240 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b246:	f3ef 8305 	mrs	r3, IPSR
 800b24a:	603b      	str	r3, [r7, #0]
  return(result);
 800b24c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d003      	beq.n	800b25a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b252:	f06f 0305 	mvn.w	r3, #5
 800b256:	607b      	str	r3, [r7, #4]
 800b258:	e010      	b.n	800b27c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b25a:	4b0b      	ldr	r3, [pc, #44]	; (800b288 <osKernelStart+0x48>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d109      	bne.n	800b276 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b262:	f7ff ffbf 	bl	800b1e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b266:	4b08      	ldr	r3, [pc, #32]	; (800b288 <osKernelStart+0x48>)
 800b268:	2202      	movs	r2, #2
 800b26a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b26c:	f001 fcb4 	bl	800cbd8 <vTaskStartScheduler>
      stat = osOK;
 800b270:	2300      	movs	r3, #0
 800b272:	607b      	str	r3, [r7, #4]
 800b274:	e002      	b.n	800b27c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b276:	f04f 33ff 	mov.w	r3, #4294967295
 800b27a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b27c:	687b      	ldr	r3, [r7, #4]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3708      	adds	r7, #8
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	24000804 	.word	0x24000804

0800b28c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b08e      	sub	sp, #56	; 0x38
 800b290:	af04      	add	r7, sp, #16
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b298:	2300      	movs	r3, #0
 800b29a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b29c:	f3ef 8305 	mrs	r3, IPSR
 800b2a0:	617b      	str	r3, [r7, #20]
  return(result);
 800b2a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d17e      	bne.n	800b3a6 <osThreadNew+0x11a>
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d07b      	beq.n	800b3a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b2ae:	2380      	movs	r3, #128	; 0x80
 800b2b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b2b2:	2318      	movs	r3, #24
 800b2b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b2be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d045      	beq.n	800b352 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d002      	beq.n	800b2d4 <osThreadNew+0x48>
        name = attr->name;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	699b      	ldr	r3, [r3, #24]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d008      	beq.n	800b2fa <osThreadNew+0x6e>
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	2b38      	cmp	r3, #56	; 0x38
 800b2ec:	d805      	bhi.n	800b2fa <osThreadNew+0x6e>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	f003 0301 	and.w	r3, r3, #1
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d001      	beq.n	800b2fe <osThreadNew+0x72>
        return (NULL);
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	e054      	b.n	800b3a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d003      	beq.n	800b30e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	089b      	lsrs	r3, r3, #2
 800b30c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00e      	beq.n	800b334 <osThreadNew+0xa8>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	2bbb      	cmp	r3, #187	; 0xbb
 800b31c:	d90a      	bls.n	800b334 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b322:	2b00      	cmp	r3, #0
 800b324:	d006      	beq.n	800b334 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d002      	beq.n	800b334 <osThreadNew+0xa8>
        mem = 1;
 800b32e:	2301      	movs	r3, #1
 800b330:	61bb      	str	r3, [r7, #24]
 800b332:	e010      	b.n	800b356 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d10c      	bne.n	800b356 <osThreadNew+0xca>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d108      	bne.n	800b356 <osThreadNew+0xca>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d104      	bne.n	800b356 <osThreadNew+0xca>
          mem = 0;
 800b34c:	2300      	movs	r3, #0
 800b34e:	61bb      	str	r3, [r7, #24]
 800b350:	e001      	b.n	800b356 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b352:	2300      	movs	r3, #0
 800b354:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d110      	bne.n	800b37e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b364:	9202      	str	r2, [sp, #8]
 800b366:	9301      	str	r3, [sp, #4]
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	6a3a      	ldr	r2, [r7, #32]
 800b370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f001 fa44 	bl	800c800 <xTaskCreateStatic>
 800b378:	4603      	mov	r3, r0
 800b37a:	613b      	str	r3, [r7, #16]
 800b37c:	e013      	b.n	800b3a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d110      	bne.n	800b3a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b384:	6a3b      	ldr	r3, [r7, #32]
 800b386:	b29a      	uxth	r2, r3
 800b388:	f107 0310 	add.w	r3, r7, #16
 800b38c:	9301      	str	r3, [sp, #4]
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f001 fa8f 	bl	800c8ba <xTaskCreate>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d001      	beq.n	800b3a6 <osThreadNew+0x11a>
            hTask = NULL;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b3a6:	693b      	ldr	r3, [r7, #16]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3728      	adds	r7, #40	; 0x28
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3b8:	f3ef 8305 	mrs	r3, IPSR
 800b3bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d003      	beq.n	800b3cc <osDelay+0x1c>
    stat = osErrorISR;
 800b3c4:	f06f 0305 	mvn.w	r3, #5
 800b3c8:	60fb      	str	r3, [r7, #12]
 800b3ca:	e007      	b.n	800b3dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d002      	beq.n	800b3dc <osDelay+0x2c>
      vTaskDelay(ticks);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f001 fbca 	bl	800cb70 <vTaskDelay>
    }
  }

  return (stat);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
	...

0800b3e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b3e8:	b480      	push	{r7}
 800b3ea:	b085      	sub	sp, #20
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	4a07      	ldr	r2, [pc, #28]	; (800b414 <vApplicationGetIdleTaskMemory+0x2c>)
 800b3f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	4a06      	ldr	r2, [pc, #24]	; (800b418 <vApplicationGetIdleTaskMemory+0x30>)
 800b3fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2280      	movs	r2, #128	; 0x80
 800b404:	601a      	str	r2, [r3, #0]
}
 800b406:	bf00      	nop
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	24000808 	.word	0x24000808
 800b418:	240008c4 	.word	0x240008c4

0800b41c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b41c:	b480      	push	{r7}
 800b41e:	b085      	sub	sp, #20
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	4a07      	ldr	r2, [pc, #28]	; (800b448 <vApplicationGetTimerTaskMemory+0x2c>)
 800b42c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	4a06      	ldr	r2, [pc, #24]	; (800b44c <vApplicationGetTimerTaskMemory+0x30>)
 800b432:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b43a:	601a      	str	r2, [r3, #0]
}
 800b43c:	bf00      	nop
 800b43e:	3714      	adds	r7, #20
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr
 800b448:	24000ac4 	.word	0x24000ac4
 800b44c:	24000b80 	.word	0x24000b80

0800b450 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b08a      	sub	sp, #40	; 0x28
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b458:	2300      	movs	r3, #0
 800b45a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b45c:	f001 fc2c 	bl	800ccb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b460:	4b5b      	ldr	r3, [pc, #364]	; (800b5d0 <pvPortMalloc+0x180>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d101      	bne.n	800b46c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b468:	f000 f920 	bl	800b6ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b46c:	4b59      	ldr	r3, [pc, #356]	; (800b5d4 <pvPortMalloc+0x184>)
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4013      	ands	r3, r2
 800b474:	2b00      	cmp	r3, #0
 800b476:	f040 8093 	bne.w	800b5a0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d01d      	beq.n	800b4bc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b480:	2208      	movs	r2, #8
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4413      	add	r3, r2
 800b486:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f003 0307 	and.w	r3, r3, #7
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d014      	beq.n	800b4bc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f023 0307 	bic.w	r3, r3, #7
 800b498:	3308      	adds	r3, #8
 800b49a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f003 0307 	and.w	r3, r3, #7
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d00a      	beq.n	800b4bc <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4aa:	f383 8811 	msr	BASEPRI, r3
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b4b8:	bf00      	nop
 800b4ba:	e7fe      	b.n	800b4ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d06e      	beq.n	800b5a0 <pvPortMalloc+0x150>
 800b4c2:	4b45      	ldr	r3, [pc, #276]	; (800b5d8 <pvPortMalloc+0x188>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d869      	bhi.n	800b5a0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b4cc:	4b43      	ldr	r3, [pc, #268]	; (800b5dc <pvPortMalloc+0x18c>)
 800b4ce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b4d0:	4b42      	ldr	r3, [pc, #264]	; (800b5dc <pvPortMalloc+0x18c>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4d6:	e004      	b.n	800b4e2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4da:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d903      	bls.n	800b4f4 <pvPortMalloc+0xa4>
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1f1      	bne.n	800b4d8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b4f4:	4b36      	ldr	r3, [pc, #216]	; (800b5d0 <pvPortMalloc+0x180>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d050      	beq.n	800b5a0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4fe:	6a3b      	ldr	r3, [r7, #32]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2208      	movs	r2, #8
 800b504:	4413      	add	r3, r2
 800b506:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	6a3b      	ldr	r3, [r7, #32]
 800b50e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b512:	685a      	ldr	r2, [r3, #4]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	1ad2      	subs	r2, r2, r3
 800b518:	2308      	movs	r3, #8
 800b51a:	005b      	lsls	r3, r3, #1
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d91f      	bls.n	800b560 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4413      	add	r3, r2
 800b526:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	f003 0307 	and.w	r3, r3, #7
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00a      	beq.n	800b548 <pvPortMalloc+0xf8>
	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	613b      	str	r3, [r7, #16]
}
 800b544:	bf00      	nop
 800b546:	e7fe      	b.n	800b546 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54a:	685a      	ldr	r2, [r3, #4]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	1ad2      	subs	r2, r2, r3
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b55a:	69b8      	ldr	r0, [r7, #24]
 800b55c:	f000 f908 	bl	800b770 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b560:	4b1d      	ldr	r3, [pc, #116]	; (800b5d8 <pvPortMalloc+0x188>)
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	4a1b      	ldr	r2, [pc, #108]	; (800b5d8 <pvPortMalloc+0x188>)
 800b56c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b56e:	4b1a      	ldr	r3, [pc, #104]	; (800b5d8 <pvPortMalloc+0x188>)
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	4b1b      	ldr	r3, [pc, #108]	; (800b5e0 <pvPortMalloc+0x190>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	429a      	cmp	r2, r3
 800b578:	d203      	bcs.n	800b582 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b57a:	4b17      	ldr	r3, [pc, #92]	; (800b5d8 <pvPortMalloc+0x188>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a18      	ldr	r2, [pc, #96]	; (800b5e0 <pvPortMalloc+0x190>)
 800b580:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	4b13      	ldr	r3, [pc, #76]	; (800b5d4 <pvPortMalloc+0x184>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	431a      	orrs	r2, r3
 800b58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b592:	2200      	movs	r2, #0
 800b594:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b596:	4b13      	ldr	r3, [pc, #76]	; (800b5e4 <pvPortMalloc+0x194>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	3301      	adds	r3, #1
 800b59c:	4a11      	ldr	r2, [pc, #68]	; (800b5e4 <pvPortMalloc+0x194>)
 800b59e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b5a0:	f001 fb98 	bl	800ccd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	f003 0307 	and.w	r3, r3, #7
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00a      	beq.n	800b5c4 <pvPortMalloc+0x174>
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	60fb      	str	r3, [r7, #12]
}
 800b5c0:	bf00      	nop
 800b5c2:	e7fe      	b.n	800b5c2 <pvPortMalloc+0x172>
	return pvReturn;
 800b5c4:	69fb      	ldr	r3, [r7, #28]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3728      	adds	r7, #40	; 0x28
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	24004b88 	.word	0x24004b88
 800b5d4:	24004b9c 	.word	0x24004b9c
 800b5d8:	24004b8c 	.word	0x24004b8c
 800b5dc:	24004b80 	.word	0x24004b80
 800b5e0:	24004b90 	.word	0x24004b90
 800b5e4:	24004b94 	.word	0x24004b94

0800b5e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d04d      	beq.n	800b696 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b5fa:	2308      	movs	r3, #8
 800b5fc:	425b      	negs	r3, r3
 800b5fe:	697a      	ldr	r2, [r7, #20]
 800b600:	4413      	add	r3, r2
 800b602:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	4b24      	ldr	r3, [pc, #144]	; (800b6a0 <vPortFree+0xb8>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4013      	ands	r3, r2
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10a      	bne.n	800b62c <vPortFree+0x44>
	__asm volatile
 800b616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	60fb      	str	r3, [r7, #12]
}
 800b628:	bf00      	nop
 800b62a:	e7fe      	b.n	800b62a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00a      	beq.n	800b64a <vPortFree+0x62>
	__asm volatile
 800b634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b638:	f383 8811 	msr	BASEPRI, r3
 800b63c:	f3bf 8f6f 	isb	sy
 800b640:	f3bf 8f4f 	dsb	sy
 800b644:	60bb      	str	r3, [r7, #8]
}
 800b646:	bf00      	nop
 800b648:	e7fe      	b.n	800b648 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	685a      	ldr	r2, [r3, #4]
 800b64e:	4b14      	ldr	r3, [pc, #80]	; (800b6a0 <vPortFree+0xb8>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4013      	ands	r3, r2
 800b654:	2b00      	cmp	r3, #0
 800b656:	d01e      	beq.n	800b696 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d11a      	bne.n	800b696 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	685a      	ldr	r2, [r3, #4]
 800b664:	4b0e      	ldr	r3, [pc, #56]	; (800b6a0 <vPortFree+0xb8>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	43db      	mvns	r3, r3
 800b66a:	401a      	ands	r2, r3
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b670:	f001 fb22 	bl	800ccb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	685a      	ldr	r2, [r3, #4]
 800b678:	4b0a      	ldr	r3, [pc, #40]	; (800b6a4 <vPortFree+0xbc>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4413      	add	r3, r2
 800b67e:	4a09      	ldr	r2, [pc, #36]	; (800b6a4 <vPortFree+0xbc>)
 800b680:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b682:	6938      	ldr	r0, [r7, #16]
 800b684:	f000 f874 	bl	800b770 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b688:	4b07      	ldr	r3, [pc, #28]	; (800b6a8 <vPortFree+0xc0>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	3301      	adds	r3, #1
 800b68e:	4a06      	ldr	r2, [pc, #24]	; (800b6a8 <vPortFree+0xc0>)
 800b690:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b692:	f001 fb1f 	bl	800ccd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b696:	bf00      	nop
 800b698:	3718      	adds	r7, #24
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	24004b9c 	.word	0x24004b9c
 800b6a4:	24004b8c 	.word	0x24004b8c
 800b6a8:	24004b98 	.word	0x24004b98

0800b6ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b6b2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b6b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b6b8:	4b27      	ldr	r3, [pc, #156]	; (800b758 <prvHeapInit+0xac>)
 800b6ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f003 0307 	and.w	r3, r3, #7
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00c      	beq.n	800b6e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	3307      	adds	r3, #7
 800b6ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f023 0307 	bic.w	r3, r3, #7
 800b6d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	4a1f      	ldr	r2, [pc, #124]	; (800b758 <prvHeapInit+0xac>)
 800b6dc:	4413      	add	r3, r2
 800b6de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b6e4:	4a1d      	ldr	r2, [pc, #116]	; (800b75c <prvHeapInit+0xb0>)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b6ea:	4b1c      	ldr	r3, [pc, #112]	; (800b75c <prvHeapInit+0xb0>)
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	68ba      	ldr	r2, [r7, #8]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b6f8:	2208      	movs	r2, #8
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	1a9b      	subs	r3, r3, r2
 800b6fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f023 0307 	bic.w	r3, r3, #7
 800b706:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	4a15      	ldr	r2, [pc, #84]	; (800b760 <prvHeapInit+0xb4>)
 800b70c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b70e:	4b14      	ldr	r3, [pc, #80]	; (800b760 <prvHeapInit+0xb4>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2200      	movs	r2, #0
 800b714:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b716:	4b12      	ldr	r3, [pc, #72]	; (800b760 <prvHeapInit+0xb4>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2200      	movs	r2, #0
 800b71c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	1ad2      	subs	r2, r2, r3
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b72c:	4b0c      	ldr	r3, [pc, #48]	; (800b760 <prvHeapInit+0xb4>)
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	4a0a      	ldr	r2, [pc, #40]	; (800b764 <prvHeapInit+0xb8>)
 800b73a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	4a09      	ldr	r2, [pc, #36]	; (800b768 <prvHeapInit+0xbc>)
 800b742:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b744:	4b09      	ldr	r3, [pc, #36]	; (800b76c <prvHeapInit+0xc0>)
 800b746:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b74a:	601a      	str	r2, [r3, #0]
}
 800b74c:	bf00      	nop
 800b74e:	3714      	adds	r7, #20
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	24000f80 	.word	0x24000f80
 800b75c:	24004b80 	.word	0x24004b80
 800b760:	24004b88 	.word	0x24004b88
 800b764:	24004b90 	.word	0x24004b90
 800b768:	24004b8c 	.word	0x24004b8c
 800b76c:	24004b9c 	.word	0x24004b9c

0800b770 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b778:	4b28      	ldr	r3, [pc, #160]	; (800b81c <prvInsertBlockIntoFreeList+0xac>)
 800b77a:	60fb      	str	r3, [r7, #12]
 800b77c:	e002      	b.n	800b784 <prvInsertBlockIntoFreeList+0x14>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	60fb      	str	r3, [r7, #12]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d8f7      	bhi.n	800b77e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	68ba      	ldr	r2, [r7, #8]
 800b798:	4413      	add	r3, r2
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d108      	bne.n	800b7b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	685a      	ldr	r2, [r3, #4]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	441a      	add	r2, r3
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	68ba      	ldr	r2, [r7, #8]
 800b7bc:	441a      	add	r2, r3
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d118      	bne.n	800b7f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	4b15      	ldr	r3, [pc, #84]	; (800b820 <prvInsertBlockIntoFreeList+0xb0>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d00d      	beq.n	800b7ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	685a      	ldr	r2, [r3, #4]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	441a      	add	r2, r3
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	601a      	str	r2, [r3, #0]
 800b7ec:	e008      	b.n	800b800 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b7ee:	4b0c      	ldr	r3, [pc, #48]	; (800b820 <prvInsertBlockIntoFreeList+0xb0>)
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	601a      	str	r2, [r3, #0]
 800b7f6:	e003      	b.n	800b800 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	429a      	cmp	r2, r3
 800b806:	d002      	beq.n	800b80e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b80e:	bf00      	nop
 800b810:	3714      	adds	r7, #20
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	24004b80 	.word	0x24004b80
 800b820:	24004b88 	.word	0x24004b88

0800b824 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f103 0208 	add.w	r2, r3, #8
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f04f 32ff 	mov.w	r2, #4294967295
 800b83c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f103 0208 	add.w	r2, r3, #8
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f103 0208 	add.w	r2, r3, #8
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b858:	bf00      	nop
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b872:	bf00      	nop
 800b874:	370c      	adds	r7, #12
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr

0800b87e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b87e:	b480      	push	{r7}
 800b880:	b085      	sub	sp, #20
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	689a      	ldr	r2, [r3, #8]
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	683a      	ldr	r2, [r7, #0]
 800b8a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	683a      	ldr	r2, [r7, #0]
 800b8a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	1c5a      	adds	r2, r3, #1
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	601a      	str	r2, [r3, #0]
}
 800b8ba:	bf00      	nop
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8c6:	b480      	push	{r7}
 800b8c8:	b085      	sub	sp, #20
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
 800b8ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8dc:	d103      	bne.n	800b8e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	691b      	ldr	r3, [r3, #16]
 800b8e2:	60fb      	str	r3, [r7, #12]
 800b8e4:	e00c      	b.n	800b900 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	60fb      	str	r3, [r7, #12]
 800b8ec:	e002      	b.n	800b8f4 <vListInsert+0x2e>
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	60fb      	str	r3, [r7, #12]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d2f6      	bcs.n	800b8ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	685a      	ldr	r2, [r3, #4]
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	68fa      	ldr	r2, [r7, #12]
 800b914:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	683a      	ldr	r2, [r7, #0]
 800b91a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	1c5a      	adds	r2, r3, #1
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	601a      	str	r2, [r3, #0]
}
 800b92c:	bf00      	nop
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	691b      	ldr	r3, [r3, #16]
 800b944:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	6892      	ldr	r2, [r2, #8]
 800b94e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	689b      	ldr	r3, [r3, #8]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	6852      	ldr	r2, [r2, #4]
 800b958:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	429a      	cmp	r2, r3
 800b962:	d103      	bne.n	800b96c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	689a      	ldr	r2, [r3, #8]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	1e5a      	subs	r2, r3, #1
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3714      	adds	r7, #20
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	3b04      	subs	r3, #4
 800b99c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b9a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3b04      	subs	r3, #4
 800b9aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	f023 0201 	bic.w	r2, r3, #1
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	3b04      	subs	r3, #4
 800b9ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9bc:	4a0c      	ldr	r2, [pc, #48]	; (800b9f0 <pxPortInitialiseStack+0x64>)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	3b14      	subs	r3, #20
 800b9c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	3b04      	subs	r3, #4
 800b9d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f06f 0202 	mvn.w	r2, #2
 800b9da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	3b20      	subs	r3, #32
 800b9e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3714      	adds	r7, #20
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr
 800b9f0:	0800b9f5 	.word	0x0800b9f5

0800b9f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b9fe:	4b12      	ldr	r3, [pc, #72]	; (800ba48 <prvTaskExitError+0x54>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba06:	d00a      	beq.n	800ba1e <prvTaskExitError+0x2a>
	__asm volatile
 800ba08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	60fb      	str	r3, [r7, #12]
}
 800ba1a:	bf00      	nop
 800ba1c:	e7fe      	b.n	800ba1c <prvTaskExitError+0x28>
	__asm volatile
 800ba1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba22:	f383 8811 	msr	BASEPRI, r3
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	60bb      	str	r3, [r7, #8]
}
 800ba30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba32:	bf00      	nop
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d0fc      	beq.n	800ba34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba3a:	bf00      	nop
 800ba3c:	bf00      	nop
 800ba3e:	3714      	adds	r7, #20
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	24000010 	.word	0x24000010
 800ba4c:	00000000 	.word	0x00000000

0800ba50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba50:	4b07      	ldr	r3, [pc, #28]	; (800ba70 <pxCurrentTCBConst2>)
 800ba52:	6819      	ldr	r1, [r3, #0]
 800ba54:	6808      	ldr	r0, [r1, #0]
 800ba56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5a:	f380 8809 	msr	PSP, r0
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f04f 0000 	mov.w	r0, #0
 800ba66:	f380 8811 	msr	BASEPRI, r0
 800ba6a:	4770      	bx	lr
 800ba6c:	f3af 8000 	nop.w

0800ba70 <pxCurrentTCBConst2>:
 800ba70:	24004be8 	.word	0x24004be8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba74:	bf00      	nop
 800ba76:	bf00      	nop

0800ba78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba78:	4808      	ldr	r0, [pc, #32]	; (800ba9c <prvPortStartFirstTask+0x24>)
 800ba7a:	6800      	ldr	r0, [r0, #0]
 800ba7c:	6800      	ldr	r0, [r0, #0]
 800ba7e:	f380 8808 	msr	MSP, r0
 800ba82:	f04f 0000 	mov.w	r0, #0
 800ba86:	f380 8814 	msr	CONTROL, r0
 800ba8a:	b662      	cpsie	i
 800ba8c:	b661      	cpsie	f
 800ba8e:	f3bf 8f4f 	dsb	sy
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	df00      	svc	0
 800ba98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba9a:	bf00      	nop
 800ba9c:	e000ed08 	.word	0xe000ed08

0800baa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800baa6:	4b46      	ldr	r3, [pc, #280]	; (800bbc0 <xPortStartScheduler+0x120>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a46      	ldr	r2, [pc, #280]	; (800bbc4 <xPortStartScheduler+0x124>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d10a      	bne.n	800bac6 <xPortStartScheduler+0x26>
	__asm volatile
 800bab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab4:	f383 8811 	msr	BASEPRI, r3
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	613b      	str	r3, [r7, #16]
}
 800bac2:	bf00      	nop
 800bac4:	e7fe      	b.n	800bac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bac6:	4b3e      	ldr	r3, [pc, #248]	; (800bbc0 <xPortStartScheduler+0x120>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a3f      	ldr	r2, [pc, #252]	; (800bbc8 <xPortStartScheduler+0x128>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d10a      	bne.n	800bae6 <xPortStartScheduler+0x46>
	__asm volatile
 800bad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad4:	f383 8811 	msr	BASEPRI, r3
 800bad8:	f3bf 8f6f 	isb	sy
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	60fb      	str	r3, [r7, #12]
}
 800bae2:	bf00      	nop
 800bae4:	e7fe      	b.n	800bae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bae6:	4b39      	ldr	r3, [pc, #228]	; (800bbcc <xPortStartScheduler+0x12c>)
 800bae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	22ff      	movs	r2, #255	; 0xff
 800baf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb00:	78fb      	ldrb	r3, [r7, #3]
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb08:	b2da      	uxtb	r2, r3
 800bb0a:	4b31      	ldr	r3, [pc, #196]	; (800bbd0 <xPortStartScheduler+0x130>)
 800bb0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb0e:	4b31      	ldr	r3, [pc, #196]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb10:	2207      	movs	r2, #7
 800bb12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb14:	e009      	b.n	800bb2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bb16:	4b2f      	ldr	r3, [pc, #188]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	4a2d      	ldr	r2, [pc, #180]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb20:	78fb      	ldrb	r3, [r7, #3]
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	005b      	lsls	r3, r3, #1
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb2a:	78fb      	ldrb	r3, [r7, #3]
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb32:	2b80      	cmp	r3, #128	; 0x80
 800bb34:	d0ef      	beq.n	800bb16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb36:	4b27      	ldr	r3, [pc, #156]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f1c3 0307 	rsb	r3, r3, #7
 800bb3e:	2b04      	cmp	r3, #4
 800bb40:	d00a      	beq.n	800bb58 <xPortStartScheduler+0xb8>
	__asm volatile
 800bb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb46:	f383 8811 	msr	BASEPRI, r3
 800bb4a:	f3bf 8f6f 	isb	sy
 800bb4e:	f3bf 8f4f 	dsb	sy
 800bb52:	60bb      	str	r3, [r7, #8]
}
 800bb54:	bf00      	nop
 800bb56:	e7fe      	b.n	800bb56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb58:	4b1e      	ldr	r3, [pc, #120]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	021b      	lsls	r3, r3, #8
 800bb5e:	4a1d      	ldr	r2, [pc, #116]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb62:	4b1c      	ldr	r3, [pc, #112]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb6a:	4a1a      	ldr	r2, [pc, #104]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	b2da      	uxtb	r2, r3
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb76:	4b18      	ldr	r3, [pc, #96]	; (800bbd8 <xPortStartScheduler+0x138>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a17      	ldr	r2, [pc, #92]	; (800bbd8 <xPortStartScheduler+0x138>)
 800bb7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb82:	4b15      	ldr	r3, [pc, #84]	; (800bbd8 <xPortStartScheduler+0x138>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a14      	ldr	r2, [pc, #80]	; (800bbd8 <xPortStartScheduler+0x138>)
 800bb88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb8e:	f000 f8dd 	bl	800bd4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb92:	4b12      	ldr	r3, [pc, #72]	; (800bbdc <xPortStartScheduler+0x13c>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb98:	f000 f8fc 	bl	800bd94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb9c:	4b10      	ldr	r3, [pc, #64]	; (800bbe0 <xPortStartScheduler+0x140>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a0f      	ldr	r2, [pc, #60]	; (800bbe0 <xPortStartScheduler+0x140>)
 800bba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bba8:	f7ff ff66 	bl	800ba78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bbac:	f001 f9fa 	bl	800cfa4 <vTaskSwitchContext>
	prvTaskExitError();
 800bbb0:	f7ff ff20 	bl	800b9f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3718      	adds	r7, #24
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	e000ed00 	.word	0xe000ed00
 800bbc4:	410fc271 	.word	0x410fc271
 800bbc8:	410fc270 	.word	0x410fc270
 800bbcc:	e000e400 	.word	0xe000e400
 800bbd0:	24004ba0 	.word	0x24004ba0
 800bbd4:	24004ba4 	.word	0x24004ba4
 800bbd8:	e000ed20 	.word	0xe000ed20
 800bbdc:	24000010 	.word	0x24000010
 800bbe0:	e000ef34 	.word	0xe000ef34

0800bbe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
	__asm volatile
 800bbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbee:	f383 8811 	msr	BASEPRI, r3
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	607b      	str	r3, [r7, #4]
}
 800bbfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bbfe:	4b0f      	ldr	r3, [pc, #60]	; (800bc3c <vPortEnterCritical+0x58>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	3301      	adds	r3, #1
 800bc04:	4a0d      	ldr	r2, [pc, #52]	; (800bc3c <vPortEnterCritical+0x58>)
 800bc06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc08:	4b0c      	ldr	r3, [pc, #48]	; (800bc3c <vPortEnterCritical+0x58>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d10f      	bne.n	800bc30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc10:	4b0b      	ldr	r3, [pc, #44]	; (800bc40 <vPortEnterCritical+0x5c>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d00a      	beq.n	800bc30 <vPortEnterCritical+0x4c>
	__asm volatile
 800bc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1e:	f383 8811 	msr	BASEPRI, r3
 800bc22:	f3bf 8f6f 	isb	sy
 800bc26:	f3bf 8f4f 	dsb	sy
 800bc2a:	603b      	str	r3, [r7, #0]
}
 800bc2c:	bf00      	nop
 800bc2e:	e7fe      	b.n	800bc2e <vPortEnterCritical+0x4a>
	}
}
 800bc30:	bf00      	nop
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	24000010 	.word	0x24000010
 800bc40:	e000ed04 	.word	0xe000ed04

0800bc44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc4a:	4b12      	ldr	r3, [pc, #72]	; (800bc94 <vPortExitCritical+0x50>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10a      	bne.n	800bc68 <vPortExitCritical+0x24>
	__asm volatile
 800bc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc56:	f383 8811 	msr	BASEPRI, r3
 800bc5a:	f3bf 8f6f 	isb	sy
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	607b      	str	r3, [r7, #4]
}
 800bc64:	bf00      	nop
 800bc66:	e7fe      	b.n	800bc66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bc68:	4b0a      	ldr	r3, [pc, #40]	; (800bc94 <vPortExitCritical+0x50>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	4a09      	ldr	r2, [pc, #36]	; (800bc94 <vPortExitCritical+0x50>)
 800bc70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc72:	4b08      	ldr	r3, [pc, #32]	; (800bc94 <vPortExitCritical+0x50>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d105      	bne.n	800bc86 <vPortExitCritical+0x42>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc86:	bf00      	nop
 800bc88:	370c      	adds	r7, #12
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop
 800bc94:	24000010 	.word	0x24000010
	...

0800bca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bca0:	f3ef 8009 	mrs	r0, PSP
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	4b15      	ldr	r3, [pc, #84]	; (800bd00 <pxCurrentTCBConst>)
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	f01e 0f10 	tst.w	lr, #16
 800bcb0:	bf08      	it	eq
 800bcb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bcb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcba:	6010      	str	r0, [r2, #0]
 800bcbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bcc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bcc4:	f380 8811 	msr	BASEPRI, r0
 800bcc8:	f3bf 8f4f 	dsb	sy
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f001 f968 	bl	800cfa4 <vTaskSwitchContext>
 800bcd4:	f04f 0000 	mov.w	r0, #0
 800bcd8:	f380 8811 	msr	BASEPRI, r0
 800bcdc:	bc09      	pop	{r0, r3}
 800bcde:	6819      	ldr	r1, [r3, #0]
 800bce0:	6808      	ldr	r0, [r1, #0]
 800bce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce6:	f01e 0f10 	tst.w	lr, #16
 800bcea:	bf08      	it	eq
 800bcec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bcf0:	f380 8809 	msr	PSP, r0
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	f3af 8000 	nop.w

0800bd00 <pxCurrentTCBConst>:
 800bd00:	24004be8 	.word	0x24004be8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd04:	bf00      	nop
 800bd06:	bf00      	nop

0800bd08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	607b      	str	r3, [r7, #4]
}
 800bd20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd22:	f001 f885 	bl	800ce30 <xTaskIncrementTick>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d003      	beq.n	800bd34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd2c:	4b06      	ldr	r3, [pc, #24]	; (800bd48 <xPortSysTickHandler+0x40>)
 800bd2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd32:	601a      	str	r2, [r3, #0]
 800bd34:	2300      	movs	r3, #0
 800bd36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	f383 8811 	msr	BASEPRI, r3
}
 800bd3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd40:	bf00      	nop
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	e000ed04 	.word	0xe000ed04

0800bd4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd50:	4b0b      	ldr	r3, [pc, #44]	; (800bd80 <vPortSetupTimerInterrupt+0x34>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd56:	4b0b      	ldr	r3, [pc, #44]	; (800bd84 <vPortSetupTimerInterrupt+0x38>)
 800bd58:	2200      	movs	r2, #0
 800bd5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd5c:	4b0a      	ldr	r3, [pc, #40]	; (800bd88 <vPortSetupTimerInterrupt+0x3c>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a0a      	ldr	r2, [pc, #40]	; (800bd8c <vPortSetupTimerInterrupt+0x40>)
 800bd62:	fba2 2303 	umull	r2, r3, r2, r3
 800bd66:	099b      	lsrs	r3, r3, #6
 800bd68:	4a09      	ldr	r2, [pc, #36]	; (800bd90 <vPortSetupTimerInterrupt+0x44>)
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd6e:	4b04      	ldr	r3, [pc, #16]	; (800bd80 <vPortSetupTimerInterrupt+0x34>)
 800bd70:	2207      	movs	r2, #7
 800bd72:	601a      	str	r2, [r3, #0]
}
 800bd74:	bf00      	nop
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	e000e010 	.word	0xe000e010
 800bd84:	e000e018 	.word	0xe000e018
 800bd88:	24000000 	.word	0x24000000
 800bd8c:	10624dd3 	.word	0x10624dd3
 800bd90:	e000e014 	.word	0xe000e014

0800bd94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bda4 <vPortEnableVFP+0x10>
 800bd98:	6801      	ldr	r1, [r0, #0]
 800bd9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd9e:	6001      	str	r1, [r0, #0]
 800bda0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bda2:	bf00      	nop
 800bda4:	e000ed88 	.word	0xe000ed88

0800bda8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdae:	f3ef 8305 	mrs	r3, IPSR
 800bdb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2b0f      	cmp	r3, #15
 800bdb8:	d914      	bls.n	800bde4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdba:	4a17      	ldr	r2, [pc, #92]	; (800be18 <vPortValidateInterruptPriority+0x70>)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bdc4:	4b15      	ldr	r3, [pc, #84]	; (800be1c <vPortValidateInterruptPriority+0x74>)
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	7afa      	ldrb	r2, [r7, #11]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d20a      	bcs.n	800bde4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd2:	f383 8811 	msr	BASEPRI, r3
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	607b      	str	r3, [r7, #4]
}
 800bde0:	bf00      	nop
 800bde2:	e7fe      	b.n	800bde2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bde4:	4b0e      	ldr	r3, [pc, #56]	; (800be20 <vPortValidateInterruptPriority+0x78>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bdec:	4b0d      	ldr	r3, [pc, #52]	; (800be24 <vPortValidateInterruptPriority+0x7c>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d90a      	bls.n	800be0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf8:	f383 8811 	msr	BASEPRI, r3
 800bdfc:	f3bf 8f6f 	isb	sy
 800be00:	f3bf 8f4f 	dsb	sy
 800be04:	603b      	str	r3, [r7, #0]
}
 800be06:	bf00      	nop
 800be08:	e7fe      	b.n	800be08 <vPortValidateInterruptPriority+0x60>
	}
 800be0a:	bf00      	nop
 800be0c:	3714      	adds	r7, #20
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	e000e3f0 	.word	0xe000e3f0
 800be1c:	24004ba0 	.word	0x24004ba0
 800be20:	e000ed0c 	.word	0xe000ed0c
 800be24:	24004ba4 	.word	0x24004ba4

0800be28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d10a      	bne.n	800be52 <xQueueGenericReset+0x2a>
	__asm volatile
 800be3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be40:	f383 8811 	msr	BASEPRI, r3
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	60bb      	str	r3, [r7, #8]
}
 800be4e:	bf00      	nop
 800be50:	e7fe      	b.n	800be50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800be52:	f7ff fec7 	bl	800bbe4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be5e:	68f9      	ldr	r1, [r7, #12]
 800be60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800be62:	fb01 f303 	mul.w	r3, r1, r3
 800be66:	441a      	add	r2, r3
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be82:	3b01      	subs	r3, #1
 800be84:	68f9      	ldr	r1, [r7, #12]
 800be86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800be88:	fb01 f303 	mul.w	r3, r1, r3
 800be8c:	441a      	add	r2, r3
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	22ff      	movs	r2, #255	; 0xff
 800be96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	22ff      	movs	r2, #255	; 0xff
 800be9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d114      	bne.n	800bed2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d01a      	beq.n	800bee6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	3310      	adds	r3, #16
 800beb4:	4618      	mov	r0, r3
 800beb6:	f001 f929 	bl	800d10c <xTaskRemoveFromEventList>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d012      	beq.n	800bee6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bec0:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <xQueueGenericReset+0xcc>)
 800bec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec6:	601a      	str	r2, [r3, #0]
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	e009      	b.n	800bee6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	3310      	adds	r3, #16
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7ff fca4 	bl	800b824 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	3324      	adds	r3, #36	; 0x24
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7ff fc9f 	bl	800b824 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bee6:	f7ff fead 	bl	800bc44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800beea:	2301      	movs	r3, #1
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	e000ed04 	.word	0xe000ed04

0800bef8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b08e      	sub	sp, #56	; 0x38
 800befc:	af02      	add	r7, sp, #8
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	607a      	str	r2, [r7, #4]
 800bf04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10a      	bne.n	800bf22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf10:	f383 8811 	msr	BASEPRI, r3
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf1e:	bf00      	nop
 800bf20:	e7fe      	b.n	800bf20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d10a      	bne.n	800bf3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2c:	f383 8811 	msr	BASEPRI, r3
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf3a:	bf00      	nop
 800bf3c:	e7fe      	b.n	800bf3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d002      	beq.n	800bf4a <xQueueGenericCreateStatic+0x52>
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d001      	beq.n	800bf4e <xQueueGenericCreateStatic+0x56>
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	e000      	b.n	800bf50 <xQueueGenericCreateStatic+0x58>
 800bf4e:	2300      	movs	r3, #0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10a      	bne.n	800bf6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf58:	f383 8811 	msr	BASEPRI, r3
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	623b      	str	r3, [r7, #32]
}
 800bf66:	bf00      	nop
 800bf68:	e7fe      	b.n	800bf68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d102      	bne.n	800bf76 <xQueueGenericCreateStatic+0x7e>
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d101      	bne.n	800bf7a <xQueueGenericCreateStatic+0x82>
 800bf76:	2301      	movs	r3, #1
 800bf78:	e000      	b.n	800bf7c <xQueueGenericCreateStatic+0x84>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d10a      	bne.n	800bf96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	61fb      	str	r3, [r7, #28]
}
 800bf92:	bf00      	nop
 800bf94:	e7fe      	b.n	800bf94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bf96:	2350      	movs	r3, #80	; 0x50
 800bf98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	2b50      	cmp	r3, #80	; 0x50
 800bf9e:	d00a      	beq.n	800bfb6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa4:	f383 8811 	msr	BASEPRI, r3
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	61bb      	str	r3, [r7, #24]
}
 800bfb2:	bf00      	nop
 800bfb4:	e7fe      	b.n	800bfb4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bfb6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00d      	beq.n	800bfde <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bfca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	68b9      	ldr	r1, [r7, #8]
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f000 f805 	bl	800bfe8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3730      	adds	r7, #48	; 0x30
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
 800bff4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d103      	bne.n	800c004 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	69ba      	ldr	r2, [r7, #24]
 800c000:	601a      	str	r2, [r3, #0]
 800c002:	e002      	b.n	800c00a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c016:	2101      	movs	r1, #1
 800c018:	69b8      	ldr	r0, [r7, #24]
 800c01a:	f7ff ff05 	bl	800be28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	78fa      	ldrb	r2, [r7, #3]
 800c022:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c026:	bf00      	nop
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
	...

0800c030 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b08e      	sub	sp, #56	; 0x38
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	607a      	str	r2, [r7, #4]
 800c03c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c03e:	2300      	movs	r3, #0
 800c040:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d10a      	bne.n	800c062 <xQueueGenericSend+0x32>
	__asm volatile
 800c04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c050:	f383 8811 	msr	BASEPRI, r3
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f3bf 8f4f 	dsb	sy
 800c05c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c05e:	bf00      	nop
 800c060:	e7fe      	b.n	800c060 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d103      	bne.n	800c070 <xQueueGenericSend+0x40>
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d101      	bne.n	800c074 <xQueueGenericSend+0x44>
 800c070:	2301      	movs	r3, #1
 800c072:	e000      	b.n	800c076 <xQueueGenericSend+0x46>
 800c074:	2300      	movs	r3, #0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d10a      	bne.n	800c090 <xQueueGenericSend+0x60>
	__asm volatile
 800c07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c08c:	bf00      	nop
 800c08e:	e7fe      	b.n	800c08e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	2b02      	cmp	r3, #2
 800c094:	d103      	bne.n	800c09e <xQueueGenericSend+0x6e>
 800c096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d101      	bne.n	800c0a2 <xQueueGenericSend+0x72>
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e000      	b.n	800c0a4 <xQueueGenericSend+0x74>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10a      	bne.n	800c0be <xQueueGenericSend+0x8e>
	__asm volatile
 800c0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ac:	f383 8811 	msr	BASEPRI, r3
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	623b      	str	r3, [r7, #32]
}
 800c0ba:	bf00      	nop
 800c0bc:	e7fe      	b.n	800c0bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0be:	f001 f9e7 	bl	800d490 <xTaskGetSchedulerState>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d102      	bne.n	800c0ce <xQueueGenericSend+0x9e>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d101      	bne.n	800c0d2 <xQueueGenericSend+0xa2>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e000      	b.n	800c0d4 <xQueueGenericSend+0xa4>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10a      	bne.n	800c0ee <xQueueGenericSend+0xbe>
	__asm volatile
 800c0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	61fb      	str	r3, [r7, #28]
}
 800c0ea:	bf00      	nop
 800c0ec:	e7fe      	b.n	800c0ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0ee:	f7ff fd79 	bl	800bbe4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d302      	bcc.n	800c104 <xQueueGenericSend+0xd4>
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	2b02      	cmp	r3, #2
 800c102:	d129      	bne.n	800c158 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c104:	683a      	ldr	r2, [r7, #0]
 800c106:	68b9      	ldr	r1, [r7, #8]
 800c108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c10a:	f000 fa0b 	bl	800c524 <prvCopyDataToQueue>
 800c10e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c114:	2b00      	cmp	r3, #0
 800c116:	d010      	beq.n	800c13a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11a:	3324      	adds	r3, #36	; 0x24
 800c11c:	4618      	mov	r0, r3
 800c11e:	f000 fff5 	bl	800d10c <xTaskRemoveFromEventList>
 800c122:	4603      	mov	r3, r0
 800c124:	2b00      	cmp	r3, #0
 800c126:	d013      	beq.n	800c150 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c128:	4b3f      	ldr	r3, [pc, #252]	; (800c228 <xQueueGenericSend+0x1f8>)
 800c12a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c12e:	601a      	str	r2, [r3, #0]
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	e00a      	b.n	800c150 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d007      	beq.n	800c150 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c140:	4b39      	ldr	r3, [pc, #228]	; (800c228 <xQueueGenericSend+0x1f8>)
 800c142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c146:	601a      	str	r2, [r3, #0]
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c150:	f7ff fd78 	bl	800bc44 <vPortExitCritical>
				return pdPASS;
 800c154:	2301      	movs	r3, #1
 800c156:	e063      	b.n	800c220 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d103      	bne.n	800c166 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c15e:	f7ff fd71 	bl	800bc44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c162:	2300      	movs	r3, #0
 800c164:	e05c      	b.n	800c220 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d106      	bne.n	800c17a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c16c:	f107 0314 	add.w	r3, r7, #20
 800c170:	4618      	mov	r0, r3
 800c172:	f001 f82f 	bl	800d1d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c176:	2301      	movs	r3, #1
 800c178:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c17a:	f7ff fd63 	bl	800bc44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c17e:	f000 fd9b 	bl	800ccb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c182:	f7ff fd2f 	bl	800bbe4 <vPortEnterCritical>
 800c186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c18c:	b25b      	sxtb	r3, r3
 800c18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c192:	d103      	bne.n	800c19c <xQueueGenericSend+0x16c>
 800c194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c196:	2200      	movs	r2, #0
 800c198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1a2:	b25b      	sxtb	r3, r3
 800c1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a8:	d103      	bne.n	800c1b2 <xQueueGenericSend+0x182>
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1b2:	f7ff fd47 	bl	800bc44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1b6:	1d3a      	adds	r2, r7, #4
 800c1b8:	f107 0314 	add.w	r3, r7, #20
 800c1bc:	4611      	mov	r1, r2
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f001 f81e 	bl	800d200 <xTaskCheckForTimeOut>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d124      	bne.n	800c214 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c1ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1cc:	f000 faa2 	bl	800c714 <prvIsQueueFull>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d018      	beq.n	800c208 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d8:	3310      	adds	r3, #16
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	4611      	mov	r1, r2
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f000 ff44 	bl	800d06c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c1e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1e6:	f000 fa2d 	bl	800c644 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c1ea:	f000 fd73 	bl	800ccd4 <xTaskResumeAll>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f47f af7c 	bne.w	800c0ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c1f6:	4b0c      	ldr	r3, [pc, #48]	; (800c228 <xQueueGenericSend+0x1f8>)
 800c1f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1fc:	601a      	str	r2, [r3, #0]
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	f3bf 8f6f 	isb	sy
 800c206:	e772      	b.n	800c0ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c20a:	f000 fa1b 	bl	800c644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c20e:	f000 fd61 	bl	800ccd4 <xTaskResumeAll>
 800c212:	e76c      	b.n	800c0ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c216:	f000 fa15 	bl	800c644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c21a:	f000 fd5b 	bl	800ccd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c21e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c220:	4618      	mov	r0, r3
 800c222:	3738      	adds	r7, #56	; 0x38
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	e000ed04 	.word	0xe000ed04

0800c22c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b090      	sub	sp, #64	; 0x40
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	607a      	str	r2, [r7, #4]
 800c238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10a      	bne.n	800c25a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c248:	f383 8811 	msr	BASEPRI, r3
 800c24c:	f3bf 8f6f 	isb	sy
 800c250:	f3bf 8f4f 	dsb	sy
 800c254:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c256:	bf00      	nop
 800c258:	e7fe      	b.n	800c258 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d103      	bne.n	800c268 <xQueueGenericSendFromISR+0x3c>
 800c260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <xQueueGenericSendFromISR+0x40>
 800c268:	2301      	movs	r3, #1
 800c26a:	e000      	b.n	800c26e <xQueueGenericSendFromISR+0x42>
 800c26c:	2300      	movs	r3, #0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d10a      	bne.n	800c288 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c276:	f383 8811 	msr	BASEPRI, r3
 800c27a:	f3bf 8f6f 	isb	sy
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c284:	bf00      	nop
 800c286:	e7fe      	b.n	800c286 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	2b02      	cmp	r3, #2
 800c28c:	d103      	bne.n	800c296 <xQueueGenericSendFromISR+0x6a>
 800c28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c292:	2b01      	cmp	r3, #1
 800c294:	d101      	bne.n	800c29a <xQueueGenericSendFromISR+0x6e>
 800c296:	2301      	movs	r3, #1
 800c298:	e000      	b.n	800c29c <xQueueGenericSendFromISR+0x70>
 800c29a:	2300      	movs	r3, #0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d10a      	bne.n	800c2b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	623b      	str	r3, [r7, #32]
}
 800c2b2:	bf00      	nop
 800c2b4:	e7fe      	b.n	800c2b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c2b6:	f7ff fd77 	bl	800bda8 <vPortValidateInterruptPriority>
	__asm volatile
 800c2ba:	f3ef 8211 	mrs	r2, BASEPRI
 800c2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	61fa      	str	r2, [r7, #28]
 800c2d0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c2d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d302      	bcc.n	800c2e8 <xQueueGenericSendFromISR+0xbc>
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d12f      	bne.n	800c348 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2f8:	683a      	ldr	r2, [r7, #0]
 800c2fa:	68b9      	ldr	r1, [r7, #8]
 800c2fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c2fe:	f000 f911 	bl	800c524 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c302:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c30a:	d112      	bne.n	800c332 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c310:	2b00      	cmp	r3, #0
 800c312:	d016      	beq.n	800c342 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c316:	3324      	adds	r3, #36	; 0x24
 800c318:	4618      	mov	r0, r3
 800c31a:	f000 fef7 	bl	800d10c <xTaskRemoveFromEventList>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00e      	beq.n	800c342 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00b      	beq.n	800c342 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2201      	movs	r2, #1
 800c32e:	601a      	str	r2, [r3, #0]
 800c330:	e007      	b.n	800c342 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c332:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c336:	3301      	adds	r3, #1
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	b25a      	sxtb	r2, r3
 800c33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c342:	2301      	movs	r3, #1
 800c344:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c346:	e001      	b.n	800c34c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c348:	2300      	movs	r3, #0
 800c34a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c34e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	f383 8811 	msr	BASEPRI, r3
}
 800c356:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3740      	adds	r7, #64	; 0x40
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
	...

0800c364 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b08c      	sub	sp, #48	; 0x30
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c370:	2300      	movs	r3, #0
 800c372:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10a      	bne.n	800c394 <xQueueReceive+0x30>
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	623b      	str	r3, [r7, #32]
}
 800c390:	bf00      	nop
 800c392:	e7fe      	b.n	800c392 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d103      	bne.n	800c3a2 <xQueueReceive+0x3e>
 800c39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <xQueueReceive+0x42>
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e000      	b.n	800c3a8 <xQueueReceive+0x44>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10a      	bne.n	800c3c2 <xQueueReceive+0x5e>
	__asm volatile
 800c3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b0:	f383 8811 	msr	BASEPRI, r3
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	61fb      	str	r3, [r7, #28]
}
 800c3be:	bf00      	nop
 800c3c0:	e7fe      	b.n	800c3c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3c2:	f001 f865 	bl	800d490 <xTaskGetSchedulerState>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d102      	bne.n	800c3d2 <xQueueReceive+0x6e>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d101      	bne.n	800c3d6 <xQueueReceive+0x72>
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e000      	b.n	800c3d8 <xQueueReceive+0x74>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10a      	bne.n	800c3f2 <xQueueReceive+0x8e>
	__asm volatile
 800c3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e0:	f383 8811 	msr	BASEPRI, r3
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	61bb      	str	r3, [r7, #24]
}
 800c3ee:	bf00      	nop
 800c3f0:	e7fe      	b.n	800c3f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3f2:	f7ff fbf7 	bl	800bbe4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d01f      	beq.n	800c442 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c402:	68b9      	ldr	r1, [r7, #8]
 800c404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c406:	f000 f8f7 	bl	800c5f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40c:	1e5a      	subs	r2, r3, #1
 800c40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c410:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c414:	691b      	ldr	r3, [r3, #16]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00f      	beq.n	800c43a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41c:	3310      	adds	r3, #16
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 fe74 	bl	800d10c <xTaskRemoveFromEventList>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d007      	beq.n	800c43a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c42a:	4b3d      	ldr	r3, [pc, #244]	; (800c520 <xQueueReceive+0x1bc>)
 800c42c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c430:	601a      	str	r2, [r3, #0]
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c43a:	f7ff fc03 	bl	800bc44 <vPortExitCritical>
				return pdPASS;
 800c43e:	2301      	movs	r3, #1
 800c440:	e069      	b.n	800c516 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d103      	bne.n	800c450 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c448:	f7ff fbfc 	bl	800bc44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c44c:	2300      	movs	r3, #0
 800c44e:	e062      	b.n	800c516 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c452:	2b00      	cmp	r3, #0
 800c454:	d106      	bne.n	800c464 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c456:	f107 0310 	add.w	r3, r7, #16
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 feba 	bl	800d1d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c460:	2301      	movs	r3, #1
 800c462:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c464:	f7ff fbee 	bl	800bc44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c468:	f000 fc26 	bl	800ccb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c46c:	f7ff fbba 	bl	800bbe4 <vPortEnterCritical>
 800c470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c476:	b25b      	sxtb	r3, r3
 800c478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c47c:	d103      	bne.n	800c486 <xQueueReceive+0x122>
 800c47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c480:	2200      	movs	r2, #0
 800c482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c48c:	b25b      	sxtb	r3, r3
 800c48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c492:	d103      	bne.n	800c49c <xQueueReceive+0x138>
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	2200      	movs	r2, #0
 800c498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c49c:	f7ff fbd2 	bl	800bc44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4a0:	1d3a      	adds	r2, r7, #4
 800c4a2:	f107 0310 	add.w	r3, r7, #16
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f000 fea9 	bl	800d200 <xTaskCheckForTimeOut>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d123      	bne.n	800c4fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4b6:	f000 f917 	bl	800c6e8 <prvIsQueueEmpty>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d017      	beq.n	800c4f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c2:	3324      	adds	r3, #36	; 0x24
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	4611      	mov	r1, r2
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 fdcf 	bl	800d06c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4d0:	f000 f8b8 	bl	800c644 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4d4:	f000 fbfe 	bl	800ccd4 <xTaskResumeAll>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d189      	bne.n	800c3f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c4de:	4b10      	ldr	r3, [pc, #64]	; (800c520 <xQueueReceive+0x1bc>)
 800c4e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e4:	601a      	str	r2, [r3, #0]
 800c4e6:	f3bf 8f4f 	dsb	sy
 800c4ea:	f3bf 8f6f 	isb	sy
 800c4ee:	e780      	b.n	800c3f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c4f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4f2:	f000 f8a7 	bl	800c644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4f6:	f000 fbed 	bl	800ccd4 <xTaskResumeAll>
 800c4fa:	e77a      	b.n	800c3f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c4fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4fe:	f000 f8a1 	bl	800c644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c502:	f000 fbe7 	bl	800ccd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c508:	f000 f8ee 	bl	800c6e8 <prvIsQueueEmpty>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f43f af6f 	beq.w	800c3f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c514:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c516:	4618      	mov	r0, r3
 800c518:	3730      	adds	r7, #48	; 0x30
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	e000ed04 	.word	0xe000ed04

0800c524 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c530:	2300      	movs	r3, #0
 800c532:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c538:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10d      	bne.n	800c55e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d14d      	bne.n	800c5e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	4618      	mov	r0, r3
 800c550:	f000 ffbc 	bl	800d4cc <xTaskPriorityDisinherit>
 800c554:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2200      	movs	r2, #0
 800c55a:	609a      	str	r2, [r3, #8]
 800c55c:	e043      	b.n	800c5e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d119      	bne.n	800c598 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6858      	ldr	r0, [r3, #4]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c56c:	461a      	mov	r2, r3
 800c56e:	68b9      	ldr	r1, [r7, #8]
 800c570:	f001 fcf0 	bl	800df54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	685a      	ldr	r2, [r3, #4]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c57c:	441a      	add	r2, r3
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	685a      	ldr	r2, [r3, #4]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d32b      	bcc.n	800c5e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	605a      	str	r2, [r3, #4]
 800c596:	e026      	b.n	800c5e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	68d8      	ldr	r0, [r3, #12]
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	68b9      	ldr	r1, [r7, #8]
 800c5a4:	f001 fcd6 	bl	800df54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	68da      	ldr	r2, [r3, #12]
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b0:	425b      	negs	r3, r3
 800c5b2:	441a      	add	r2, r3
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	68da      	ldr	r2, [r3, #12]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d207      	bcs.n	800c5d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	689a      	ldr	r2, [r3, #8]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5cc:	425b      	negs	r3, r3
 800c5ce:	441a      	add	r2, r3
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b02      	cmp	r3, #2
 800c5d8:	d105      	bne.n	800c5e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d002      	beq.n	800c5e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	1c5a      	adds	r2, r3, #1
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c5ee:	697b      	ldr	r3, [r7, #20]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3718      	adds	r7, #24
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c606:	2b00      	cmp	r3, #0
 800c608:	d018      	beq.n	800c63c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	68da      	ldr	r2, [r3, #12]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c612:	441a      	add	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	68da      	ldr	r2, [r3, #12]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	689b      	ldr	r3, [r3, #8]
 800c620:	429a      	cmp	r2, r3
 800c622:	d303      	bcc.n	800c62c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	68d9      	ldr	r1, [r3, #12]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c634:	461a      	mov	r2, r3
 800c636:	6838      	ldr	r0, [r7, #0]
 800c638:	f001 fc8c 	bl	800df54 <memcpy>
	}
}
 800c63c:	bf00      	nop
 800c63e:	3708      	adds	r7, #8
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c64c:	f7ff faca 	bl	800bbe4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c656:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c658:	e011      	b.n	800c67e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d012      	beq.n	800c688 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	3324      	adds	r3, #36	; 0x24
 800c666:	4618      	mov	r0, r3
 800c668:	f000 fd50 	bl	800d10c <xTaskRemoveFromEventList>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d001      	beq.n	800c676 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c672:	f000 fe27 	bl	800d2c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c676:	7bfb      	ldrb	r3, [r7, #15]
 800c678:	3b01      	subs	r3, #1
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c67e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c682:	2b00      	cmp	r3, #0
 800c684:	dce9      	bgt.n	800c65a <prvUnlockQueue+0x16>
 800c686:	e000      	b.n	800c68a <prvUnlockQueue+0x46>
					break;
 800c688:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	22ff      	movs	r2, #255	; 0xff
 800c68e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c692:	f7ff fad7 	bl	800bc44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c696:	f7ff faa5 	bl	800bbe4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6a2:	e011      	b.n	800c6c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	691b      	ldr	r3, [r3, #16]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d012      	beq.n	800c6d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	3310      	adds	r3, #16
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f000 fd2b 	bl	800d10c <xTaskRemoveFromEventList>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d001      	beq.n	800c6c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c6bc:	f000 fe02 	bl	800d2c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c6c0:	7bbb      	ldrb	r3, [r7, #14]
 800c6c2:	3b01      	subs	r3, #1
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	dce9      	bgt.n	800c6a4 <prvUnlockQueue+0x60>
 800c6d0:	e000      	b.n	800c6d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c6d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	22ff      	movs	r2, #255	; 0xff
 800c6d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c6dc:	f7ff fab2 	bl	800bc44 <vPortExitCritical>
}
 800c6e0:	bf00      	nop
 800c6e2:	3710      	adds	r7, #16
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6f0:	f7ff fa78 	bl	800bbe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d102      	bne.n	800c702 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	60fb      	str	r3, [r7, #12]
 800c700:	e001      	b.n	800c706 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c702:	2300      	movs	r3, #0
 800c704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c706:	f7ff fa9d 	bl	800bc44 <vPortExitCritical>

	return xReturn;
 800c70a:	68fb      	ldr	r3, [r7, #12]
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c71c:	f7ff fa62 	bl	800bbe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c728:	429a      	cmp	r2, r3
 800c72a:	d102      	bne.n	800c732 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c72c:	2301      	movs	r3, #1
 800c72e:	60fb      	str	r3, [r7, #12]
 800c730:	e001      	b.n	800c736 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c732:	2300      	movs	r3, #0
 800c734:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c736:	f7ff fa85 	bl	800bc44 <vPortExitCritical>

	return xReturn;
 800c73a:	68fb      	ldr	r3, [r7, #12]
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3710      	adds	r7, #16
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c744:	b480      	push	{r7}
 800c746:	b085      	sub	sp, #20
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c74e:	2300      	movs	r3, #0
 800c750:	60fb      	str	r3, [r7, #12]
 800c752:	e014      	b.n	800c77e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c754:	4a0f      	ldr	r2, [pc, #60]	; (800c794 <vQueueAddToRegistry+0x50>)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d10b      	bne.n	800c778 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c760:	490c      	ldr	r1, [pc, #48]	; (800c794 <vQueueAddToRegistry+0x50>)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	683a      	ldr	r2, [r7, #0]
 800c766:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c76a:	4a0a      	ldr	r2, [pc, #40]	; (800c794 <vQueueAddToRegistry+0x50>)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	00db      	lsls	r3, r3, #3
 800c770:	4413      	add	r3, r2
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c776:	e006      	b.n	800c786 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	3301      	adds	r3, #1
 800c77c:	60fb      	str	r3, [r7, #12]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2b07      	cmp	r3, #7
 800c782:	d9e7      	bls.n	800c754 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c784:	bf00      	nop
 800c786:	bf00      	nop
 800c788:	3714      	adds	r7, #20
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	24004ba8 	.word	0x24004ba8

0800c798 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c7a8:	f7ff fa1c 	bl	800bbe4 <vPortEnterCritical>
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7b2:	b25b      	sxtb	r3, r3
 800c7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b8:	d103      	bne.n	800c7c2 <vQueueWaitForMessageRestricted+0x2a>
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7c8:	b25b      	sxtb	r3, r3
 800c7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ce:	d103      	bne.n	800c7d8 <vQueueWaitForMessageRestricted+0x40>
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7d8:	f7ff fa34 	bl	800bc44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d106      	bne.n	800c7f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	3324      	adds	r3, #36	; 0x24
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	68b9      	ldr	r1, [r7, #8]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f000 fc61 	bl	800d0b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c7f2:	6978      	ldr	r0, [r7, #20]
 800c7f4:	f7ff ff26 	bl	800c644 <prvUnlockQueue>
	}
 800c7f8:	bf00      	nop
 800c7fa:	3718      	adds	r7, #24
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c800:	b580      	push	{r7, lr}
 800c802:	b08e      	sub	sp, #56	; 0x38
 800c804:	af04      	add	r7, sp, #16
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	607a      	str	r2, [r7, #4]
 800c80c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c810:	2b00      	cmp	r3, #0
 800c812:	d10a      	bne.n	800c82a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c818:	f383 8811 	msr	BASEPRI, r3
 800c81c:	f3bf 8f6f 	isb	sy
 800c820:	f3bf 8f4f 	dsb	sy
 800c824:	623b      	str	r3, [r7, #32]
}
 800c826:	bf00      	nop
 800c828:	e7fe      	b.n	800c828 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d10a      	bne.n	800c846 <xTaskCreateStatic+0x46>
	__asm volatile
 800c830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c834:	f383 8811 	msr	BASEPRI, r3
 800c838:	f3bf 8f6f 	isb	sy
 800c83c:	f3bf 8f4f 	dsb	sy
 800c840:	61fb      	str	r3, [r7, #28]
}
 800c842:	bf00      	nop
 800c844:	e7fe      	b.n	800c844 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c846:	23bc      	movs	r3, #188	; 0xbc
 800c848:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	2bbc      	cmp	r3, #188	; 0xbc
 800c84e:	d00a      	beq.n	800c866 <xTaskCreateStatic+0x66>
	__asm volatile
 800c850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c854:	f383 8811 	msr	BASEPRI, r3
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	f3bf 8f4f 	dsb	sy
 800c860:	61bb      	str	r3, [r7, #24]
}
 800c862:	bf00      	nop
 800c864:	e7fe      	b.n	800c864 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c866:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d01e      	beq.n	800c8ac <xTaskCreateStatic+0xac>
 800c86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c870:	2b00      	cmp	r3, #0
 800c872:	d01b      	beq.n	800c8ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c876:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c87c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c880:	2202      	movs	r2, #2
 800c882:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c886:	2300      	movs	r3, #0
 800c888:	9303      	str	r3, [sp, #12]
 800c88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88c:	9302      	str	r3, [sp, #8]
 800c88e:	f107 0314 	add.w	r3, r7, #20
 800c892:	9301      	str	r3, [sp, #4]
 800c894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c896:	9300      	str	r3, [sp, #0]
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	68b9      	ldr	r1, [r7, #8]
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	f000 f850 	bl	800c944 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8a6:	f000 f8f3 	bl	800ca90 <prvAddNewTaskToReadyList>
 800c8aa:	e001      	b.n	800c8b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c8b0:	697b      	ldr	r3, [r7, #20]
	}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3728      	adds	r7, #40	; 0x28
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b08c      	sub	sp, #48	; 0x30
 800c8be:	af04      	add	r7, sp, #16
 800c8c0:	60f8      	str	r0, [r7, #12]
 800c8c2:	60b9      	str	r1, [r7, #8]
 800c8c4:	603b      	str	r3, [r7, #0]
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c8ca:	88fb      	ldrh	r3, [r7, #6]
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7fe fdbe 	bl	800b450 <pvPortMalloc>
 800c8d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d00e      	beq.n	800c8fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c8dc:	20bc      	movs	r0, #188	; 0xbc
 800c8de:	f7fe fdb7 	bl	800b450 <pvPortMalloc>
 800c8e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d003      	beq.n	800c8f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	697a      	ldr	r2, [r7, #20]
 800c8ee:	631a      	str	r2, [r3, #48]	; 0x30
 800c8f0:	e005      	b.n	800c8fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c8f2:	6978      	ldr	r0, [r7, #20]
 800c8f4:	f7fe fe78 	bl	800b5e8 <vPortFree>
 800c8f8:	e001      	b.n	800c8fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d017      	beq.n	800c934 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	2200      	movs	r2, #0
 800c908:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c90c:	88fa      	ldrh	r2, [r7, #6]
 800c90e:	2300      	movs	r3, #0
 800c910:	9303      	str	r3, [sp, #12]
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	9302      	str	r3, [sp, #8]
 800c916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c918:	9301      	str	r3, [sp, #4]
 800c91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	68b9      	ldr	r1, [r7, #8]
 800c922:	68f8      	ldr	r0, [r7, #12]
 800c924:	f000 f80e 	bl	800c944 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c928:	69f8      	ldr	r0, [r7, #28]
 800c92a:	f000 f8b1 	bl	800ca90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c92e:	2301      	movs	r3, #1
 800c930:	61bb      	str	r3, [r7, #24]
 800c932:	e002      	b.n	800c93a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c934:	f04f 33ff 	mov.w	r3, #4294967295
 800c938:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c93a:	69bb      	ldr	r3, [r7, #24]
	}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3720      	adds	r7, #32
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b088      	sub	sp, #32
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	607a      	str	r2, [r7, #4]
 800c950:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c954:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	461a      	mov	r2, r3
 800c95c:	21a5      	movs	r1, #165	; 0xa5
 800c95e:	f001 fb07 	bl	800df70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c966:	6879      	ldr	r1, [r7, #4]
 800c968:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c96c:	440b      	add	r3, r1
 800c96e:	009b      	lsls	r3, r3, #2
 800c970:	4413      	add	r3, r2
 800c972:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	f023 0307 	bic.w	r3, r3, #7
 800c97a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	f003 0307 	and.w	r3, r3, #7
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00a      	beq.n	800c99c <prvInitialiseNewTask+0x58>
	__asm volatile
 800c986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98a:	f383 8811 	msr	BASEPRI, r3
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	f3bf 8f4f 	dsb	sy
 800c996:	617b      	str	r3, [r7, #20]
}
 800c998:	bf00      	nop
 800c99a:	e7fe      	b.n	800c99a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d01f      	beq.n	800c9e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	61fb      	str	r3, [r7, #28]
 800c9a6:	e012      	b.n	800c9ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c9a8:	68ba      	ldr	r2, [r7, #8]
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	7819      	ldrb	r1, [r3, #0]
 800c9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	4413      	add	r3, r2
 800c9b6:	3334      	adds	r3, #52	; 0x34
 800c9b8:	460a      	mov	r2, r1
 800c9ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	69fb      	ldr	r3, [r7, #28]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d006      	beq.n	800c9d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	61fb      	str	r3, [r7, #28]
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	2b0f      	cmp	r3, #15
 800c9d2:	d9e9      	bls.n	800c9a8 <prvInitialiseNewTask+0x64>
 800c9d4:	e000      	b.n	800c9d8 <prvInitialiseNewTask+0x94>
			{
				break;
 800c9d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c9e0:	e003      	b.n	800c9ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ec:	2b37      	cmp	r3, #55	; 0x37
 800c9ee:	d901      	bls.n	800c9f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c9f0:	2337      	movs	r3, #55	; 0x37
 800c9f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ca00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca02:	2200      	movs	r2, #0
 800ca04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ca06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca08:	3304      	adds	r3, #4
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7fe ff2a 	bl	800b864 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ca10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca12:	3318      	adds	r3, #24
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7fe ff25 	bl	800b864 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ca1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ca26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ca2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca32:	2200      	movs	r2, #0
 800ca34:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ca40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca42:	3354      	adds	r3, #84	; 0x54
 800ca44:	2260      	movs	r2, #96	; 0x60
 800ca46:	2100      	movs	r1, #0
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f001 fa91 	bl	800df70 <memset>
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca50:	4a0c      	ldr	r2, [pc, #48]	; (800ca84 <prvInitialiseNewTask+0x140>)
 800ca52:	659a      	str	r2, [r3, #88]	; 0x58
 800ca54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca56:	4a0c      	ldr	r2, [pc, #48]	; (800ca88 <prvInitialiseNewTask+0x144>)
 800ca58:	65da      	str	r2, [r3, #92]	; 0x5c
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5c:	4a0b      	ldr	r2, [pc, #44]	; (800ca8c <prvInitialiseNewTask+0x148>)
 800ca5e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ca60:	683a      	ldr	r2, [r7, #0]
 800ca62:	68f9      	ldr	r1, [r7, #12]
 800ca64:	69b8      	ldr	r0, [r7, #24]
 800ca66:	f7fe ff91 	bl	800b98c <pxPortInitialiseStack>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ca70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d002      	beq.n	800ca7c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ca76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca7c:	bf00      	nop
 800ca7e:	3720      	adds	r7, #32
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	080123a8 	.word	0x080123a8
 800ca88:	080123c8 	.word	0x080123c8
 800ca8c:	08012388 	.word	0x08012388

0800ca90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ca98:	f7ff f8a4 	bl	800bbe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ca9c:	4b2d      	ldr	r3, [pc, #180]	; (800cb54 <prvAddNewTaskToReadyList+0xc4>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	3301      	adds	r3, #1
 800caa2:	4a2c      	ldr	r2, [pc, #176]	; (800cb54 <prvAddNewTaskToReadyList+0xc4>)
 800caa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800caa6:	4b2c      	ldr	r3, [pc, #176]	; (800cb58 <prvAddNewTaskToReadyList+0xc8>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d109      	bne.n	800cac2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800caae:	4a2a      	ldr	r2, [pc, #168]	; (800cb58 <prvAddNewTaskToReadyList+0xc8>)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cab4:	4b27      	ldr	r3, [pc, #156]	; (800cb54 <prvAddNewTaskToReadyList+0xc4>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d110      	bne.n	800cade <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cabc:	f000 fc26 	bl	800d30c <prvInitialiseTaskLists>
 800cac0:	e00d      	b.n	800cade <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cac2:	4b26      	ldr	r3, [pc, #152]	; (800cb5c <prvAddNewTaskToReadyList+0xcc>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d109      	bne.n	800cade <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800caca:	4b23      	ldr	r3, [pc, #140]	; (800cb58 <prvAddNewTaskToReadyList+0xc8>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d802      	bhi.n	800cade <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cad8:	4a1f      	ldr	r2, [pc, #124]	; (800cb58 <prvAddNewTaskToReadyList+0xc8>)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cade:	4b20      	ldr	r3, [pc, #128]	; (800cb60 <prvAddNewTaskToReadyList+0xd0>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	3301      	adds	r3, #1
 800cae4:	4a1e      	ldr	r2, [pc, #120]	; (800cb60 <prvAddNewTaskToReadyList+0xd0>)
 800cae6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cae8:	4b1d      	ldr	r3, [pc, #116]	; (800cb60 <prvAddNewTaskToReadyList+0xd0>)
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf4:	4b1b      	ldr	r3, [pc, #108]	; (800cb64 <prvAddNewTaskToReadyList+0xd4>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d903      	bls.n	800cb04 <prvAddNewTaskToReadyList+0x74>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb00:	4a18      	ldr	r2, [pc, #96]	; (800cb64 <prvAddNewTaskToReadyList+0xd4>)
 800cb02:	6013      	str	r3, [r2, #0]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb08:	4613      	mov	r3, r2
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	4413      	add	r3, r2
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	4a15      	ldr	r2, [pc, #84]	; (800cb68 <prvAddNewTaskToReadyList+0xd8>)
 800cb12:	441a      	add	r2, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	3304      	adds	r3, #4
 800cb18:	4619      	mov	r1, r3
 800cb1a:	4610      	mov	r0, r2
 800cb1c:	f7fe feaf 	bl	800b87e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cb20:	f7ff f890 	bl	800bc44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb24:	4b0d      	ldr	r3, [pc, #52]	; (800cb5c <prvAddNewTaskToReadyList+0xcc>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d00e      	beq.n	800cb4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cb2c:	4b0a      	ldr	r3, [pc, #40]	; (800cb58 <prvAddNewTaskToReadyList+0xc8>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d207      	bcs.n	800cb4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cb3a:	4b0c      	ldr	r3, [pc, #48]	; (800cb6c <prvAddNewTaskToReadyList+0xdc>)
 800cb3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb40:	601a      	str	r2, [r3, #0]
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb4a:	bf00      	nop
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	240050bc 	.word	0x240050bc
 800cb58:	24004be8 	.word	0x24004be8
 800cb5c:	240050c8 	.word	0x240050c8
 800cb60:	240050d8 	.word	0x240050d8
 800cb64:	240050c4 	.word	0x240050c4
 800cb68:	24004bec 	.word	0x24004bec
 800cb6c:	e000ed04 	.word	0xe000ed04

0800cb70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d017      	beq.n	800cbb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cb82:	4b13      	ldr	r3, [pc, #76]	; (800cbd0 <vTaskDelay+0x60>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00a      	beq.n	800cba0 <vTaskDelay+0x30>
	__asm volatile
 800cb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	60bb      	str	r3, [r7, #8]
}
 800cb9c:	bf00      	nop
 800cb9e:	e7fe      	b.n	800cb9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cba0:	f000 f88a 	bl	800ccb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cba4:	2100      	movs	r1, #0
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 fcfe 	bl	800d5a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cbac:	f000 f892 	bl	800ccd4 <xTaskResumeAll>
 800cbb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d107      	bne.n	800cbc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cbb8:	4b06      	ldr	r3, [pc, #24]	; (800cbd4 <vTaskDelay+0x64>)
 800cbba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbbe:	601a      	str	r2, [r3, #0]
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cbc8:	bf00      	nop
 800cbca:	3710      	adds	r7, #16
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	240050e4 	.word	0x240050e4
 800cbd4:	e000ed04 	.word	0xe000ed04

0800cbd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b08a      	sub	sp, #40	; 0x28
 800cbdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cbe6:	463a      	mov	r2, r7
 800cbe8:	1d39      	adds	r1, r7, #4
 800cbea:	f107 0308 	add.w	r3, r7, #8
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7fe fbfa 	bl	800b3e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cbf4:	6839      	ldr	r1, [r7, #0]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	68ba      	ldr	r2, [r7, #8]
 800cbfa:	9202      	str	r2, [sp, #8]
 800cbfc:	9301      	str	r3, [sp, #4]
 800cbfe:	2300      	movs	r3, #0
 800cc00:	9300      	str	r3, [sp, #0]
 800cc02:	2300      	movs	r3, #0
 800cc04:	460a      	mov	r2, r1
 800cc06:	4924      	ldr	r1, [pc, #144]	; (800cc98 <vTaskStartScheduler+0xc0>)
 800cc08:	4824      	ldr	r0, [pc, #144]	; (800cc9c <vTaskStartScheduler+0xc4>)
 800cc0a:	f7ff fdf9 	bl	800c800 <xTaskCreateStatic>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	4a23      	ldr	r2, [pc, #140]	; (800cca0 <vTaskStartScheduler+0xc8>)
 800cc12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cc14:	4b22      	ldr	r3, [pc, #136]	; (800cca0 <vTaskStartScheduler+0xc8>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d002      	beq.n	800cc22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	617b      	str	r3, [r7, #20]
 800cc20:	e001      	b.n	800cc26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc22:	2300      	movs	r3, #0
 800cc24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d102      	bne.n	800cc32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cc2c:	f000 fd10 	bl	800d650 <xTimerCreateTimerTask>
 800cc30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d11b      	bne.n	800cc70 <vTaskStartScheduler+0x98>
	__asm volatile
 800cc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3c:	f383 8811 	msr	BASEPRI, r3
 800cc40:	f3bf 8f6f 	isb	sy
 800cc44:	f3bf 8f4f 	dsb	sy
 800cc48:	613b      	str	r3, [r7, #16]
}
 800cc4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cc4c:	4b15      	ldr	r3, [pc, #84]	; (800cca4 <vTaskStartScheduler+0xcc>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	3354      	adds	r3, #84	; 0x54
 800cc52:	4a15      	ldr	r2, [pc, #84]	; (800cca8 <vTaskStartScheduler+0xd0>)
 800cc54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cc56:	4b15      	ldr	r3, [pc, #84]	; (800ccac <vTaskStartScheduler+0xd4>)
 800cc58:	f04f 32ff 	mov.w	r2, #4294967295
 800cc5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cc5e:	4b14      	ldr	r3, [pc, #80]	; (800ccb0 <vTaskStartScheduler+0xd8>)
 800cc60:	2201      	movs	r2, #1
 800cc62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cc64:	4b13      	ldr	r3, [pc, #76]	; (800ccb4 <vTaskStartScheduler+0xdc>)
 800cc66:	2200      	movs	r2, #0
 800cc68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cc6a:	f7fe ff19 	bl	800baa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cc6e:	e00e      	b.n	800cc8e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc76:	d10a      	bne.n	800cc8e <vTaskStartScheduler+0xb6>
	__asm volatile
 800cc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7c:	f383 8811 	msr	BASEPRI, r3
 800cc80:	f3bf 8f6f 	isb	sy
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	60fb      	str	r3, [r7, #12]
}
 800cc8a:	bf00      	nop
 800cc8c:	e7fe      	b.n	800cc8c <vTaskStartScheduler+0xb4>
}
 800cc8e:	bf00      	nop
 800cc90:	3718      	adds	r7, #24
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	08012314 	.word	0x08012314
 800cc9c:	0800d2dd 	.word	0x0800d2dd
 800cca0:	240050e0 	.word	0x240050e0
 800cca4:	24004be8 	.word	0x24004be8
 800cca8:	24000014 	.word	0x24000014
 800ccac:	240050dc 	.word	0x240050dc
 800ccb0:	240050c8 	.word	0x240050c8
 800ccb4:	240050c0 	.word	0x240050c0

0800ccb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ccb8:	b480      	push	{r7}
 800ccba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ccbc:	4b04      	ldr	r3, [pc, #16]	; (800ccd0 <vTaskSuspendAll+0x18>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	4a03      	ldr	r2, [pc, #12]	; (800ccd0 <vTaskSuspendAll+0x18>)
 800ccc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ccc6:	bf00      	nop
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr
 800ccd0:	240050e4 	.word	0x240050e4

0800ccd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ccde:	2300      	movs	r3, #0
 800cce0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cce2:	4b42      	ldr	r3, [pc, #264]	; (800cdec <xTaskResumeAll+0x118>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d10a      	bne.n	800cd00 <xTaskResumeAll+0x2c>
	__asm volatile
 800ccea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccee:	f383 8811 	msr	BASEPRI, r3
 800ccf2:	f3bf 8f6f 	isb	sy
 800ccf6:	f3bf 8f4f 	dsb	sy
 800ccfa:	603b      	str	r3, [r7, #0]
}
 800ccfc:	bf00      	nop
 800ccfe:	e7fe      	b.n	800ccfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd00:	f7fe ff70 	bl	800bbe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cd04:	4b39      	ldr	r3, [pc, #228]	; (800cdec <xTaskResumeAll+0x118>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	4a38      	ldr	r2, [pc, #224]	; (800cdec <xTaskResumeAll+0x118>)
 800cd0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd0e:	4b37      	ldr	r3, [pc, #220]	; (800cdec <xTaskResumeAll+0x118>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d162      	bne.n	800cddc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cd16:	4b36      	ldr	r3, [pc, #216]	; (800cdf0 <xTaskResumeAll+0x11c>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d05e      	beq.n	800cddc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd1e:	e02f      	b.n	800cd80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd20:	4b34      	ldr	r3, [pc, #208]	; (800cdf4 <xTaskResumeAll+0x120>)
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	3318      	adds	r3, #24
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fe fe03 	bl	800b938 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	3304      	adds	r3, #4
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fe fdfe 	bl	800b938 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd40:	4b2d      	ldr	r3, [pc, #180]	; (800cdf8 <xTaskResumeAll+0x124>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d903      	bls.n	800cd50 <xTaskResumeAll+0x7c>
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4c:	4a2a      	ldr	r2, [pc, #168]	; (800cdf8 <xTaskResumeAll+0x124>)
 800cd4e:	6013      	str	r3, [r2, #0]
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd54:	4613      	mov	r3, r2
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	4413      	add	r3, r2
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	4a27      	ldr	r2, [pc, #156]	; (800cdfc <xTaskResumeAll+0x128>)
 800cd5e:	441a      	add	r2, r3
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	3304      	adds	r3, #4
 800cd64:	4619      	mov	r1, r3
 800cd66:	4610      	mov	r0, r2
 800cd68:	f7fe fd89 	bl	800b87e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd70:	4b23      	ldr	r3, [pc, #140]	; (800ce00 <xTaskResumeAll+0x12c>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d302      	bcc.n	800cd80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cd7a:	4b22      	ldr	r3, [pc, #136]	; (800ce04 <xTaskResumeAll+0x130>)
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd80:	4b1c      	ldr	r3, [pc, #112]	; (800cdf4 <xTaskResumeAll+0x120>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d1cb      	bne.n	800cd20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d001      	beq.n	800cd92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cd8e:	f000 fb5f 	bl	800d450 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cd92:	4b1d      	ldr	r3, [pc, #116]	; (800ce08 <xTaskResumeAll+0x134>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d010      	beq.n	800cdc0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cd9e:	f000 f847 	bl	800ce30 <xTaskIncrementTick>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d002      	beq.n	800cdae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cda8:	4b16      	ldr	r3, [pc, #88]	; (800ce04 <xTaskResumeAll+0x130>)
 800cdaa:	2201      	movs	r2, #1
 800cdac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d1f1      	bne.n	800cd9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cdba:	4b13      	ldr	r3, [pc, #76]	; (800ce08 <xTaskResumeAll+0x134>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cdc0:	4b10      	ldr	r3, [pc, #64]	; (800ce04 <xTaskResumeAll+0x130>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d009      	beq.n	800cddc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cdcc:	4b0f      	ldr	r3, [pc, #60]	; (800ce0c <xTaskResumeAll+0x138>)
 800cdce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdd2:	601a      	str	r2, [r3, #0]
 800cdd4:	f3bf 8f4f 	dsb	sy
 800cdd8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cddc:	f7fe ff32 	bl	800bc44 <vPortExitCritical>

	return xAlreadyYielded;
 800cde0:	68bb      	ldr	r3, [r7, #8]
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	240050e4 	.word	0x240050e4
 800cdf0:	240050bc 	.word	0x240050bc
 800cdf4:	2400507c 	.word	0x2400507c
 800cdf8:	240050c4 	.word	0x240050c4
 800cdfc:	24004bec 	.word	0x24004bec
 800ce00:	24004be8 	.word	0x24004be8
 800ce04:	240050d0 	.word	0x240050d0
 800ce08:	240050cc 	.word	0x240050cc
 800ce0c:	e000ed04 	.word	0xe000ed04

0800ce10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ce16:	4b05      	ldr	r3, [pc, #20]	; (800ce2c <xTaskGetTickCount+0x1c>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ce1c:	687b      	ldr	r3, [r7, #4]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	370c      	adds	r7, #12
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	240050c0 	.word	0x240050c0

0800ce30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b086      	sub	sp, #24
 800ce34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce36:	2300      	movs	r3, #0
 800ce38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce3a:	4b4f      	ldr	r3, [pc, #316]	; (800cf78 <xTaskIncrementTick+0x148>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f040 808f 	bne.w	800cf62 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ce44:	4b4d      	ldr	r3, [pc, #308]	; (800cf7c <xTaskIncrementTick+0x14c>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ce4c:	4a4b      	ldr	r2, [pc, #300]	; (800cf7c <xTaskIncrementTick+0x14c>)
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d120      	bne.n	800ce9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ce58:	4b49      	ldr	r3, [pc, #292]	; (800cf80 <xTaskIncrementTick+0x150>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00a      	beq.n	800ce78 <xTaskIncrementTick+0x48>
	__asm volatile
 800ce62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce66:	f383 8811 	msr	BASEPRI, r3
 800ce6a:	f3bf 8f6f 	isb	sy
 800ce6e:	f3bf 8f4f 	dsb	sy
 800ce72:	603b      	str	r3, [r7, #0]
}
 800ce74:	bf00      	nop
 800ce76:	e7fe      	b.n	800ce76 <xTaskIncrementTick+0x46>
 800ce78:	4b41      	ldr	r3, [pc, #260]	; (800cf80 <xTaskIncrementTick+0x150>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	60fb      	str	r3, [r7, #12]
 800ce7e:	4b41      	ldr	r3, [pc, #260]	; (800cf84 <xTaskIncrementTick+0x154>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a3f      	ldr	r2, [pc, #252]	; (800cf80 <xTaskIncrementTick+0x150>)
 800ce84:	6013      	str	r3, [r2, #0]
 800ce86:	4a3f      	ldr	r2, [pc, #252]	; (800cf84 <xTaskIncrementTick+0x154>)
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	6013      	str	r3, [r2, #0]
 800ce8c:	4b3e      	ldr	r3, [pc, #248]	; (800cf88 <xTaskIncrementTick+0x158>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	3301      	adds	r3, #1
 800ce92:	4a3d      	ldr	r2, [pc, #244]	; (800cf88 <xTaskIncrementTick+0x158>)
 800ce94:	6013      	str	r3, [r2, #0]
 800ce96:	f000 fadb 	bl	800d450 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ce9a:	4b3c      	ldr	r3, [pc, #240]	; (800cf8c <xTaskIncrementTick+0x15c>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	693a      	ldr	r2, [r7, #16]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d349      	bcc.n	800cf38 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cea4:	4b36      	ldr	r3, [pc, #216]	; (800cf80 <xTaskIncrementTick+0x150>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d104      	bne.n	800ceb8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceae:	4b37      	ldr	r3, [pc, #220]	; (800cf8c <xTaskIncrementTick+0x15c>)
 800ceb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb4:	601a      	str	r2, [r3, #0]
					break;
 800ceb6:	e03f      	b.n	800cf38 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceb8:	4b31      	ldr	r3, [pc, #196]	; (800cf80 <xTaskIncrementTick+0x150>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	68db      	ldr	r3, [r3, #12]
 800cec0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cec8:	693a      	ldr	r2, [r7, #16]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d203      	bcs.n	800ced8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ced0:	4a2e      	ldr	r2, [pc, #184]	; (800cf8c <xTaskIncrementTick+0x15c>)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ced6:	e02f      	b.n	800cf38 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	3304      	adds	r3, #4
 800cedc:	4618      	mov	r0, r3
 800cede:	f7fe fd2b 	bl	800b938 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d004      	beq.n	800cef4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	3318      	adds	r3, #24
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7fe fd22 	bl	800b938 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef8:	4b25      	ldr	r3, [pc, #148]	; (800cf90 <xTaskIncrementTick+0x160>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d903      	bls.n	800cf08 <xTaskIncrementTick+0xd8>
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf04:	4a22      	ldr	r2, [pc, #136]	; (800cf90 <xTaskIncrementTick+0x160>)
 800cf06:	6013      	str	r3, [r2, #0]
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	4413      	add	r3, r2
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	4a1f      	ldr	r2, [pc, #124]	; (800cf94 <xTaskIncrementTick+0x164>)
 800cf16:	441a      	add	r2, r3
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	3304      	adds	r3, #4
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	4610      	mov	r0, r2
 800cf20:	f7fe fcad 	bl	800b87e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf28:	4b1b      	ldr	r3, [pc, #108]	; (800cf98 <xTaskIncrementTick+0x168>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d3b8      	bcc.n	800cea4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cf32:	2301      	movs	r3, #1
 800cf34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf36:	e7b5      	b.n	800cea4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cf38:	4b17      	ldr	r3, [pc, #92]	; (800cf98 <xTaskIncrementTick+0x168>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf3e:	4915      	ldr	r1, [pc, #84]	; (800cf94 <xTaskIncrementTick+0x164>)
 800cf40:	4613      	mov	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	440b      	add	r3, r1
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d901      	bls.n	800cf54 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cf50:	2301      	movs	r3, #1
 800cf52:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cf54:	4b11      	ldr	r3, [pc, #68]	; (800cf9c <xTaskIncrementTick+0x16c>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d007      	beq.n	800cf6c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	617b      	str	r3, [r7, #20]
 800cf60:	e004      	b.n	800cf6c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cf62:	4b0f      	ldr	r3, [pc, #60]	; (800cfa0 <xTaskIncrementTick+0x170>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	3301      	adds	r3, #1
 800cf68:	4a0d      	ldr	r2, [pc, #52]	; (800cfa0 <xTaskIncrementTick+0x170>)
 800cf6a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cf6c:	697b      	ldr	r3, [r7, #20]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3718      	adds	r7, #24
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	240050e4 	.word	0x240050e4
 800cf7c:	240050c0 	.word	0x240050c0
 800cf80:	24005074 	.word	0x24005074
 800cf84:	24005078 	.word	0x24005078
 800cf88:	240050d4 	.word	0x240050d4
 800cf8c:	240050dc 	.word	0x240050dc
 800cf90:	240050c4 	.word	0x240050c4
 800cf94:	24004bec 	.word	0x24004bec
 800cf98:	24004be8 	.word	0x24004be8
 800cf9c:	240050d0 	.word	0x240050d0
 800cfa0:	240050cc 	.word	0x240050cc

0800cfa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cfaa:	4b2a      	ldr	r3, [pc, #168]	; (800d054 <vTaskSwitchContext+0xb0>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d003      	beq.n	800cfba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cfb2:	4b29      	ldr	r3, [pc, #164]	; (800d058 <vTaskSwitchContext+0xb4>)
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cfb8:	e046      	b.n	800d048 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cfba:	4b27      	ldr	r3, [pc, #156]	; (800d058 <vTaskSwitchContext+0xb4>)
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfc0:	4b26      	ldr	r3, [pc, #152]	; (800d05c <vTaskSwitchContext+0xb8>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	60fb      	str	r3, [r7, #12]
 800cfc6:	e010      	b.n	800cfea <vTaskSwitchContext+0x46>
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d10a      	bne.n	800cfe4 <vTaskSwitchContext+0x40>
	__asm volatile
 800cfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd2:	f383 8811 	msr	BASEPRI, r3
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	607b      	str	r3, [r7, #4]
}
 800cfe0:	bf00      	nop
 800cfe2:	e7fe      	b.n	800cfe2 <vTaskSwitchContext+0x3e>
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	3b01      	subs	r3, #1
 800cfe8:	60fb      	str	r3, [r7, #12]
 800cfea:	491d      	ldr	r1, [pc, #116]	; (800d060 <vTaskSwitchContext+0xbc>)
 800cfec:	68fa      	ldr	r2, [r7, #12]
 800cfee:	4613      	mov	r3, r2
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	4413      	add	r3, r2
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	440b      	add	r3, r1
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d0e4      	beq.n	800cfc8 <vTaskSwitchContext+0x24>
 800cffe:	68fa      	ldr	r2, [r7, #12]
 800d000:	4613      	mov	r3, r2
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	4413      	add	r3, r2
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	4a15      	ldr	r2, [pc, #84]	; (800d060 <vTaskSwitchContext+0xbc>)
 800d00a:	4413      	add	r3, r2
 800d00c:	60bb      	str	r3, [r7, #8]
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	685a      	ldr	r2, [r3, #4]
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	605a      	str	r2, [r3, #4]
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	685a      	ldr	r2, [r3, #4]
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	3308      	adds	r3, #8
 800d020:	429a      	cmp	r2, r3
 800d022:	d104      	bne.n	800d02e <vTaskSwitchContext+0x8a>
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	685a      	ldr	r2, [r3, #4]
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	605a      	str	r2, [r3, #4]
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	4a0b      	ldr	r2, [pc, #44]	; (800d064 <vTaskSwitchContext+0xc0>)
 800d036:	6013      	str	r3, [r2, #0]
 800d038:	4a08      	ldr	r2, [pc, #32]	; (800d05c <vTaskSwitchContext+0xb8>)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d03e:	4b09      	ldr	r3, [pc, #36]	; (800d064 <vTaskSwitchContext+0xc0>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	3354      	adds	r3, #84	; 0x54
 800d044:	4a08      	ldr	r2, [pc, #32]	; (800d068 <vTaskSwitchContext+0xc4>)
 800d046:	6013      	str	r3, [r2, #0]
}
 800d048:	bf00      	nop
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr
 800d054:	240050e4 	.word	0x240050e4
 800d058:	240050d0 	.word	0x240050d0
 800d05c:	240050c4 	.word	0x240050c4
 800d060:	24004bec 	.word	0x24004bec
 800d064:	24004be8 	.word	0x24004be8
 800d068:	24000014 	.word	0x24000014

0800d06c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d10a      	bne.n	800d092 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d080:	f383 8811 	msr	BASEPRI, r3
 800d084:	f3bf 8f6f 	isb	sy
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	60fb      	str	r3, [r7, #12]
}
 800d08e:	bf00      	nop
 800d090:	e7fe      	b.n	800d090 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d092:	4b07      	ldr	r3, [pc, #28]	; (800d0b0 <vTaskPlaceOnEventList+0x44>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	3318      	adds	r3, #24
 800d098:	4619      	mov	r1, r3
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f7fe fc13 	bl	800b8c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d0a0:	2101      	movs	r1, #1
 800d0a2:	6838      	ldr	r0, [r7, #0]
 800d0a4:	f000 fa80 	bl	800d5a8 <prvAddCurrentTaskToDelayedList>
}
 800d0a8:	bf00      	nop
 800d0aa:	3710      	adds	r7, #16
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	24004be8 	.word	0x24004be8

0800d0b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b086      	sub	sp, #24
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	60f8      	str	r0, [r7, #12]
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d10a      	bne.n	800d0dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ca:	f383 8811 	msr	BASEPRI, r3
 800d0ce:	f3bf 8f6f 	isb	sy
 800d0d2:	f3bf 8f4f 	dsb	sy
 800d0d6:	617b      	str	r3, [r7, #20]
}
 800d0d8:	bf00      	nop
 800d0da:	e7fe      	b.n	800d0da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0dc:	4b0a      	ldr	r3, [pc, #40]	; (800d108 <vTaskPlaceOnEventListRestricted+0x54>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	3318      	adds	r3, #24
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	68f8      	ldr	r0, [r7, #12]
 800d0e6:	f7fe fbca 	bl	800b87e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d002      	beq.n	800d0f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d0f6:	6879      	ldr	r1, [r7, #4]
 800d0f8:	68b8      	ldr	r0, [r7, #8]
 800d0fa:	f000 fa55 	bl	800d5a8 <prvAddCurrentTaskToDelayedList>
	}
 800d0fe:	bf00      	nop
 800d100:	3718      	adds	r7, #24
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	24004be8 	.word	0x24004be8

0800d10c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b086      	sub	sp, #24
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d10a      	bne.n	800d138 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d126:	f383 8811 	msr	BASEPRI, r3
 800d12a:	f3bf 8f6f 	isb	sy
 800d12e:	f3bf 8f4f 	dsb	sy
 800d132:	60fb      	str	r3, [r7, #12]
}
 800d134:	bf00      	nop
 800d136:	e7fe      	b.n	800d136 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	3318      	adds	r3, #24
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7fe fbfb 	bl	800b938 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d142:	4b1e      	ldr	r3, [pc, #120]	; (800d1bc <xTaskRemoveFromEventList+0xb0>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d11d      	bne.n	800d186 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	3304      	adds	r3, #4
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fe fbf2 	bl	800b938 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d158:	4b19      	ldr	r3, [pc, #100]	; (800d1c0 <xTaskRemoveFromEventList+0xb4>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d903      	bls.n	800d168 <xTaskRemoveFromEventList+0x5c>
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d164:	4a16      	ldr	r2, [pc, #88]	; (800d1c0 <xTaskRemoveFromEventList+0xb4>)
 800d166:	6013      	str	r3, [r2, #0]
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d16c:	4613      	mov	r3, r2
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	4413      	add	r3, r2
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	4a13      	ldr	r2, [pc, #76]	; (800d1c4 <xTaskRemoveFromEventList+0xb8>)
 800d176:	441a      	add	r2, r3
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	3304      	adds	r3, #4
 800d17c:	4619      	mov	r1, r3
 800d17e:	4610      	mov	r0, r2
 800d180:	f7fe fb7d 	bl	800b87e <vListInsertEnd>
 800d184:	e005      	b.n	800d192 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	3318      	adds	r3, #24
 800d18a:	4619      	mov	r1, r3
 800d18c:	480e      	ldr	r0, [pc, #56]	; (800d1c8 <xTaskRemoveFromEventList+0xbc>)
 800d18e:	f7fe fb76 	bl	800b87e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d196:	4b0d      	ldr	r3, [pc, #52]	; (800d1cc <xTaskRemoveFromEventList+0xc0>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d905      	bls.n	800d1ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d1a4:	4b0a      	ldr	r3, [pc, #40]	; (800d1d0 <xTaskRemoveFromEventList+0xc4>)
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	601a      	str	r2, [r3, #0]
 800d1aa:	e001      	b.n	800d1b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d1b0:	697b      	ldr	r3, [r7, #20]
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3718      	adds	r7, #24
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	240050e4 	.word	0x240050e4
 800d1c0:	240050c4 	.word	0x240050c4
 800d1c4:	24004bec 	.word	0x24004bec
 800d1c8:	2400507c 	.word	0x2400507c
 800d1cc:	24004be8 	.word	0x24004be8
 800d1d0:	240050d0 	.word	0x240050d0

0800d1d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d1dc:	4b06      	ldr	r3, [pc, #24]	; (800d1f8 <vTaskInternalSetTimeOutState+0x24>)
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d1e4:	4b05      	ldr	r3, [pc, #20]	; (800d1fc <vTaskInternalSetTimeOutState+0x28>)
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	605a      	str	r2, [r3, #4]
}
 800d1ec:	bf00      	nop
 800d1ee:	370c      	adds	r7, #12
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr
 800d1f8:	240050d4 	.word	0x240050d4
 800d1fc:	240050c0 	.word	0x240050c0

0800d200 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b088      	sub	sp, #32
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d10a      	bne.n	800d226 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d214:	f383 8811 	msr	BASEPRI, r3
 800d218:	f3bf 8f6f 	isb	sy
 800d21c:	f3bf 8f4f 	dsb	sy
 800d220:	613b      	str	r3, [r7, #16]
}
 800d222:	bf00      	nop
 800d224:	e7fe      	b.n	800d224 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d10a      	bne.n	800d242 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d230:	f383 8811 	msr	BASEPRI, r3
 800d234:	f3bf 8f6f 	isb	sy
 800d238:	f3bf 8f4f 	dsb	sy
 800d23c:	60fb      	str	r3, [r7, #12]
}
 800d23e:	bf00      	nop
 800d240:	e7fe      	b.n	800d240 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d242:	f7fe fccf 	bl	800bbe4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d246:	4b1d      	ldr	r3, [pc, #116]	; (800d2bc <xTaskCheckForTimeOut+0xbc>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	69ba      	ldr	r2, [r7, #24]
 800d252:	1ad3      	subs	r3, r2, r3
 800d254:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d25e:	d102      	bne.n	800d266 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d260:	2300      	movs	r3, #0
 800d262:	61fb      	str	r3, [r7, #28]
 800d264:	e023      	b.n	800d2ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681a      	ldr	r2, [r3, #0]
 800d26a:	4b15      	ldr	r3, [pc, #84]	; (800d2c0 <xTaskCheckForTimeOut+0xc0>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d007      	beq.n	800d282 <xTaskCheckForTimeOut+0x82>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	69ba      	ldr	r2, [r7, #24]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d302      	bcc.n	800d282 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d27c:	2301      	movs	r3, #1
 800d27e:	61fb      	str	r3, [r7, #28]
 800d280:	e015      	b.n	800d2ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	697a      	ldr	r2, [r7, #20]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d20b      	bcs.n	800d2a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	1ad2      	subs	r2, r2, r3
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7ff ff9b 	bl	800d1d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	61fb      	str	r3, [r7, #28]
 800d2a2:	e004      	b.n	800d2ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d2ae:	f7fe fcc9 	bl	800bc44 <vPortExitCritical>

	return xReturn;
 800d2b2:	69fb      	ldr	r3, [r7, #28]
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3720      	adds	r7, #32
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	240050c0 	.word	0x240050c0
 800d2c0:	240050d4 	.word	0x240050d4

0800d2c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d2c8:	4b03      	ldr	r3, [pc, #12]	; (800d2d8 <vTaskMissedYield+0x14>)
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	601a      	str	r2, [r3, #0]
}
 800d2ce:	bf00      	nop
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr
 800d2d8:	240050d0 	.word	0x240050d0

0800d2dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d2e4:	f000 f852 	bl	800d38c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d2e8:	4b06      	ldr	r3, [pc, #24]	; (800d304 <prvIdleTask+0x28>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d9f9      	bls.n	800d2e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d2f0:	4b05      	ldr	r3, [pc, #20]	; (800d308 <prvIdleTask+0x2c>)
 800d2f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2f6:	601a      	str	r2, [r3, #0]
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d300:	e7f0      	b.n	800d2e4 <prvIdleTask+0x8>
 800d302:	bf00      	nop
 800d304:	24004bec 	.word	0x24004bec
 800d308:	e000ed04 	.word	0xe000ed04

0800d30c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d312:	2300      	movs	r3, #0
 800d314:	607b      	str	r3, [r7, #4]
 800d316:	e00c      	b.n	800d332 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	4613      	mov	r3, r2
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	4413      	add	r3, r2
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	4a12      	ldr	r2, [pc, #72]	; (800d36c <prvInitialiseTaskLists+0x60>)
 800d324:	4413      	add	r3, r2
 800d326:	4618      	mov	r0, r3
 800d328:	f7fe fa7c 	bl	800b824 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	3301      	adds	r3, #1
 800d330:	607b      	str	r3, [r7, #4]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2b37      	cmp	r3, #55	; 0x37
 800d336:	d9ef      	bls.n	800d318 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d338:	480d      	ldr	r0, [pc, #52]	; (800d370 <prvInitialiseTaskLists+0x64>)
 800d33a:	f7fe fa73 	bl	800b824 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d33e:	480d      	ldr	r0, [pc, #52]	; (800d374 <prvInitialiseTaskLists+0x68>)
 800d340:	f7fe fa70 	bl	800b824 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d344:	480c      	ldr	r0, [pc, #48]	; (800d378 <prvInitialiseTaskLists+0x6c>)
 800d346:	f7fe fa6d 	bl	800b824 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d34a:	480c      	ldr	r0, [pc, #48]	; (800d37c <prvInitialiseTaskLists+0x70>)
 800d34c:	f7fe fa6a 	bl	800b824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d350:	480b      	ldr	r0, [pc, #44]	; (800d380 <prvInitialiseTaskLists+0x74>)
 800d352:	f7fe fa67 	bl	800b824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d356:	4b0b      	ldr	r3, [pc, #44]	; (800d384 <prvInitialiseTaskLists+0x78>)
 800d358:	4a05      	ldr	r2, [pc, #20]	; (800d370 <prvInitialiseTaskLists+0x64>)
 800d35a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d35c:	4b0a      	ldr	r3, [pc, #40]	; (800d388 <prvInitialiseTaskLists+0x7c>)
 800d35e:	4a05      	ldr	r2, [pc, #20]	; (800d374 <prvInitialiseTaskLists+0x68>)
 800d360:	601a      	str	r2, [r3, #0]
}
 800d362:	bf00      	nop
 800d364:	3708      	adds	r7, #8
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	24004bec 	.word	0x24004bec
 800d370:	2400504c 	.word	0x2400504c
 800d374:	24005060 	.word	0x24005060
 800d378:	2400507c 	.word	0x2400507c
 800d37c:	24005090 	.word	0x24005090
 800d380:	240050a8 	.word	0x240050a8
 800d384:	24005074 	.word	0x24005074
 800d388:	24005078 	.word	0x24005078

0800d38c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d392:	e019      	b.n	800d3c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d394:	f7fe fc26 	bl	800bbe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d398:	4b10      	ldr	r3, [pc, #64]	; (800d3dc <prvCheckTasksWaitingTermination+0x50>)
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	3304      	adds	r3, #4
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fe fac7 	bl	800b938 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d3aa:	4b0d      	ldr	r3, [pc, #52]	; (800d3e0 <prvCheckTasksWaitingTermination+0x54>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	3b01      	subs	r3, #1
 800d3b0:	4a0b      	ldr	r2, [pc, #44]	; (800d3e0 <prvCheckTasksWaitingTermination+0x54>)
 800d3b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d3b4:	4b0b      	ldr	r3, [pc, #44]	; (800d3e4 <prvCheckTasksWaitingTermination+0x58>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	3b01      	subs	r3, #1
 800d3ba:	4a0a      	ldr	r2, [pc, #40]	; (800d3e4 <prvCheckTasksWaitingTermination+0x58>)
 800d3bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d3be:	f7fe fc41 	bl	800bc44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 f810 	bl	800d3e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3c8:	4b06      	ldr	r3, [pc, #24]	; (800d3e4 <prvCheckTasksWaitingTermination+0x58>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1e1      	bne.n	800d394 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d3d0:	bf00      	nop
 800d3d2:	bf00      	nop
 800d3d4:	3708      	adds	r7, #8
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	24005090 	.word	0x24005090
 800d3e0:	240050bc 	.word	0x240050bc
 800d3e4:	240050a4 	.word	0x240050a4

0800d3e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	3354      	adds	r3, #84	; 0x54
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f001 fbbf 	bl	800eb78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d400:	2b00      	cmp	r3, #0
 800d402:	d108      	bne.n	800d416 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d408:	4618      	mov	r0, r3
 800d40a:	f7fe f8ed 	bl	800b5e8 <vPortFree>
				vPortFree( pxTCB );
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f7fe f8ea 	bl	800b5e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d414:	e018      	b.n	800d448 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d103      	bne.n	800d428 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f7fe f8e1 	bl	800b5e8 <vPortFree>
	}
 800d426:	e00f      	b.n	800d448 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d42e:	2b02      	cmp	r3, #2
 800d430:	d00a      	beq.n	800d448 <prvDeleteTCB+0x60>
	__asm volatile
 800d432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d436:	f383 8811 	msr	BASEPRI, r3
 800d43a:	f3bf 8f6f 	isb	sy
 800d43e:	f3bf 8f4f 	dsb	sy
 800d442:	60fb      	str	r3, [r7, #12]
}
 800d444:	bf00      	nop
 800d446:	e7fe      	b.n	800d446 <prvDeleteTCB+0x5e>
	}
 800d448:	bf00      	nop
 800d44a:	3710      	adds	r7, #16
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d456:	4b0c      	ldr	r3, [pc, #48]	; (800d488 <prvResetNextTaskUnblockTime+0x38>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d104      	bne.n	800d46a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d460:	4b0a      	ldr	r3, [pc, #40]	; (800d48c <prvResetNextTaskUnblockTime+0x3c>)
 800d462:	f04f 32ff 	mov.w	r2, #4294967295
 800d466:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d468:	e008      	b.n	800d47c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d46a:	4b07      	ldr	r3, [pc, #28]	; (800d488 <prvResetNextTaskUnblockTime+0x38>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	4a04      	ldr	r2, [pc, #16]	; (800d48c <prvResetNextTaskUnblockTime+0x3c>)
 800d47a:	6013      	str	r3, [r2, #0]
}
 800d47c:	bf00      	nop
 800d47e:	370c      	adds	r7, #12
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr
 800d488:	24005074 	.word	0x24005074
 800d48c:	240050dc 	.word	0x240050dc

0800d490 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d496:	4b0b      	ldr	r3, [pc, #44]	; (800d4c4 <xTaskGetSchedulerState+0x34>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d102      	bne.n	800d4a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	607b      	str	r3, [r7, #4]
 800d4a2:	e008      	b.n	800d4b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4a4:	4b08      	ldr	r3, [pc, #32]	; (800d4c8 <xTaskGetSchedulerState+0x38>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d102      	bne.n	800d4b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d4ac:	2302      	movs	r3, #2
 800d4ae:	607b      	str	r3, [r7, #4]
 800d4b0:	e001      	b.n	800d4b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d4b6:	687b      	ldr	r3, [r7, #4]
	}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr
 800d4c4:	240050c8 	.word	0x240050c8
 800d4c8:	240050e4 	.word	0x240050e4

0800d4cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b086      	sub	sp, #24
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d056      	beq.n	800d590 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d4e2:	4b2e      	ldr	r3, [pc, #184]	; (800d59c <xTaskPriorityDisinherit+0xd0>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	693a      	ldr	r2, [r7, #16]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d00a      	beq.n	800d502 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f0:	f383 8811 	msr	BASEPRI, r3
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	60fb      	str	r3, [r7, #12]
}
 800d4fe:	bf00      	nop
 800d500:	e7fe      	b.n	800d500 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d506:	2b00      	cmp	r3, #0
 800d508:	d10a      	bne.n	800d520 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50e:	f383 8811 	msr	BASEPRI, r3
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	60bb      	str	r3, [r7, #8]
}
 800d51c:	bf00      	nop
 800d51e:	e7fe      	b.n	800d51e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d524:	1e5a      	subs	r2, r3, #1
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d532:	429a      	cmp	r2, r3
 800d534:	d02c      	beq.n	800d590 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d128      	bne.n	800d590 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	3304      	adds	r3, #4
 800d542:	4618      	mov	r0, r3
 800d544:	f7fe f9f8 	bl	800b938 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d554:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d560:	4b0f      	ldr	r3, [pc, #60]	; (800d5a0 <xTaskPriorityDisinherit+0xd4>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	429a      	cmp	r2, r3
 800d566:	d903      	bls.n	800d570 <xTaskPriorityDisinherit+0xa4>
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56c:	4a0c      	ldr	r2, [pc, #48]	; (800d5a0 <xTaskPriorityDisinherit+0xd4>)
 800d56e:	6013      	str	r3, [r2, #0]
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d574:	4613      	mov	r3, r2
 800d576:	009b      	lsls	r3, r3, #2
 800d578:	4413      	add	r3, r2
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	4a09      	ldr	r2, [pc, #36]	; (800d5a4 <xTaskPriorityDisinherit+0xd8>)
 800d57e:	441a      	add	r2, r3
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	3304      	adds	r3, #4
 800d584:	4619      	mov	r1, r3
 800d586:	4610      	mov	r0, r2
 800d588:	f7fe f979 	bl	800b87e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d58c:	2301      	movs	r3, #1
 800d58e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d590:	697b      	ldr	r3, [r7, #20]
	}
 800d592:	4618      	mov	r0, r3
 800d594:	3718      	adds	r7, #24
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	24004be8 	.word	0x24004be8
 800d5a0:	240050c4 	.word	0x240050c4
 800d5a4:	24004bec 	.word	0x24004bec

0800d5a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d5b2:	4b21      	ldr	r3, [pc, #132]	; (800d638 <prvAddCurrentTaskToDelayedList+0x90>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5b8:	4b20      	ldr	r3, [pc, #128]	; (800d63c <prvAddCurrentTaskToDelayedList+0x94>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	3304      	adds	r3, #4
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fe f9ba 	bl	800b938 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ca:	d10a      	bne.n	800d5e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d007      	beq.n	800d5e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5d2:	4b1a      	ldr	r3, [pc, #104]	; (800d63c <prvAddCurrentTaskToDelayedList+0x94>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	3304      	adds	r3, #4
 800d5d8:	4619      	mov	r1, r3
 800d5da:	4819      	ldr	r0, [pc, #100]	; (800d640 <prvAddCurrentTaskToDelayedList+0x98>)
 800d5dc:	f7fe f94f 	bl	800b87e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d5e0:	e026      	b.n	800d630 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d5ea:	4b14      	ldr	r3, [pc, #80]	; (800d63c <prvAddCurrentTaskToDelayedList+0x94>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	68ba      	ldr	r2, [r7, #8]
 800d5f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5f2:	68ba      	ldr	r2, [r7, #8]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d209      	bcs.n	800d60e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5fa:	4b12      	ldr	r3, [pc, #72]	; (800d644 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	4b0f      	ldr	r3, [pc, #60]	; (800d63c <prvAddCurrentTaskToDelayedList+0x94>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	3304      	adds	r3, #4
 800d604:	4619      	mov	r1, r3
 800d606:	4610      	mov	r0, r2
 800d608:	f7fe f95d 	bl	800b8c6 <vListInsert>
}
 800d60c:	e010      	b.n	800d630 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d60e:	4b0e      	ldr	r3, [pc, #56]	; (800d648 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	4b0a      	ldr	r3, [pc, #40]	; (800d63c <prvAddCurrentTaskToDelayedList+0x94>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	3304      	adds	r3, #4
 800d618:	4619      	mov	r1, r3
 800d61a:	4610      	mov	r0, r2
 800d61c:	f7fe f953 	bl	800b8c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d620:	4b0a      	ldr	r3, [pc, #40]	; (800d64c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	68ba      	ldr	r2, [r7, #8]
 800d626:	429a      	cmp	r2, r3
 800d628:	d202      	bcs.n	800d630 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d62a:	4a08      	ldr	r2, [pc, #32]	; (800d64c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	6013      	str	r3, [r2, #0]
}
 800d630:	bf00      	nop
 800d632:	3710      	adds	r7, #16
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	240050c0 	.word	0x240050c0
 800d63c:	24004be8 	.word	0x24004be8
 800d640:	240050a8 	.word	0x240050a8
 800d644:	24005078 	.word	0x24005078
 800d648:	24005074 	.word	0x24005074
 800d64c:	240050dc 	.word	0x240050dc

0800d650 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b08a      	sub	sp, #40	; 0x28
 800d654:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d656:	2300      	movs	r3, #0
 800d658:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d65a:	f000 fb07 	bl	800dc6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d65e:	4b1c      	ldr	r3, [pc, #112]	; (800d6d0 <xTimerCreateTimerTask+0x80>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d021      	beq.n	800d6aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d666:	2300      	movs	r3, #0
 800d668:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d66a:	2300      	movs	r3, #0
 800d66c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d66e:	1d3a      	adds	r2, r7, #4
 800d670:	f107 0108 	add.w	r1, r7, #8
 800d674:	f107 030c 	add.w	r3, r7, #12
 800d678:	4618      	mov	r0, r3
 800d67a:	f7fd fecf 	bl	800b41c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d67e:	6879      	ldr	r1, [r7, #4]
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	68fa      	ldr	r2, [r7, #12]
 800d684:	9202      	str	r2, [sp, #8]
 800d686:	9301      	str	r3, [sp, #4]
 800d688:	2302      	movs	r3, #2
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	2300      	movs	r3, #0
 800d68e:	460a      	mov	r2, r1
 800d690:	4910      	ldr	r1, [pc, #64]	; (800d6d4 <xTimerCreateTimerTask+0x84>)
 800d692:	4811      	ldr	r0, [pc, #68]	; (800d6d8 <xTimerCreateTimerTask+0x88>)
 800d694:	f7ff f8b4 	bl	800c800 <xTaskCreateStatic>
 800d698:	4603      	mov	r3, r0
 800d69a:	4a10      	ldr	r2, [pc, #64]	; (800d6dc <xTimerCreateTimerTask+0x8c>)
 800d69c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d69e:	4b0f      	ldr	r3, [pc, #60]	; (800d6dc <xTimerCreateTimerTask+0x8c>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d001      	beq.n	800d6aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d10a      	bne.n	800d6c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b4:	f383 8811 	msr	BASEPRI, r3
 800d6b8:	f3bf 8f6f 	isb	sy
 800d6bc:	f3bf 8f4f 	dsb	sy
 800d6c0:	613b      	str	r3, [r7, #16]
}
 800d6c2:	bf00      	nop
 800d6c4:	e7fe      	b.n	800d6c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d6c6:	697b      	ldr	r3, [r7, #20]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3718      	adds	r7, #24
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	24005118 	.word	0x24005118
 800d6d4:	0801231c 	.word	0x0801231c
 800d6d8:	0800d815 	.word	0x0800d815
 800d6dc:	2400511c 	.word	0x2400511c

0800d6e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b08a      	sub	sp, #40	; 0x28
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	60f8      	str	r0, [r7, #12]
 800d6e8:	60b9      	str	r1, [r7, #8]
 800d6ea:	607a      	str	r2, [r7, #4]
 800d6ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d10a      	bne.n	800d70e <xTimerGenericCommand+0x2e>
	__asm volatile
 800d6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fc:	f383 8811 	msr	BASEPRI, r3
 800d700:	f3bf 8f6f 	isb	sy
 800d704:	f3bf 8f4f 	dsb	sy
 800d708:	623b      	str	r3, [r7, #32]
}
 800d70a:	bf00      	nop
 800d70c:	e7fe      	b.n	800d70c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d70e:	4b1a      	ldr	r3, [pc, #104]	; (800d778 <xTimerGenericCommand+0x98>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d02a      	beq.n	800d76c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	2b05      	cmp	r3, #5
 800d726:	dc18      	bgt.n	800d75a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d728:	f7ff feb2 	bl	800d490 <xTaskGetSchedulerState>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b02      	cmp	r3, #2
 800d730:	d109      	bne.n	800d746 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d732:	4b11      	ldr	r3, [pc, #68]	; (800d778 <xTimerGenericCommand+0x98>)
 800d734:	6818      	ldr	r0, [r3, #0]
 800d736:	f107 0110 	add.w	r1, r7, #16
 800d73a:	2300      	movs	r3, #0
 800d73c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d73e:	f7fe fc77 	bl	800c030 <xQueueGenericSend>
 800d742:	6278      	str	r0, [r7, #36]	; 0x24
 800d744:	e012      	b.n	800d76c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d746:	4b0c      	ldr	r3, [pc, #48]	; (800d778 <xTimerGenericCommand+0x98>)
 800d748:	6818      	ldr	r0, [r3, #0]
 800d74a:	f107 0110 	add.w	r1, r7, #16
 800d74e:	2300      	movs	r3, #0
 800d750:	2200      	movs	r2, #0
 800d752:	f7fe fc6d 	bl	800c030 <xQueueGenericSend>
 800d756:	6278      	str	r0, [r7, #36]	; 0x24
 800d758:	e008      	b.n	800d76c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d75a:	4b07      	ldr	r3, [pc, #28]	; (800d778 <xTimerGenericCommand+0x98>)
 800d75c:	6818      	ldr	r0, [r3, #0]
 800d75e:	f107 0110 	add.w	r1, r7, #16
 800d762:	2300      	movs	r3, #0
 800d764:	683a      	ldr	r2, [r7, #0]
 800d766:	f7fe fd61 	bl	800c22c <xQueueGenericSendFromISR>
 800d76a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3728      	adds	r7, #40	; 0x28
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	24005118 	.word	0x24005118

0800d77c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b088      	sub	sp, #32
 800d780:	af02      	add	r7, sp, #8
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d786:	4b22      	ldr	r3, [pc, #136]	; (800d810 <prvProcessExpiredTimer+0x94>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	3304      	adds	r3, #4
 800d794:	4618      	mov	r0, r3
 800d796:	f7fe f8cf 	bl	800b938 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7a0:	f003 0304 	and.w	r3, r3, #4
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d022      	beq.n	800d7ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	699a      	ldr	r2, [r3, #24]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	18d1      	adds	r1, r2, r3
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	683a      	ldr	r2, [r7, #0]
 800d7b4:	6978      	ldr	r0, [r7, #20]
 800d7b6:	f000 f8d1 	bl	800d95c <prvInsertTimerInActiveList>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d01f      	beq.n	800d800 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	2100      	movs	r1, #0
 800d7ca:	6978      	ldr	r0, [r7, #20]
 800d7cc:	f7ff ff88 	bl	800d6e0 <xTimerGenericCommand>
 800d7d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d113      	bne.n	800d800 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7dc:	f383 8811 	msr	BASEPRI, r3
 800d7e0:	f3bf 8f6f 	isb	sy
 800d7e4:	f3bf 8f4f 	dsb	sy
 800d7e8:	60fb      	str	r3, [r7, #12]
}
 800d7ea:	bf00      	nop
 800d7ec:	e7fe      	b.n	800d7ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7f4:	f023 0301 	bic.w	r3, r3, #1
 800d7f8:	b2da      	uxtb	r2, r3
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	6a1b      	ldr	r3, [r3, #32]
 800d804:	6978      	ldr	r0, [r7, #20]
 800d806:	4798      	blx	r3
}
 800d808:	bf00      	nop
 800d80a:	3718      	adds	r7, #24
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	24005110 	.word	0x24005110

0800d814 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d81c:	f107 0308 	add.w	r3, r7, #8
 800d820:	4618      	mov	r0, r3
 800d822:	f000 f857 	bl	800d8d4 <prvGetNextExpireTime>
 800d826:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	4619      	mov	r1, r3
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f000 f803 	bl	800d838 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d832:	f000 f8d5 	bl	800d9e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d836:	e7f1      	b.n	800d81c <prvTimerTask+0x8>

0800d838 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d842:	f7ff fa39 	bl	800ccb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d846:	f107 0308 	add.w	r3, r7, #8
 800d84a:	4618      	mov	r0, r3
 800d84c:	f000 f866 	bl	800d91c <prvSampleTimeNow>
 800d850:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d130      	bne.n	800d8ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d10a      	bne.n	800d874 <prvProcessTimerOrBlockTask+0x3c>
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	429a      	cmp	r2, r3
 800d864:	d806      	bhi.n	800d874 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d866:	f7ff fa35 	bl	800ccd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d86a:	68f9      	ldr	r1, [r7, #12]
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f7ff ff85 	bl	800d77c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d872:	e024      	b.n	800d8be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d008      	beq.n	800d88c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d87a:	4b13      	ldr	r3, [pc, #76]	; (800d8c8 <prvProcessTimerOrBlockTask+0x90>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d101      	bne.n	800d888 <prvProcessTimerOrBlockTask+0x50>
 800d884:	2301      	movs	r3, #1
 800d886:	e000      	b.n	800d88a <prvProcessTimerOrBlockTask+0x52>
 800d888:	2300      	movs	r3, #0
 800d88a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d88c:	4b0f      	ldr	r3, [pc, #60]	; (800d8cc <prvProcessTimerOrBlockTask+0x94>)
 800d88e:	6818      	ldr	r0, [r3, #0]
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	683a      	ldr	r2, [r7, #0]
 800d898:	4619      	mov	r1, r3
 800d89a:	f7fe ff7d 	bl	800c798 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d89e:	f7ff fa19 	bl	800ccd4 <xTaskResumeAll>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d10a      	bne.n	800d8be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d8a8:	4b09      	ldr	r3, [pc, #36]	; (800d8d0 <prvProcessTimerOrBlockTask+0x98>)
 800d8aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8ae:	601a      	str	r2, [r3, #0]
 800d8b0:	f3bf 8f4f 	dsb	sy
 800d8b4:	f3bf 8f6f 	isb	sy
}
 800d8b8:	e001      	b.n	800d8be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d8ba:	f7ff fa0b 	bl	800ccd4 <xTaskResumeAll>
}
 800d8be:	bf00      	nop
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	24005114 	.word	0x24005114
 800d8cc:	24005118 	.word	0x24005118
 800d8d0:	e000ed04 	.word	0xe000ed04

0800d8d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b085      	sub	sp, #20
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d8dc:	4b0e      	ldr	r3, [pc, #56]	; (800d918 <prvGetNextExpireTime+0x44>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d101      	bne.n	800d8ea <prvGetNextExpireTime+0x16>
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	e000      	b.n	800d8ec <prvGetNextExpireTime+0x18>
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d105      	bne.n	800d904 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d8f8:	4b07      	ldr	r3, [pc, #28]	; (800d918 <prvGetNextExpireTime+0x44>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	68db      	ldr	r3, [r3, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	60fb      	str	r3, [r7, #12]
 800d902:	e001      	b.n	800d908 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d904:	2300      	movs	r3, #0
 800d906:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d908:	68fb      	ldr	r3, [r7, #12]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3714      	adds	r7, #20
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	24005110 	.word	0x24005110

0800d91c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d924:	f7ff fa74 	bl	800ce10 <xTaskGetTickCount>
 800d928:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d92a:	4b0b      	ldr	r3, [pc, #44]	; (800d958 <prvSampleTimeNow+0x3c>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	68fa      	ldr	r2, [r7, #12]
 800d930:	429a      	cmp	r2, r3
 800d932:	d205      	bcs.n	800d940 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d934:	f000 f936 	bl	800dba4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2201      	movs	r2, #1
 800d93c:	601a      	str	r2, [r3, #0]
 800d93e:	e002      	b.n	800d946 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2200      	movs	r2, #0
 800d944:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d946:	4a04      	ldr	r2, [pc, #16]	; (800d958 <prvSampleTimeNow+0x3c>)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d94c:	68fb      	ldr	r3, [r7, #12]
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3710      	adds	r7, #16
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	24005120 	.word	0x24005120

0800d95c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	60b9      	str	r1, [r7, #8]
 800d966:	607a      	str	r2, [r7, #4]
 800d968:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d96a:	2300      	movs	r3, #0
 800d96c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	68ba      	ldr	r2, [r7, #8]
 800d972:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	68fa      	ldr	r2, [r7, #12]
 800d978:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d812      	bhi.n	800d9a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	1ad2      	subs	r2, r2, r3
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	699b      	ldr	r3, [r3, #24]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d302      	bcc.n	800d996 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d990:	2301      	movs	r3, #1
 800d992:	617b      	str	r3, [r7, #20]
 800d994:	e01b      	b.n	800d9ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d996:	4b10      	ldr	r3, [pc, #64]	; (800d9d8 <prvInsertTimerInActiveList+0x7c>)
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	3304      	adds	r3, #4
 800d99e:	4619      	mov	r1, r3
 800d9a0:	4610      	mov	r0, r2
 800d9a2:	f7fd ff90 	bl	800b8c6 <vListInsert>
 800d9a6:	e012      	b.n	800d9ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d9a8:	687a      	ldr	r2, [r7, #4]
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d206      	bcs.n	800d9be <prvInsertTimerInActiveList+0x62>
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d302      	bcc.n	800d9be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	617b      	str	r3, [r7, #20]
 800d9bc:	e007      	b.n	800d9ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d9be:	4b07      	ldr	r3, [pc, #28]	; (800d9dc <prvInsertTimerInActiveList+0x80>)
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	4610      	mov	r0, r2
 800d9ca:	f7fd ff7c 	bl	800b8c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d9ce:	697b      	ldr	r3, [r7, #20]
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3718      	adds	r7, #24
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	24005114 	.word	0x24005114
 800d9dc:	24005110 	.word	0x24005110

0800d9e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b08e      	sub	sp, #56	; 0x38
 800d9e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d9e6:	e0ca      	b.n	800db7e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	da18      	bge.n	800da20 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d9ee:	1d3b      	adds	r3, r7, #4
 800d9f0:	3304      	adds	r3, #4
 800d9f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d10a      	bne.n	800da10 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fe:	f383 8811 	msr	BASEPRI, r3
 800da02:	f3bf 8f6f 	isb	sy
 800da06:	f3bf 8f4f 	dsb	sy
 800da0a:	61fb      	str	r3, [r7, #28]
}
 800da0c:	bf00      	nop
 800da0e:	e7fe      	b.n	800da0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800da10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da16:	6850      	ldr	r0, [r2, #4]
 800da18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da1a:	6892      	ldr	r2, [r2, #8]
 800da1c:	4611      	mov	r1, r2
 800da1e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	f2c0 80aa 	blt.w	800db7c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800da2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2e:	695b      	ldr	r3, [r3, #20]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d004      	beq.n	800da3e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da36:	3304      	adds	r3, #4
 800da38:	4618      	mov	r0, r3
 800da3a:	f7fd ff7d 	bl	800b938 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da3e:	463b      	mov	r3, r7
 800da40:	4618      	mov	r0, r3
 800da42:	f7ff ff6b 	bl	800d91c <prvSampleTimeNow>
 800da46:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b09      	cmp	r3, #9
 800da4c:	f200 8097 	bhi.w	800db7e <prvProcessReceivedCommands+0x19e>
 800da50:	a201      	add	r2, pc, #4	; (adr r2, 800da58 <prvProcessReceivedCommands+0x78>)
 800da52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da56:	bf00      	nop
 800da58:	0800da81 	.word	0x0800da81
 800da5c:	0800da81 	.word	0x0800da81
 800da60:	0800da81 	.word	0x0800da81
 800da64:	0800daf5 	.word	0x0800daf5
 800da68:	0800db09 	.word	0x0800db09
 800da6c:	0800db53 	.word	0x0800db53
 800da70:	0800da81 	.word	0x0800da81
 800da74:	0800da81 	.word	0x0800da81
 800da78:	0800daf5 	.word	0x0800daf5
 800da7c:	0800db09 	.word	0x0800db09
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da86:	f043 0301 	orr.w	r3, r3, #1
 800da8a:	b2da      	uxtb	r2, r3
 800da8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800da92:	68ba      	ldr	r2, [r7, #8]
 800da94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da96:	699b      	ldr	r3, [r3, #24]
 800da98:	18d1      	adds	r1, r2, r3
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daa0:	f7ff ff5c 	bl	800d95c <prvInsertTimerInActiveList>
 800daa4:	4603      	mov	r3, r0
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d069      	beq.n	800db7e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800daaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daac:	6a1b      	ldr	r3, [r3, #32]
 800daae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dab0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dab8:	f003 0304 	and.w	r3, r3, #4
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d05e      	beq.n	800db7e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dac0:	68ba      	ldr	r2, [r7, #8]
 800dac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac4:	699b      	ldr	r3, [r3, #24]
 800dac6:	441a      	add	r2, r3
 800dac8:	2300      	movs	r3, #0
 800daca:	9300      	str	r3, [sp, #0]
 800dacc:	2300      	movs	r3, #0
 800dace:	2100      	movs	r1, #0
 800dad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dad2:	f7ff fe05 	bl	800d6e0 <xTimerGenericCommand>
 800dad6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dad8:	6a3b      	ldr	r3, [r7, #32]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d14f      	bne.n	800db7e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae2:	f383 8811 	msr	BASEPRI, r3
 800dae6:	f3bf 8f6f 	isb	sy
 800daea:	f3bf 8f4f 	dsb	sy
 800daee:	61bb      	str	r3, [r7, #24]
}
 800daf0:	bf00      	nop
 800daf2:	e7fe      	b.n	800daf2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800daf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dafa:	f023 0301 	bic.w	r3, r3, #1
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800db06:	e03a      	b.n	800db7e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db0e:	f043 0301 	orr.w	r3, r3, #1
 800db12:	b2da      	uxtb	r2, r3
 800db14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800db20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db22:	699b      	ldr	r3, [r3, #24]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d10a      	bne.n	800db3e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800db28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db2c:	f383 8811 	msr	BASEPRI, r3
 800db30:	f3bf 8f6f 	isb	sy
 800db34:	f3bf 8f4f 	dsb	sy
 800db38:	617b      	str	r3, [r7, #20]
}
 800db3a:	bf00      	nop
 800db3c:	e7fe      	b.n	800db3c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800db3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db40:	699a      	ldr	r2, [r3, #24]
 800db42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db44:	18d1      	adds	r1, r2, r3
 800db46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db4c:	f7ff ff06 	bl	800d95c <prvInsertTimerInActiveList>
					break;
 800db50:	e015      	b.n	800db7e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800db52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db58:	f003 0302 	and.w	r3, r3, #2
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d103      	bne.n	800db68 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800db60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db62:	f7fd fd41 	bl	800b5e8 <vPortFree>
 800db66:	e00a      	b.n	800db7e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db6e:	f023 0301 	bic.w	r3, r3, #1
 800db72:	b2da      	uxtb	r2, r3
 800db74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800db7a:	e000      	b.n	800db7e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800db7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db7e:	4b08      	ldr	r3, [pc, #32]	; (800dba0 <prvProcessReceivedCommands+0x1c0>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	1d39      	adds	r1, r7, #4
 800db84:	2200      	movs	r2, #0
 800db86:	4618      	mov	r0, r3
 800db88:	f7fe fbec 	bl	800c364 <xQueueReceive>
 800db8c:	4603      	mov	r3, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f47f af2a 	bne.w	800d9e8 <prvProcessReceivedCommands+0x8>
	}
}
 800db94:	bf00      	nop
 800db96:	bf00      	nop
 800db98:	3730      	adds	r7, #48	; 0x30
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	24005118 	.word	0x24005118

0800dba4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dbaa:	e048      	b.n	800dc3e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dbac:	4b2d      	ldr	r3, [pc, #180]	; (800dc64 <prvSwitchTimerLists+0xc0>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	68db      	ldr	r3, [r3, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbb6:	4b2b      	ldr	r3, [pc, #172]	; (800dc64 <prvSwitchTimerLists+0xc0>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	3304      	adds	r3, #4
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fd feb7 	bl	800b938 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	6a1b      	ldr	r3, [r3, #32]
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbd8:	f003 0304 	and.w	r3, r3, #4
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d02e      	beq.n	800dc3e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	699b      	ldr	r3, [r3, #24]
 800dbe4:	693a      	ldr	r2, [r7, #16]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d90e      	bls.n	800dc10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	68ba      	ldr	r2, [r7, #8]
 800dbf6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	68fa      	ldr	r2, [r7, #12]
 800dbfc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbfe:	4b19      	ldr	r3, [pc, #100]	; (800dc64 <prvSwitchTimerLists+0xc0>)
 800dc00:	681a      	ldr	r2, [r3, #0]
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	3304      	adds	r3, #4
 800dc06:	4619      	mov	r1, r3
 800dc08:	4610      	mov	r0, r2
 800dc0a:	f7fd fe5c 	bl	800b8c6 <vListInsert>
 800dc0e:	e016      	b.n	800dc3e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dc10:	2300      	movs	r3, #0
 800dc12:	9300      	str	r3, [sp, #0]
 800dc14:	2300      	movs	r3, #0
 800dc16:	693a      	ldr	r2, [r7, #16]
 800dc18:	2100      	movs	r1, #0
 800dc1a:	68f8      	ldr	r0, [r7, #12]
 800dc1c:	f7ff fd60 	bl	800d6e0 <xTimerGenericCommand>
 800dc20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d10a      	bne.n	800dc3e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2c:	f383 8811 	msr	BASEPRI, r3
 800dc30:	f3bf 8f6f 	isb	sy
 800dc34:	f3bf 8f4f 	dsb	sy
 800dc38:	603b      	str	r3, [r7, #0]
}
 800dc3a:	bf00      	nop
 800dc3c:	e7fe      	b.n	800dc3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc3e:	4b09      	ldr	r3, [pc, #36]	; (800dc64 <prvSwitchTimerLists+0xc0>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d1b1      	bne.n	800dbac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dc48:	4b06      	ldr	r3, [pc, #24]	; (800dc64 <prvSwitchTimerLists+0xc0>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dc4e:	4b06      	ldr	r3, [pc, #24]	; (800dc68 <prvSwitchTimerLists+0xc4>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4a04      	ldr	r2, [pc, #16]	; (800dc64 <prvSwitchTimerLists+0xc0>)
 800dc54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dc56:	4a04      	ldr	r2, [pc, #16]	; (800dc68 <prvSwitchTimerLists+0xc4>)
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	6013      	str	r3, [r2, #0]
}
 800dc5c:	bf00      	nop
 800dc5e:	3718      	adds	r7, #24
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	24005110 	.word	0x24005110
 800dc68:	24005114 	.word	0x24005114

0800dc6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dc72:	f7fd ffb7 	bl	800bbe4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dc76:	4b15      	ldr	r3, [pc, #84]	; (800dccc <prvCheckForValidListAndQueue+0x60>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d120      	bne.n	800dcc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dc7e:	4814      	ldr	r0, [pc, #80]	; (800dcd0 <prvCheckForValidListAndQueue+0x64>)
 800dc80:	f7fd fdd0 	bl	800b824 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dc84:	4813      	ldr	r0, [pc, #76]	; (800dcd4 <prvCheckForValidListAndQueue+0x68>)
 800dc86:	f7fd fdcd 	bl	800b824 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dc8a:	4b13      	ldr	r3, [pc, #76]	; (800dcd8 <prvCheckForValidListAndQueue+0x6c>)
 800dc8c:	4a10      	ldr	r2, [pc, #64]	; (800dcd0 <prvCheckForValidListAndQueue+0x64>)
 800dc8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dc90:	4b12      	ldr	r3, [pc, #72]	; (800dcdc <prvCheckForValidListAndQueue+0x70>)
 800dc92:	4a10      	ldr	r2, [pc, #64]	; (800dcd4 <prvCheckForValidListAndQueue+0x68>)
 800dc94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dc96:	2300      	movs	r3, #0
 800dc98:	9300      	str	r3, [sp, #0]
 800dc9a:	4b11      	ldr	r3, [pc, #68]	; (800dce0 <prvCheckForValidListAndQueue+0x74>)
 800dc9c:	4a11      	ldr	r2, [pc, #68]	; (800dce4 <prvCheckForValidListAndQueue+0x78>)
 800dc9e:	2110      	movs	r1, #16
 800dca0:	200a      	movs	r0, #10
 800dca2:	f7fe f929 	bl	800bef8 <xQueueGenericCreateStatic>
 800dca6:	4603      	mov	r3, r0
 800dca8:	4a08      	ldr	r2, [pc, #32]	; (800dccc <prvCheckForValidListAndQueue+0x60>)
 800dcaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dcac:	4b07      	ldr	r3, [pc, #28]	; (800dccc <prvCheckForValidListAndQueue+0x60>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d005      	beq.n	800dcc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dcb4:	4b05      	ldr	r3, [pc, #20]	; (800dccc <prvCheckForValidListAndQueue+0x60>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	490b      	ldr	r1, [pc, #44]	; (800dce8 <prvCheckForValidListAndQueue+0x7c>)
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fe fd42 	bl	800c744 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dcc0:	f7fd ffc0 	bl	800bc44 <vPortExitCritical>
}
 800dcc4:	bf00      	nop
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
 800dcca:	bf00      	nop
 800dccc:	24005118 	.word	0x24005118
 800dcd0:	240050e8 	.word	0x240050e8
 800dcd4:	240050fc 	.word	0x240050fc
 800dcd8:	24005110 	.word	0x24005110
 800dcdc:	24005114 	.word	0x24005114
 800dce0:	240051c4 	.word	0x240051c4
 800dce4:	24005124 	.word	0x24005124
 800dce8:	08012324 	.word	0x08012324

0800dcec <__errno>:
 800dcec:	4b01      	ldr	r3, [pc, #4]	; (800dcf4 <__errno+0x8>)
 800dcee:	6818      	ldr	r0, [r3, #0]
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop
 800dcf4:	24000014 	.word	0x24000014

0800dcf8 <std>:
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	b510      	push	{r4, lr}
 800dcfc:	4604      	mov	r4, r0
 800dcfe:	e9c0 3300 	strd	r3, r3, [r0]
 800dd02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd06:	6083      	str	r3, [r0, #8]
 800dd08:	8181      	strh	r1, [r0, #12]
 800dd0a:	6643      	str	r3, [r0, #100]	; 0x64
 800dd0c:	81c2      	strh	r2, [r0, #14]
 800dd0e:	6183      	str	r3, [r0, #24]
 800dd10:	4619      	mov	r1, r3
 800dd12:	2208      	movs	r2, #8
 800dd14:	305c      	adds	r0, #92	; 0x5c
 800dd16:	f000 f92b 	bl	800df70 <memset>
 800dd1a:	4b05      	ldr	r3, [pc, #20]	; (800dd30 <std+0x38>)
 800dd1c:	6263      	str	r3, [r4, #36]	; 0x24
 800dd1e:	4b05      	ldr	r3, [pc, #20]	; (800dd34 <std+0x3c>)
 800dd20:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd22:	4b05      	ldr	r3, [pc, #20]	; (800dd38 <std+0x40>)
 800dd24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd26:	4b05      	ldr	r3, [pc, #20]	; (800dd3c <std+0x44>)
 800dd28:	6224      	str	r4, [r4, #32]
 800dd2a:	6323      	str	r3, [r4, #48]	; 0x30
 800dd2c:	bd10      	pop	{r4, pc}
 800dd2e:	bf00      	nop
 800dd30:	0800ec51 	.word	0x0800ec51
 800dd34:	0800ec73 	.word	0x0800ec73
 800dd38:	0800ecab 	.word	0x0800ecab
 800dd3c:	0800eccf 	.word	0x0800eccf

0800dd40 <_cleanup_r>:
 800dd40:	4901      	ldr	r1, [pc, #4]	; (800dd48 <_cleanup_r+0x8>)
 800dd42:	f000 b8af 	b.w	800dea4 <_fwalk_reent>
 800dd46:	bf00      	nop
 800dd48:	0800fbd9 	.word	0x0800fbd9

0800dd4c <__sfmoreglue>:
 800dd4c:	b570      	push	{r4, r5, r6, lr}
 800dd4e:	2268      	movs	r2, #104	; 0x68
 800dd50:	1e4d      	subs	r5, r1, #1
 800dd52:	4355      	muls	r5, r2
 800dd54:	460e      	mov	r6, r1
 800dd56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd5a:	f000 f97d 	bl	800e058 <_malloc_r>
 800dd5e:	4604      	mov	r4, r0
 800dd60:	b140      	cbz	r0, 800dd74 <__sfmoreglue+0x28>
 800dd62:	2100      	movs	r1, #0
 800dd64:	e9c0 1600 	strd	r1, r6, [r0]
 800dd68:	300c      	adds	r0, #12
 800dd6a:	60a0      	str	r0, [r4, #8]
 800dd6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dd70:	f000 f8fe 	bl	800df70 <memset>
 800dd74:	4620      	mov	r0, r4
 800dd76:	bd70      	pop	{r4, r5, r6, pc}

0800dd78 <__sfp_lock_acquire>:
 800dd78:	4801      	ldr	r0, [pc, #4]	; (800dd80 <__sfp_lock_acquire+0x8>)
 800dd7a:	f000 b8d8 	b.w	800df2e <__retarget_lock_acquire_recursive>
 800dd7e:	bf00      	nop
 800dd80:	24005215 	.word	0x24005215

0800dd84 <__sfp_lock_release>:
 800dd84:	4801      	ldr	r0, [pc, #4]	; (800dd8c <__sfp_lock_release+0x8>)
 800dd86:	f000 b8d3 	b.w	800df30 <__retarget_lock_release_recursive>
 800dd8a:	bf00      	nop
 800dd8c:	24005215 	.word	0x24005215

0800dd90 <__sinit_lock_acquire>:
 800dd90:	4801      	ldr	r0, [pc, #4]	; (800dd98 <__sinit_lock_acquire+0x8>)
 800dd92:	f000 b8cc 	b.w	800df2e <__retarget_lock_acquire_recursive>
 800dd96:	bf00      	nop
 800dd98:	24005216 	.word	0x24005216

0800dd9c <__sinit_lock_release>:
 800dd9c:	4801      	ldr	r0, [pc, #4]	; (800dda4 <__sinit_lock_release+0x8>)
 800dd9e:	f000 b8c7 	b.w	800df30 <__retarget_lock_release_recursive>
 800dda2:	bf00      	nop
 800dda4:	24005216 	.word	0x24005216

0800dda8 <__sinit>:
 800dda8:	b510      	push	{r4, lr}
 800ddaa:	4604      	mov	r4, r0
 800ddac:	f7ff fff0 	bl	800dd90 <__sinit_lock_acquire>
 800ddb0:	69a3      	ldr	r3, [r4, #24]
 800ddb2:	b11b      	cbz	r3, 800ddbc <__sinit+0x14>
 800ddb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddb8:	f7ff bff0 	b.w	800dd9c <__sinit_lock_release>
 800ddbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ddc0:	6523      	str	r3, [r4, #80]	; 0x50
 800ddc2:	4b13      	ldr	r3, [pc, #76]	; (800de10 <__sinit+0x68>)
 800ddc4:	4a13      	ldr	r2, [pc, #76]	; (800de14 <__sinit+0x6c>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	62a2      	str	r2, [r4, #40]	; 0x28
 800ddca:	42a3      	cmp	r3, r4
 800ddcc:	bf04      	itt	eq
 800ddce:	2301      	moveq	r3, #1
 800ddd0:	61a3      	streq	r3, [r4, #24]
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f000 f820 	bl	800de18 <__sfp>
 800ddd8:	6060      	str	r0, [r4, #4]
 800ddda:	4620      	mov	r0, r4
 800dddc:	f000 f81c 	bl	800de18 <__sfp>
 800dde0:	60a0      	str	r0, [r4, #8]
 800dde2:	4620      	mov	r0, r4
 800dde4:	f000 f818 	bl	800de18 <__sfp>
 800dde8:	2200      	movs	r2, #0
 800ddea:	60e0      	str	r0, [r4, #12]
 800ddec:	2104      	movs	r1, #4
 800ddee:	6860      	ldr	r0, [r4, #4]
 800ddf0:	f7ff ff82 	bl	800dcf8 <std>
 800ddf4:	68a0      	ldr	r0, [r4, #8]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	2109      	movs	r1, #9
 800ddfa:	f7ff ff7d 	bl	800dcf8 <std>
 800ddfe:	68e0      	ldr	r0, [r4, #12]
 800de00:	2202      	movs	r2, #2
 800de02:	2112      	movs	r1, #18
 800de04:	f7ff ff78 	bl	800dcf8 <std>
 800de08:	2301      	movs	r3, #1
 800de0a:	61a3      	str	r3, [r4, #24]
 800de0c:	e7d2      	b.n	800ddb4 <__sinit+0xc>
 800de0e:	bf00      	nop
 800de10:	080123e8 	.word	0x080123e8
 800de14:	0800dd41 	.word	0x0800dd41

0800de18 <__sfp>:
 800de18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de1a:	4607      	mov	r7, r0
 800de1c:	f7ff ffac 	bl	800dd78 <__sfp_lock_acquire>
 800de20:	4b1e      	ldr	r3, [pc, #120]	; (800de9c <__sfp+0x84>)
 800de22:	681e      	ldr	r6, [r3, #0]
 800de24:	69b3      	ldr	r3, [r6, #24]
 800de26:	b913      	cbnz	r3, 800de2e <__sfp+0x16>
 800de28:	4630      	mov	r0, r6
 800de2a:	f7ff ffbd 	bl	800dda8 <__sinit>
 800de2e:	3648      	adds	r6, #72	; 0x48
 800de30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800de34:	3b01      	subs	r3, #1
 800de36:	d503      	bpl.n	800de40 <__sfp+0x28>
 800de38:	6833      	ldr	r3, [r6, #0]
 800de3a:	b30b      	cbz	r3, 800de80 <__sfp+0x68>
 800de3c:	6836      	ldr	r6, [r6, #0]
 800de3e:	e7f7      	b.n	800de30 <__sfp+0x18>
 800de40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de44:	b9d5      	cbnz	r5, 800de7c <__sfp+0x64>
 800de46:	4b16      	ldr	r3, [pc, #88]	; (800dea0 <__sfp+0x88>)
 800de48:	60e3      	str	r3, [r4, #12]
 800de4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de4e:	6665      	str	r5, [r4, #100]	; 0x64
 800de50:	f000 f86c 	bl	800df2c <__retarget_lock_init_recursive>
 800de54:	f7ff ff96 	bl	800dd84 <__sfp_lock_release>
 800de58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800de5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800de60:	6025      	str	r5, [r4, #0]
 800de62:	61a5      	str	r5, [r4, #24]
 800de64:	2208      	movs	r2, #8
 800de66:	4629      	mov	r1, r5
 800de68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800de6c:	f000 f880 	bl	800df70 <memset>
 800de70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de78:	4620      	mov	r0, r4
 800de7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de7c:	3468      	adds	r4, #104	; 0x68
 800de7e:	e7d9      	b.n	800de34 <__sfp+0x1c>
 800de80:	2104      	movs	r1, #4
 800de82:	4638      	mov	r0, r7
 800de84:	f7ff ff62 	bl	800dd4c <__sfmoreglue>
 800de88:	4604      	mov	r4, r0
 800de8a:	6030      	str	r0, [r6, #0]
 800de8c:	2800      	cmp	r0, #0
 800de8e:	d1d5      	bne.n	800de3c <__sfp+0x24>
 800de90:	f7ff ff78 	bl	800dd84 <__sfp_lock_release>
 800de94:	230c      	movs	r3, #12
 800de96:	603b      	str	r3, [r7, #0]
 800de98:	e7ee      	b.n	800de78 <__sfp+0x60>
 800de9a:	bf00      	nop
 800de9c:	080123e8 	.word	0x080123e8
 800dea0:	ffff0001 	.word	0xffff0001

0800dea4 <_fwalk_reent>:
 800dea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dea8:	4606      	mov	r6, r0
 800deaa:	4688      	mov	r8, r1
 800deac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800deb0:	2700      	movs	r7, #0
 800deb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800deb6:	f1b9 0901 	subs.w	r9, r9, #1
 800deba:	d505      	bpl.n	800dec8 <_fwalk_reent+0x24>
 800debc:	6824      	ldr	r4, [r4, #0]
 800debe:	2c00      	cmp	r4, #0
 800dec0:	d1f7      	bne.n	800deb2 <_fwalk_reent+0xe>
 800dec2:	4638      	mov	r0, r7
 800dec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dec8:	89ab      	ldrh	r3, [r5, #12]
 800deca:	2b01      	cmp	r3, #1
 800decc:	d907      	bls.n	800dede <_fwalk_reent+0x3a>
 800dece:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ded2:	3301      	adds	r3, #1
 800ded4:	d003      	beq.n	800dede <_fwalk_reent+0x3a>
 800ded6:	4629      	mov	r1, r5
 800ded8:	4630      	mov	r0, r6
 800deda:	47c0      	blx	r8
 800dedc:	4307      	orrs	r7, r0
 800dede:	3568      	adds	r5, #104	; 0x68
 800dee0:	e7e9      	b.n	800deb6 <_fwalk_reent+0x12>
	...

0800dee4 <__libc_init_array>:
 800dee4:	b570      	push	{r4, r5, r6, lr}
 800dee6:	4d0d      	ldr	r5, [pc, #52]	; (800df1c <__libc_init_array+0x38>)
 800dee8:	4c0d      	ldr	r4, [pc, #52]	; (800df20 <__libc_init_array+0x3c>)
 800deea:	1b64      	subs	r4, r4, r5
 800deec:	10a4      	asrs	r4, r4, #2
 800deee:	2600      	movs	r6, #0
 800def0:	42a6      	cmp	r6, r4
 800def2:	d109      	bne.n	800df08 <__libc_init_array+0x24>
 800def4:	4d0b      	ldr	r5, [pc, #44]	; (800df24 <__libc_init_array+0x40>)
 800def6:	4c0c      	ldr	r4, [pc, #48]	; (800df28 <__libc_init_array+0x44>)
 800def8:	f003 ffd6 	bl	8011ea8 <_init>
 800defc:	1b64      	subs	r4, r4, r5
 800defe:	10a4      	asrs	r4, r4, #2
 800df00:	2600      	movs	r6, #0
 800df02:	42a6      	cmp	r6, r4
 800df04:	d105      	bne.n	800df12 <__libc_init_array+0x2e>
 800df06:	bd70      	pop	{r4, r5, r6, pc}
 800df08:	f855 3b04 	ldr.w	r3, [r5], #4
 800df0c:	4798      	blx	r3
 800df0e:	3601      	adds	r6, #1
 800df10:	e7ee      	b.n	800def0 <__libc_init_array+0xc>
 800df12:	f855 3b04 	ldr.w	r3, [r5], #4
 800df16:	4798      	blx	r3
 800df18:	3601      	adds	r6, #1
 800df1a:	e7f2      	b.n	800df02 <__libc_init_array+0x1e>
 800df1c:	08013280 	.word	0x08013280
 800df20:	08013280 	.word	0x08013280
 800df24:	08013280 	.word	0x08013280
 800df28:	08013284 	.word	0x08013284

0800df2c <__retarget_lock_init_recursive>:
 800df2c:	4770      	bx	lr

0800df2e <__retarget_lock_acquire_recursive>:
 800df2e:	4770      	bx	lr

0800df30 <__retarget_lock_release_recursive>:
 800df30:	4770      	bx	lr
	...

0800df34 <malloc>:
 800df34:	4b02      	ldr	r3, [pc, #8]	; (800df40 <malloc+0xc>)
 800df36:	4601      	mov	r1, r0
 800df38:	6818      	ldr	r0, [r3, #0]
 800df3a:	f000 b88d 	b.w	800e058 <_malloc_r>
 800df3e:	bf00      	nop
 800df40:	24000014 	.word	0x24000014

0800df44 <free>:
 800df44:	4b02      	ldr	r3, [pc, #8]	; (800df50 <free+0xc>)
 800df46:	4601      	mov	r1, r0
 800df48:	6818      	ldr	r0, [r3, #0]
 800df4a:	f000 b819 	b.w	800df80 <_free_r>
 800df4e:	bf00      	nop
 800df50:	24000014 	.word	0x24000014

0800df54 <memcpy>:
 800df54:	440a      	add	r2, r1
 800df56:	4291      	cmp	r1, r2
 800df58:	f100 33ff 	add.w	r3, r0, #4294967295
 800df5c:	d100      	bne.n	800df60 <memcpy+0xc>
 800df5e:	4770      	bx	lr
 800df60:	b510      	push	{r4, lr}
 800df62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df6a:	4291      	cmp	r1, r2
 800df6c:	d1f9      	bne.n	800df62 <memcpy+0xe>
 800df6e:	bd10      	pop	{r4, pc}

0800df70 <memset>:
 800df70:	4402      	add	r2, r0
 800df72:	4603      	mov	r3, r0
 800df74:	4293      	cmp	r3, r2
 800df76:	d100      	bne.n	800df7a <memset+0xa>
 800df78:	4770      	bx	lr
 800df7a:	f803 1b01 	strb.w	r1, [r3], #1
 800df7e:	e7f9      	b.n	800df74 <memset+0x4>

0800df80 <_free_r>:
 800df80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df82:	2900      	cmp	r1, #0
 800df84:	d044      	beq.n	800e010 <_free_r+0x90>
 800df86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df8a:	9001      	str	r0, [sp, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	f1a1 0404 	sub.w	r4, r1, #4
 800df92:	bfb8      	it	lt
 800df94:	18e4      	addlt	r4, r4, r3
 800df96:	f001 fee9 	bl	800fd6c <__malloc_lock>
 800df9a:	4a1e      	ldr	r2, [pc, #120]	; (800e014 <_free_r+0x94>)
 800df9c:	9801      	ldr	r0, [sp, #4]
 800df9e:	6813      	ldr	r3, [r2, #0]
 800dfa0:	b933      	cbnz	r3, 800dfb0 <_free_r+0x30>
 800dfa2:	6063      	str	r3, [r4, #4]
 800dfa4:	6014      	str	r4, [r2, #0]
 800dfa6:	b003      	add	sp, #12
 800dfa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfac:	f001 bee4 	b.w	800fd78 <__malloc_unlock>
 800dfb0:	42a3      	cmp	r3, r4
 800dfb2:	d908      	bls.n	800dfc6 <_free_r+0x46>
 800dfb4:	6825      	ldr	r5, [r4, #0]
 800dfb6:	1961      	adds	r1, r4, r5
 800dfb8:	428b      	cmp	r3, r1
 800dfba:	bf01      	itttt	eq
 800dfbc:	6819      	ldreq	r1, [r3, #0]
 800dfbe:	685b      	ldreq	r3, [r3, #4]
 800dfc0:	1949      	addeq	r1, r1, r5
 800dfc2:	6021      	streq	r1, [r4, #0]
 800dfc4:	e7ed      	b.n	800dfa2 <_free_r+0x22>
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	b10b      	cbz	r3, 800dfd0 <_free_r+0x50>
 800dfcc:	42a3      	cmp	r3, r4
 800dfce:	d9fa      	bls.n	800dfc6 <_free_r+0x46>
 800dfd0:	6811      	ldr	r1, [r2, #0]
 800dfd2:	1855      	adds	r5, r2, r1
 800dfd4:	42a5      	cmp	r5, r4
 800dfd6:	d10b      	bne.n	800dff0 <_free_r+0x70>
 800dfd8:	6824      	ldr	r4, [r4, #0]
 800dfda:	4421      	add	r1, r4
 800dfdc:	1854      	adds	r4, r2, r1
 800dfde:	42a3      	cmp	r3, r4
 800dfe0:	6011      	str	r1, [r2, #0]
 800dfe2:	d1e0      	bne.n	800dfa6 <_free_r+0x26>
 800dfe4:	681c      	ldr	r4, [r3, #0]
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	6053      	str	r3, [r2, #4]
 800dfea:	4421      	add	r1, r4
 800dfec:	6011      	str	r1, [r2, #0]
 800dfee:	e7da      	b.n	800dfa6 <_free_r+0x26>
 800dff0:	d902      	bls.n	800dff8 <_free_r+0x78>
 800dff2:	230c      	movs	r3, #12
 800dff4:	6003      	str	r3, [r0, #0]
 800dff6:	e7d6      	b.n	800dfa6 <_free_r+0x26>
 800dff8:	6825      	ldr	r5, [r4, #0]
 800dffa:	1961      	adds	r1, r4, r5
 800dffc:	428b      	cmp	r3, r1
 800dffe:	bf04      	itt	eq
 800e000:	6819      	ldreq	r1, [r3, #0]
 800e002:	685b      	ldreq	r3, [r3, #4]
 800e004:	6063      	str	r3, [r4, #4]
 800e006:	bf04      	itt	eq
 800e008:	1949      	addeq	r1, r1, r5
 800e00a:	6021      	streq	r1, [r4, #0]
 800e00c:	6054      	str	r4, [r2, #4]
 800e00e:	e7ca      	b.n	800dfa6 <_free_r+0x26>
 800e010:	b003      	add	sp, #12
 800e012:	bd30      	pop	{r4, r5, pc}
 800e014:	24005218 	.word	0x24005218

0800e018 <sbrk_aligned>:
 800e018:	b570      	push	{r4, r5, r6, lr}
 800e01a:	4e0e      	ldr	r6, [pc, #56]	; (800e054 <sbrk_aligned+0x3c>)
 800e01c:	460c      	mov	r4, r1
 800e01e:	6831      	ldr	r1, [r6, #0]
 800e020:	4605      	mov	r5, r0
 800e022:	b911      	cbnz	r1, 800e02a <sbrk_aligned+0x12>
 800e024:	f000 fe04 	bl	800ec30 <_sbrk_r>
 800e028:	6030      	str	r0, [r6, #0]
 800e02a:	4621      	mov	r1, r4
 800e02c:	4628      	mov	r0, r5
 800e02e:	f000 fdff 	bl	800ec30 <_sbrk_r>
 800e032:	1c43      	adds	r3, r0, #1
 800e034:	d00a      	beq.n	800e04c <sbrk_aligned+0x34>
 800e036:	1cc4      	adds	r4, r0, #3
 800e038:	f024 0403 	bic.w	r4, r4, #3
 800e03c:	42a0      	cmp	r0, r4
 800e03e:	d007      	beq.n	800e050 <sbrk_aligned+0x38>
 800e040:	1a21      	subs	r1, r4, r0
 800e042:	4628      	mov	r0, r5
 800e044:	f000 fdf4 	bl	800ec30 <_sbrk_r>
 800e048:	3001      	adds	r0, #1
 800e04a:	d101      	bne.n	800e050 <sbrk_aligned+0x38>
 800e04c:	f04f 34ff 	mov.w	r4, #4294967295
 800e050:	4620      	mov	r0, r4
 800e052:	bd70      	pop	{r4, r5, r6, pc}
 800e054:	2400521c 	.word	0x2400521c

0800e058 <_malloc_r>:
 800e058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e05c:	1ccd      	adds	r5, r1, #3
 800e05e:	f025 0503 	bic.w	r5, r5, #3
 800e062:	3508      	adds	r5, #8
 800e064:	2d0c      	cmp	r5, #12
 800e066:	bf38      	it	cc
 800e068:	250c      	movcc	r5, #12
 800e06a:	2d00      	cmp	r5, #0
 800e06c:	4607      	mov	r7, r0
 800e06e:	db01      	blt.n	800e074 <_malloc_r+0x1c>
 800e070:	42a9      	cmp	r1, r5
 800e072:	d905      	bls.n	800e080 <_malloc_r+0x28>
 800e074:	230c      	movs	r3, #12
 800e076:	603b      	str	r3, [r7, #0]
 800e078:	2600      	movs	r6, #0
 800e07a:	4630      	mov	r0, r6
 800e07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e080:	4e2e      	ldr	r6, [pc, #184]	; (800e13c <_malloc_r+0xe4>)
 800e082:	f001 fe73 	bl	800fd6c <__malloc_lock>
 800e086:	6833      	ldr	r3, [r6, #0]
 800e088:	461c      	mov	r4, r3
 800e08a:	bb34      	cbnz	r4, 800e0da <_malloc_r+0x82>
 800e08c:	4629      	mov	r1, r5
 800e08e:	4638      	mov	r0, r7
 800e090:	f7ff ffc2 	bl	800e018 <sbrk_aligned>
 800e094:	1c43      	adds	r3, r0, #1
 800e096:	4604      	mov	r4, r0
 800e098:	d14d      	bne.n	800e136 <_malloc_r+0xde>
 800e09a:	6834      	ldr	r4, [r6, #0]
 800e09c:	4626      	mov	r6, r4
 800e09e:	2e00      	cmp	r6, #0
 800e0a0:	d140      	bne.n	800e124 <_malloc_r+0xcc>
 800e0a2:	6823      	ldr	r3, [r4, #0]
 800e0a4:	4631      	mov	r1, r6
 800e0a6:	4638      	mov	r0, r7
 800e0a8:	eb04 0803 	add.w	r8, r4, r3
 800e0ac:	f000 fdc0 	bl	800ec30 <_sbrk_r>
 800e0b0:	4580      	cmp	r8, r0
 800e0b2:	d13a      	bne.n	800e12a <_malloc_r+0xd2>
 800e0b4:	6821      	ldr	r1, [r4, #0]
 800e0b6:	3503      	adds	r5, #3
 800e0b8:	1a6d      	subs	r5, r5, r1
 800e0ba:	f025 0503 	bic.w	r5, r5, #3
 800e0be:	3508      	adds	r5, #8
 800e0c0:	2d0c      	cmp	r5, #12
 800e0c2:	bf38      	it	cc
 800e0c4:	250c      	movcc	r5, #12
 800e0c6:	4629      	mov	r1, r5
 800e0c8:	4638      	mov	r0, r7
 800e0ca:	f7ff ffa5 	bl	800e018 <sbrk_aligned>
 800e0ce:	3001      	adds	r0, #1
 800e0d0:	d02b      	beq.n	800e12a <_malloc_r+0xd2>
 800e0d2:	6823      	ldr	r3, [r4, #0]
 800e0d4:	442b      	add	r3, r5
 800e0d6:	6023      	str	r3, [r4, #0]
 800e0d8:	e00e      	b.n	800e0f8 <_malloc_r+0xa0>
 800e0da:	6822      	ldr	r2, [r4, #0]
 800e0dc:	1b52      	subs	r2, r2, r5
 800e0de:	d41e      	bmi.n	800e11e <_malloc_r+0xc6>
 800e0e0:	2a0b      	cmp	r2, #11
 800e0e2:	d916      	bls.n	800e112 <_malloc_r+0xba>
 800e0e4:	1961      	adds	r1, r4, r5
 800e0e6:	42a3      	cmp	r3, r4
 800e0e8:	6025      	str	r5, [r4, #0]
 800e0ea:	bf18      	it	ne
 800e0ec:	6059      	strne	r1, [r3, #4]
 800e0ee:	6863      	ldr	r3, [r4, #4]
 800e0f0:	bf08      	it	eq
 800e0f2:	6031      	streq	r1, [r6, #0]
 800e0f4:	5162      	str	r2, [r4, r5]
 800e0f6:	604b      	str	r3, [r1, #4]
 800e0f8:	4638      	mov	r0, r7
 800e0fa:	f104 060b 	add.w	r6, r4, #11
 800e0fe:	f001 fe3b 	bl	800fd78 <__malloc_unlock>
 800e102:	f026 0607 	bic.w	r6, r6, #7
 800e106:	1d23      	adds	r3, r4, #4
 800e108:	1af2      	subs	r2, r6, r3
 800e10a:	d0b6      	beq.n	800e07a <_malloc_r+0x22>
 800e10c:	1b9b      	subs	r3, r3, r6
 800e10e:	50a3      	str	r3, [r4, r2]
 800e110:	e7b3      	b.n	800e07a <_malloc_r+0x22>
 800e112:	6862      	ldr	r2, [r4, #4]
 800e114:	42a3      	cmp	r3, r4
 800e116:	bf0c      	ite	eq
 800e118:	6032      	streq	r2, [r6, #0]
 800e11a:	605a      	strne	r2, [r3, #4]
 800e11c:	e7ec      	b.n	800e0f8 <_malloc_r+0xa0>
 800e11e:	4623      	mov	r3, r4
 800e120:	6864      	ldr	r4, [r4, #4]
 800e122:	e7b2      	b.n	800e08a <_malloc_r+0x32>
 800e124:	4634      	mov	r4, r6
 800e126:	6876      	ldr	r6, [r6, #4]
 800e128:	e7b9      	b.n	800e09e <_malloc_r+0x46>
 800e12a:	230c      	movs	r3, #12
 800e12c:	603b      	str	r3, [r7, #0]
 800e12e:	4638      	mov	r0, r7
 800e130:	f001 fe22 	bl	800fd78 <__malloc_unlock>
 800e134:	e7a1      	b.n	800e07a <_malloc_r+0x22>
 800e136:	6025      	str	r5, [r4, #0]
 800e138:	e7de      	b.n	800e0f8 <_malloc_r+0xa0>
 800e13a:	bf00      	nop
 800e13c:	24005218 	.word	0x24005218

0800e140 <__cvt>:
 800e140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e142:	ed2d 8b02 	vpush	{d8}
 800e146:	eeb0 8b40 	vmov.f64	d8, d0
 800e14a:	b085      	sub	sp, #20
 800e14c:	4617      	mov	r7, r2
 800e14e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e150:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e152:	ee18 2a90 	vmov	r2, s17
 800e156:	f025 0520 	bic.w	r5, r5, #32
 800e15a:	2a00      	cmp	r2, #0
 800e15c:	bfb6      	itet	lt
 800e15e:	222d      	movlt	r2, #45	; 0x2d
 800e160:	2200      	movge	r2, #0
 800e162:	eeb1 8b40 	vneglt.f64	d8, d0
 800e166:	2d46      	cmp	r5, #70	; 0x46
 800e168:	460c      	mov	r4, r1
 800e16a:	701a      	strb	r2, [r3, #0]
 800e16c:	d004      	beq.n	800e178 <__cvt+0x38>
 800e16e:	2d45      	cmp	r5, #69	; 0x45
 800e170:	d100      	bne.n	800e174 <__cvt+0x34>
 800e172:	3401      	adds	r4, #1
 800e174:	2102      	movs	r1, #2
 800e176:	e000      	b.n	800e17a <__cvt+0x3a>
 800e178:	2103      	movs	r1, #3
 800e17a:	ab03      	add	r3, sp, #12
 800e17c:	9301      	str	r3, [sp, #4]
 800e17e:	ab02      	add	r3, sp, #8
 800e180:	9300      	str	r3, [sp, #0]
 800e182:	4622      	mov	r2, r4
 800e184:	4633      	mov	r3, r6
 800e186:	eeb0 0b48 	vmov.f64	d0, d8
 800e18a:	f000 ff31 	bl	800eff0 <_dtoa_r>
 800e18e:	2d47      	cmp	r5, #71	; 0x47
 800e190:	d101      	bne.n	800e196 <__cvt+0x56>
 800e192:	07fb      	lsls	r3, r7, #31
 800e194:	d51a      	bpl.n	800e1cc <__cvt+0x8c>
 800e196:	2d46      	cmp	r5, #70	; 0x46
 800e198:	eb00 0204 	add.w	r2, r0, r4
 800e19c:	d10c      	bne.n	800e1b8 <__cvt+0x78>
 800e19e:	7803      	ldrb	r3, [r0, #0]
 800e1a0:	2b30      	cmp	r3, #48	; 0x30
 800e1a2:	d107      	bne.n	800e1b4 <__cvt+0x74>
 800e1a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1ac:	bf1c      	itt	ne
 800e1ae:	f1c4 0401 	rsbne	r4, r4, #1
 800e1b2:	6034      	strne	r4, [r6, #0]
 800e1b4:	6833      	ldr	r3, [r6, #0]
 800e1b6:	441a      	add	r2, r3
 800e1b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c0:	bf08      	it	eq
 800e1c2:	9203      	streq	r2, [sp, #12]
 800e1c4:	2130      	movs	r1, #48	; 0x30
 800e1c6:	9b03      	ldr	r3, [sp, #12]
 800e1c8:	4293      	cmp	r3, r2
 800e1ca:	d307      	bcc.n	800e1dc <__cvt+0x9c>
 800e1cc:	9b03      	ldr	r3, [sp, #12]
 800e1ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1d0:	1a1b      	subs	r3, r3, r0
 800e1d2:	6013      	str	r3, [r2, #0]
 800e1d4:	b005      	add	sp, #20
 800e1d6:	ecbd 8b02 	vpop	{d8}
 800e1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1dc:	1c5c      	adds	r4, r3, #1
 800e1de:	9403      	str	r4, [sp, #12]
 800e1e0:	7019      	strb	r1, [r3, #0]
 800e1e2:	e7f0      	b.n	800e1c6 <__cvt+0x86>

0800e1e4 <__exponent>:
 800e1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2900      	cmp	r1, #0
 800e1ea:	bfb8      	it	lt
 800e1ec:	4249      	neglt	r1, r1
 800e1ee:	f803 2b02 	strb.w	r2, [r3], #2
 800e1f2:	bfb4      	ite	lt
 800e1f4:	222d      	movlt	r2, #45	; 0x2d
 800e1f6:	222b      	movge	r2, #43	; 0x2b
 800e1f8:	2909      	cmp	r1, #9
 800e1fa:	7042      	strb	r2, [r0, #1]
 800e1fc:	dd2a      	ble.n	800e254 <__exponent+0x70>
 800e1fe:	f10d 0407 	add.w	r4, sp, #7
 800e202:	46a4      	mov	ip, r4
 800e204:	270a      	movs	r7, #10
 800e206:	46a6      	mov	lr, r4
 800e208:	460a      	mov	r2, r1
 800e20a:	fb91 f6f7 	sdiv	r6, r1, r7
 800e20e:	fb07 1516 	mls	r5, r7, r6, r1
 800e212:	3530      	adds	r5, #48	; 0x30
 800e214:	2a63      	cmp	r2, #99	; 0x63
 800e216:	f104 34ff 	add.w	r4, r4, #4294967295
 800e21a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e21e:	4631      	mov	r1, r6
 800e220:	dcf1      	bgt.n	800e206 <__exponent+0x22>
 800e222:	3130      	adds	r1, #48	; 0x30
 800e224:	f1ae 0502 	sub.w	r5, lr, #2
 800e228:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e22c:	1c44      	adds	r4, r0, #1
 800e22e:	4629      	mov	r1, r5
 800e230:	4561      	cmp	r1, ip
 800e232:	d30a      	bcc.n	800e24a <__exponent+0x66>
 800e234:	f10d 0209 	add.w	r2, sp, #9
 800e238:	eba2 020e 	sub.w	r2, r2, lr
 800e23c:	4565      	cmp	r5, ip
 800e23e:	bf88      	it	hi
 800e240:	2200      	movhi	r2, #0
 800e242:	4413      	add	r3, r2
 800e244:	1a18      	subs	r0, r3, r0
 800e246:	b003      	add	sp, #12
 800e248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e24a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e24e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e252:	e7ed      	b.n	800e230 <__exponent+0x4c>
 800e254:	2330      	movs	r3, #48	; 0x30
 800e256:	3130      	adds	r1, #48	; 0x30
 800e258:	7083      	strb	r3, [r0, #2]
 800e25a:	70c1      	strb	r1, [r0, #3]
 800e25c:	1d03      	adds	r3, r0, #4
 800e25e:	e7f1      	b.n	800e244 <__exponent+0x60>

0800e260 <_printf_float>:
 800e260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e264:	b08b      	sub	sp, #44	; 0x2c
 800e266:	460c      	mov	r4, r1
 800e268:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e26c:	4616      	mov	r6, r2
 800e26e:	461f      	mov	r7, r3
 800e270:	4605      	mov	r5, r0
 800e272:	f001 fcff 	bl	800fc74 <_localeconv_r>
 800e276:	f8d0 b000 	ldr.w	fp, [r0]
 800e27a:	4658      	mov	r0, fp
 800e27c:	f7f2 f830 	bl	80002e0 <strlen>
 800e280:	2300      	movs	r3, #0
 800e282:	9308      	str	r3, [sp, #32]
 800e284:	f8d8 3000 	ldr.w	r3, [r8]
 800e288:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e28c:	6822      	ldr	r2, [r4, #0]
 800e28e:	3307      	adds	r3, #7
 800e290:	f023 0307 	bic.w	r3, r3, #7
 800e294:	f103 0108 	add.w	r1, r3, #8
 800e298:	f8c8 1000 	str.w	r1, [r8]
 800e29c:	4682      	mov	sl, r0
 800e29e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e2a2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e2a6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800e508 <_printf_float+0x2a8>
 800e2aa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e2ae:	eeb0 6bc0 	vabs.f64	d6, d0
 800e2b2:	eeb4 6b47 	vcmp.f64	d6, d7
 800e2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ba:	dd24      	ble.n	800e306 <_printf_float+0xa6>
 800e2bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c4:	d502      	bpl.n	800e2cc <_printf_float+0x6c>
 800e2c6:	232d      	movs	r3, #45	; 0x2d
 800e2c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2cc:	4b90      	ldr	r3, [pc, #576]	; (800e510 <_printf_float+0x2b0>)
 800e2ce:	4891      	ldr	r0, [pc, #580]	; (800e514 <_printf_float+0x2b4>)
 800e2d0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e2d4:	bf94      	ite	ls
 800e2d6:	4698      	movls	r8, r3
 800e2d8:	4680      	movhi	r8, r0
 800e2da:	2303      	movs	r3, #3
 800e2dc:	6123      	str	r3, [r4, #16]
 800e2de:	f022 0204 	bic.w	r2, r2, #4
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	6022      	str	r2, [r4, #0]
 800e2e6:	9304      	str	r3, [sp, #16]
 800e2e8:	9700      	str	r7, [sp, #0]
 800e2ea:	4633      	mov	r3, r6
 800e2ec:	aa09      	add	r2, sp, #36	; 0x24
 800e2ee:	4621      	mov	r1, r4
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	f000 f9d3 	bl	800e69c <_printf_common>
 800e2f6:	3001      	adds	r0, #1
 800e2f8:	f040 808a 	bne.w	800e410 <_printf_float+0x1b0>
 800e2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e300:	b00b      	add	sp, #44	; 0x2c
 800e302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e306:	eeb4 0b40 	vcmp.f64	d0, d0
 800e30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e30e:	d709      	bvc.n	800e324 <_printf_float+0xc4>
 800e310:	ee10 3a90 	vmov	r3, s1
 800e314:	2b00      	cmp	r3, #0
 800e316:	bfbc      	itt	lt
 800e318:	232d      	movlt	r3, #45	; 0x2d
 800e31a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e31e:	487e      	ldr	r0, [pc, #504]	; (800e518 <_printf_float+0x2b8>)
 800e320:	4b7e      	ldr	r3, [pc, #504]	; (800e51c <_printf_float+0x2bc>)
 800e322:	e7d5      	b.n	800e2d0 <_printf_float+0x70>
 800e324:	6863      	ldr	r3, [r4, #4]
 800e326:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e32a:	9104      	str	r1, [sp, #16]
 800e32c:	1c59      	adds	r1, r3, #1
 800e32e:	d13c      	bne.n	800e3aa <_printf_float+0x14a>
 800e330:	2306      	movs	r3, #6
 800e332:	6063      	str	r3, [r4, #4]
 800e334:	2300      	movs	r3, #0
 800e336:	9303      	str	r3, [sp, #12]
 800e338:	ab08      	add	r3, sp, #32
 800e33a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e33e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e342:	ab07      	add	r3, sp, #28
 800e344:	6861      	ldr	r1, [r4, #4]
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	6022      	str	r2, [r4, #0]
 800e34a:	f10d 031b 	add.w	r3, sp, #27
 800e34e:	4628      	mov	r0, r5
 800e350:	f7ff fef6 	bl	800e140 <__cvt>
 800e354:	9b04      	ldr	r3, [sp, #16]
 800e356:	9907      	ldr	r1, [sp, #28]
 800e358:	2b47      	cmp	r3, #71	; 0x47
 800e35a:	4680      	mov	r8, r0
 800e35c:	d108      	bne.n	800e370 <_printf_float+0x110>
 800e35e:	1cc8      	adds	r0, r1, #3
 800e360:	db02      	blt.n	800e368 <_printf_float+0x108>
 800e362:	6863      	ldr	r3, [r4, #4]
 800e364:	4299      	cmp	r1, r3
 800e366:	dd41      	ble.n	800e3ec <_printf_float+0x18c>
 800e368:	f1a9 0902 	sub.w	r9, r9, #2
 800e36c:	fa5f f989 	uxtb.w	r9, r9
 800e370:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e374:	d820      	bhi.n	800e3b8 <_printf_float+0x158>
 800e376:	3901      	subs	r1, #1
 800e378:	464a      	mov	r2, r9
 800e37a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e37e:	9107      	str	r1, [sp, #28]
 800e380:	f7ff ff30 	bl	800e1e4 <__exponent>
 800e384:	9a08      	ldr	r2, [sp, #32]
 800e386:	9004      	str	r0, [sp, #16]
 800e388:	1813      	adds	r3, r2, r0
 800e38a:	2a01      	cmp	r2, #1
 800e38c:	6123      	str	r3, [r4, #16]
 800e38e:	dc02      	bgt.n	800e396 <_printf_float+0x136>
 800e390:	6822      	ldr	r2, [r4, #0]
 800e392:	07d2      	lsls	r2, r2, #31
 800e394:	d501      	bpl.n	800e39a <_printf_float+0x13a>
 800e396:	3301      	adds	r3, #1
 800e398:	6123      	str	r3, [r4, #16]
 800e39a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d0a2      	beq.n	800e2e8 <_printf_float+0x88>
 800e3a2:	232d      	movs	r3, #45	; 0x2d
 800e3a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3a8:	e79e      	b.n	800e2e8 <_printf_float+0x88>
 800e3aa:	9904      	ldr	r1, [sp, #16]
 800e3ac:	2947      	cmp	r1, #71	; 0x47
 800e3ae:	d1c1      	bne.n	800e334 <_printf_float+0xd4>
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d1bf      	bne.n	800e334 <_printf_float+0xd4>
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	e7bc      	b.n	800e332 <_printf_float+0xd2>
 800e3b8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e3bc:	d118      	bne.n	800e3f0 <_printf_float+0x190>
 800e3be:	2900      	cmp	r1, #0
 800e3c0:	6863      	ldr	r3, [r4, #4]
 800e3c2:	dd0b      	ble.n	800e3dc <_printf_float+0x17c>
 800e3c4:	6121      	str	r1, [r4, #16]
 800e3c6:	b913      	cbnz	r3, 800e3ce <_printf_float+0x16e>
 800e3c8:	6822      	ldr	r2, [r4, #0]
 800e3ca:	07d0      	lsls	r0, r2, #31
 800e3cc:	d502      	bpl.n	800e3d4 <_printf_float+0x174>
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	440b      	add	r3, r1
 800e3d2:	6123      	str	r3, [r4, #16]
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	65a1      	str	r1, [r4, #88]	; 0x58
 800e3d8:	9304      	str	r3, [sp, #16]
 800e3da:	e7de      	b.n	800e39a <_printf_float+0x13a>
 800e3dc:	b913      	cbnz	r3, 800e3e4 <_printf_float+0x184>
 800e3de:	6822      	ldr	r2, [r4, #0]
 800e3e0:	07d2      	lsls	r2, r2, #31
 800e3e2:	d501      	bpl.n	800e3e8 <_printf_float+0x188>
 800e3e4:	3302      	adds	r3, #2
 800e3e6:	e7f4      	b.n	800e3d2 <_printf_float+0x172>
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	e7f2      	b.n	800e3d2 <_printf_float+0x172>
 800e3ec:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e3f0:	9b08      	ldr	r3, [sp, #32]
 800e3f2:	4299      	cmp	r1, r3
 800e3f4:	db05      	blt.n	800e402 <_printf_float+0x1a2>
 800e3f6:	6823      	ldr	r3, [r4, #0]
 800e3f8:	6121      	str	r1, [r4, #16]
 800e3fa:	07d8      	lsls	r0, r3, #31
 800e3fc:	d5ea      	bpl.n	800e3d4 <_printf_float+0x174>
 800e3fe:	1c4b      	adds	r3, r1, #1
 800e400:	e7e7      	b.n	800e3d2 <_printf_float+0x172>
 800e402:	2900      	cmp	r1, #0
 800e404:	bfd4      	ite	le
 800e406:	f1c1 0202 	rsble	r2, r1, #2
 800e40a:	2201      	movgt	r2, #1
 800e40c:	4413      	add	r3, r2
 800e40e:	e7e0      	b.n	800e3d2 <_printf_float+0x172>
 800e410:	6823      	ldr	r3, [r4, #0]
 800e412:	055a      	lsls	r2, r3, #21
 800e414:	d407      	bmi.n	800e426 <_printf_float+0x1c6>
 800e416:	6923      	ldr	r3, [r4, #16]
 800e418:	4642      	mov	r2, r8
 800e41a:	4631      	mov	r1, r6
 800e41c:	4628      	mov	r0, r5
 800e41e:	47b8      	blx	r7
 800e420:	3001      	adds	r0, #1
 800e422:	d12a      	bne.n	800e47a <_printf_float+0x21a>
 800e424:	e76a      	b.n	800e2fc <_printf_float+0x9c>
 800e426:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e42a:	f240 80e2 	bls.w	800e5f2 <_printf_float+0x392>
 800e42e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e432:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e43a:	d133      	bne.n	800e4a4 <_printf_float+0x244>
 800e43c:	4a38      	ldr	r2, [pc, #224]	; (800e520 <_printf_float+0x2c0>)
 800e43e:	2301      	movs	r3, #1
 800e440:	4631      	mov	r1, r6
 800e442:	4628      	mov	r0, r5
 800e444:	47b8      	blx	r7
 800e446:	3001      	adds	r0, #1
 800e448:	f43f af58 	beq.w	800e2fc <_printf_float+0x9c>
 800e44c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e450:	429a      	cmp	r2, r3
 800e452:	db02      	blt.n	800e45a <_printf_float+0x1fa>
 800e454:	6823      	ldr	r3, [r4, #0]
 800e456:	07d8      	lsls	r0, r3, #31
 800e458:	d50f      	bpl.n	800e47a <_printf_float+0x21a>
 800e45a:	4653      	mov	r3, sl
 800e45c:	465a      	mov	r2, fp
 800e45e:	4631      	mov	r1, r6
 800e460:	4628      	mov	r0, r5
 800e462:	47b8      	blx	r7
 800e464:	3001      	adds	r0, #1
 800e466:	f43f af49 	beq.w	800e2fc <_printf_float+0x9c>
 800e46a:	f04f 0800 	mov.w	r8, #0
 800e46e:	f104 091a 	add.w	r9, r4, #26
 800e472:	9b08      	ldr	r3, [sp, #32]
 800e474:	3b01      	subs	r3, #1
 800e476:	4543      	cmp	r3, r8
 800e478:	dc09      	bgt.n	800e48e <_printf_float+0x22e>
 800e47a:	6823      	ldr	r3, [r4, #0]
 800e47c:	079b      	lsls	r3, r3, #30
 800e47e:	f100 8108 	bmi.w	800e692 <_printf_float+0x432>
 800e482:	68e0      	ldr	r0, [r4, #12]
 800e484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e486:	4298      	cmp	r0, r3
 800e488:	bfb8      	it	lt
 800e48a:	4618      	movlt	r0, r3
 800e48c:	e738      	b.n	800e300 <_printf_float+0xa0>
 800e48e:	2301      	movs	r3, #1
 800e490:	464a      	mov	r2, r9
 800e492:	4631      	mov	r1, r6
 800e494:	4628      	mov	r0, r5
 800e496:	47b8      	blx	r7
 800e498:	3001      	adds	r0, #1
 800e49a:	f43f af2f 	beq.w	800e2fc <_printf_float+0x9c>
 800e49e:	f108 0801 	add.w	r8, r8, #1
 800e4a2:	e7e6      	b.n	800e472 <_printf_float+0x212>
 800e4a4:	9b07      	ldr	r3, [sp, #28]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	dc3c      	bgt.n	800e524 <_printf_float+0x2c4>
 800e4aa:	4a1d      	ldr	r2, [pc, #116]	; (800e520 <_printf_float+0x2c0>)
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	4631      	mov	r1, r6
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	47b8      	blx	r7
 800e4b4:	3001      	adds	r0, #1
 800e4b6:	f43f af21 	beq.w	800e2fc <_printf_float+0x9c>
 800e4ba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	d102      	bne.n	800e4c8 <_printf_float+0x268>
 800e4c2:	6823      	ldr	r3, [r4, #0]
 800e4c4:	07d9      	lsls	r1, r3, #31
 800e4c6:	d5d8      	bpl.n	800e47a <_printf_float+0x21a>
 800e4c8:	4653      	mov	r3, sl
 800e4ca:	465a      	mov	r2, fp
 800e4cc:	4631      	mov	r1, r6
 800e4ce:	4628      	mov	r0, r5
 800e4d0:	47b8      	blx	r7
 800e4d2:	3001      	adds	r0, #1
 800e4d4:	f43f af12 	beq.w	800e2fc <_printf_float+0x9c>
 800e4d8:	f04f 0900 	mov.w	r9, #0
 800e4dc:	f104 0a1a 	add.w	sl, r4, #26
 800e4e0:	9b07      	ldr	r3, [sp, #28]
 800e4e2:	425b      	negs	r3, r3
 800e4e4:	454b      	cmp	r3, r9
 800e4e6:	dc01      	bgt.n	800e4ec <_printf_float+0x28c>
 800e4e8:	9b08      	ldr	r3, [sp, #32]
 800e4ea:	e795      	b.n	800e418 <_printf_float+0x1b8>
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	4652      	mov	r2, sl
 800e4f0:	4631      	mov	r1, r6
 800e4f2:	4628      	mov	r0, r5
 800e4f4:	47b8      	blx	r7
 800e4f6:	3001      	adds	r0, #1
 800e4f8:	f43f af00 	beq.w	800e2fc <_printf_float+0x9c>
 800e4fc:	f109 0901 	add.w	r9, r9, #1
 800e500:	e7ee      	b.n	800e4e0 <_printf_float+0x280>
 800e502:	bf00      	nop
 800e504:	f3af 8000 	nop.w
 800e508:	ffffffff 	.word	0xffffffff
 800e50c:	7fefffff 	.word	0x7fefffff
 800e510:	080123ec 	.word	0x080123ec
 800e514:	080123f0 	.word	0x080123f0
 800e518:	080123f8 	.word	0x080123f8
 800e51c:	080123f4 	.word	0x080123f4
 800e520:	080123fc 	.word	0x080123fc
 800e524:	9a08      	ldr	r2, [sp, #32]
 800e526:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e528:	429a      	cmp	r2, r3
 800e52a:	bfa8      	it	ge
 800e52c:	461a      	movge	r2, r3
 800e52e:	2a00      	cmp	r2, #0
 800e530:	4691      	mov	r9, r2
 800e532:	dc38      	bgt.n	800e5a6 <_printf_float+0x346>
 800e534:	2300      	movs	r3, #0
 800e536:	9305      	str	r3, [sp, #20]
 800e538:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e53c:	f104 021a 	add.w	r2, r4, #26
 800e540:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e542:	9905      	ldr	r1, [sp, #20]
 800e544:	9304      	str	r3, [sp, #16]
 800e546:	eba3 0309 	sub.w	r3, r3, r9
 800e54a:	428b      	cmp	r3, r1
 800e54c:	dc33      	bgt.n	800e5b6 <_printf_float+0x356>
 800e54e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e552:	429a      	cmp	r2, r3
 800e554:	db3c      	blt.n	800e5d0 <_printf_float+0x370>
 800e556:	6823      	ldr	r3, [r4, #0]
 800e558:	07da      	lsls	r2, r3, #31
 800e55a:	d439      	bmi.n	800e5d0 <_printf_float+0x370>
 800e55c:	9b08      	ldr	r3, [sp, #32]
 800e55e:	9a04      	ldr	r2, [sp, #16]
 800e560:	9907      	ldr	r1, [sp, #28]
 800e562:	1a9a      	subs	r2, r3, r2
 800e564:	eba3 0901 	sub.w	r9, r3, r1
 800e568:	4591      	cmp	r9, r2
 800e56a:	bfa8      	it	ge
 800e56c:	4691      	movge	r9, r2
 800e56e:	f1b9 0f00 	cmp.w	r9, #0
 800e572:	dc35      	bgt.n	800e5e0 <_printf_float+0x380>
 800e574:	f04f 0800 	mov.w	r8, #0
 800e578:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e57c:	f104 0a1a 	add.w	sl, r4, #26
 800e580:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e584:	1a9b      	subs	r3, r3, r2
 800e586:	eba3 0309 	sub.w	r3, r3, r9
 800e58a:	4543      	cmp	r3, r8
 800e58c:	f77f af75 	ble.w	800e47a <_printf_float+0x21a>
 800e590:	2301      	movs	r3, #1
 800e592:	4652      	mov	r2, sl
 800e594:	4631      	mov	r1, r6
 800e596:	4628      	mov	r0, r5
 800e598:	47b8      	blx	r7
 800e59a:	3001      	adds	r0, #1
 800e59c:	f43f aeae 	beq.w	800e2fc <_printf_float+0x9c>
 800e5a0:	f108 0801 	add.w	r8, r8, #1
 800e5a4:	e7ec      	b.n	800e580 <_printf_float+0x320>
 800e5a6:	4613      	mov	r3, r2
 800e5a8:	4631      	mov	r1, r6
 800e5aa:	4642      	mov	r2, r8
 800e5ac:	4628      	mov	r0, r5
 800e5ae:	47b8      	blx	r7
 800e5b0:	3001      	adds	r0, #1
 800e5b2:	d1bf      	bne.n	800e534 <_printf_float+0x2d4>
 800e5b4:	e6a2      	b.n	800e2fc <_printf_float+0x9c>
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	4631      	mov	r1, r6
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	9204      	str	r2, [sp, #16]
 800e5be:	47b8      	blx	r7
 800e5c0:	3001      	adds	r0, #1
 800e5c2:	f43f ae9b 	beq.w	800e2fc <_printf_float+0x9c>
 800e5c6:	9b05      	ldr	r3, [sp, #20]
 800e5c8:	9a04      	ldr	r2, [sp, #16]
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	9305      	str	r3, [sp, #20]
 800e5ce:	e7b7      	b.n	800e540 <_printf_float+0x2e0>
 800e5d0:	4653      	mov	r3, sl
 800e5d2:	465a      	mov	r2, fp
 800e5d4:	4631      	mov	r1, r6
 800e5d6:	4628      	mov	r0, r5
 800e5d8:	47b8      	blx	r7
 800e5da:	3001      	adds	r0, #1
 800e5dc:	d1be      	bne.n	800e55c <_printf_float+0x2fc>
 800e5de:	e68d      	b.n	800e2fc <_printf_float+0x9c>
 800e5e0:	9a04      	ldr	r2, [sp, #16]
 800e5e2:	464b      	mov	r3, r9
 800e5e4:	4442      	add	r2, r8
 800e5e6:	4631      	mov	r1, r6
 800e5e8:	4628      	mov	r0, r5
 800e5ea:	47b8      	blx	r7
 800e5ec:	3001      	adds	r0, #1
 800e5ee:	d1c1      	bne.n	800e574 <_printf_float+0x314>
 800e5f0:	e684      	b.n	800e2fc <_printf_float+0x9c>
 800e5f2:	9a08      	ldr	r2, [sp, #32]
 800e5f4:	2a01      	cmp	r2, #1
 800e5f6:	dc01      	bgt.n	800e5fc <_printf_float+0x39c>
 800e5f8:	07db      	lsls	r3, r3, #31
 800e5fa:	d537      	bpl.n	800e66c <_printf_float+0x40c>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	4642      	mov	r2, r8
 800e600:	4631      	mov	r1, r6
 800e602:	4628      	mov	r0, r5
 800e604:	47b8      	blx	r7
 800e606:	3001      	adds	r0, #1
 800e608:	f43f ae78 	beq.w	800e2fc <_printf_float+0x9c>
 800e60c:	4653      	mov	r3, sl
 800e60e:	465a      	mov	r2, fp
 800e610:	4631      	mov	r1, r6
 800e612:	4628      	mov	r0, r5
 800e614:	47b8      	blx	r7
 800e616:	3001      	adds	r0, #1
 800e618:	f43f ae70 	beq.w	800e2fc <_printf_float+0x9c>
 800e61c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e620:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e628:	d01b      	beq.n	800e662 <_printf_float+0x402>
 800e62a:	9b08      	ldr	r3, [sp, #32]
 800e62c:	f108 0201 	add.w	r2, r8, #1
 800e630:	3b01      	subs	r3, #1
 800e632:	4631      	mov	r1, r6
 800e634:	4628      	mov	r0, r5
 800e636:	47b8      	blx	r7
 800e638:	3001      	adds	r0, #1
 800e63a:	d10e      	bne.n	800e65a <_printf_float+0x3fa>
 800e63c:	e65e      	b.n	800e2fc <_printf_float+0x9c>
 800e63e:	2301      	movs	r3, #1
 800e640:	464a      	mov	r2, r9
 800e642:	4631      	mov	r1, r6
 800e644:	4628      	mov	r0, r5
 800e646:	47b8      	blx	r7
 800e648:	3001      	adds	r0, #1
 800e64a:	f43f ae57 	beq.w	800e2fc <_printf_float+0x9c>
 800e64e:	f108 0801 	add.w	r8, r8, #1
 800e652:	9b08      	ldr	r3, [sp, #32]
 800e654:	3b01      	subs	r3, #1
 800e656:	4543      	cmp	r3, r8
 800e658:	dcf1      	bgt.n	800e63e <_printf_float+0x3de>
 800e65a:	9b04      	ldr	r3, [sp, #16]
 800e65c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e660:	e6db      	b.n	800e41a <_printf_float+0x1ba>
 800e662:	f04f 0800 	mov.w	r8, #0
 800e666:	f104 091a 	add.w	r9, r4, #26
 800e66a:	e7f2      	b.n	800e652 <_printf_float+0x3f2>
 800e66c:	2301      	movs	r3, #1
 800e66e:	4642      	mov	r2, r8
 800e670:	e7df      	b.n	800e632 <_printf_float+0x3d2>
 800e672:	2301      	movs	r3, #1
 800e674:	464a      	mov	r2, r9
 800e676:	4631      	mov	r1, r6
 800e678:	4628      	mov	r0, r5
 800e67a:	47b8      	blx	r7
 800e67c:	3001      	adds	r0, #1
 800e67e:	f43f ae3d 	beq.w	800e2fc <_printf_float+0x9c>
 800e682:	f108 0801 	add.w	r8, r8, #1
 800e686:	68e3      	ldr	r3, [r4, #12]
 800e688:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e68a:	1a5b      	subs	r3, r3, r1
 800e68c:	4543      	cmp	r3, r8
 800e68e:	dcf0      	bgt.n	800e672 <_printf_float+0x412>
 800e690:	e6f7      	b.n	800e482 <_printf_float+0x222>
 800e692:	f04f 0800 	mov.w	r8, #0
 800e696:	f104 0919 	add.w	r9, r4, #25
 800e69a:	e7f4      	b.n	800e686 <_printf_float+0x426>

0800e69c <_printf_common>:
 800e69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6a0:	4616      	mov	r6, r2
 800e6a2:	4699      	mov	r9, r3
 800e6a4:	688a      	ldr	r2, [r1, #8]
 800e6a6:	690b      	ldr	r3, [r1, #16]
 800e6a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	bfb8      	it	lt
 800e6b0:	4613      	movlt	r3, r2
 800e6b2:	6033      	str	r3, [r6, #0]
 800e6b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e6b8:	4607      	mov	r7, r0
 800e6ba:	460c      	mov	r4, r1
 800e6bc:	b10a      	cbz	r2, 800e6c2 <_printf_common+0x26>
 800e6be:	3301      	adds	r3, #1
 800e6c0:	6033      	str	r3, [r6, #0]
 800e6c2:	6823      	ldr	r3, [r4, #0]
 800e6c4:	0699      	lsls	r1, r3, #26
 800e6c6:	bf42      	ittt	mi
 800e6c8:	6833      	ldrmi	r3, [r6, #0]
 800e6ca:	3302      	addmi	r3, #2
 800e6cc:	6033      	strmi	r3, [r6, #0]
 800e6ce:	6825      	ldr	r5, [r4, #0]
 800e6d0:	f015 0506 	ands.w	r5, r5, #6
 800e6d4:	d106      	bne.n	800e6e4 <_printf_common+0x48>
 800e6d6:	f104 0a19 	add.w	sl, r4, #25
 800e6da:	68e3      	ldr	r3, [r4, #12]
 800e6dc:	6832      	ldr	r2, [r6, #0]
 800e6de:	1a9b      	subs	r3, r3, r2
 800e6e0:	42ab      	cmp	r3, r5
 800e6e2:	dc26      	bgt.n	800e732 <_printf_common+0x96>
 800e6e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e6e8:	1e13      	subs	r3, r2, #0
 800e6ea:	6822      	ldr	r2, [r4, #0]
 800e6ec:	bf18      	it	ne
 800e6ee:	2301      	movne	r3, #1
 800e6f0:	0692      	lsls	r2, r2, #26
 800e6f2:	d42b      	bmi.n	800e74c <_printf_common+0xb0>
 800e6f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e6f8:	4649      	mov	r1, r9
 800e6fa:	4638      	mov	r0, r7
 800e6fc:	47c0      	blx	r8
 800e6fe:	3001      	adds	r0, #1
 800e700:	d01e      	beq.n	800e740 <_printf_common+0xa4>
 800e702:	6823      	ldr	r3, [r4, #0]
 800e704:	68e5      	ldr	r5, [r4, #12]
 800e706:	6832      	ldr	r2, [r6, #0]
 800e708:	f003 0306 	and.w	r3, r3, #6
 800e70c:	2b04      	cmp	r3, #4
 800e70e:	bf08      	it	eq
 800e710:	1aad      	subeq	r5, r5, r2
 800e712:	68a3      	ldr	r3, [r4, #8]
 800e714:	6922      	ldr	r2, [r4, #16]
 800e716:	bf0c      	ite	eq
 800e718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e71c:	2500      	movne	r5, #0
 800e71e:	4293      	cmp	r3, r2
 800e720:	bfc4      	itt	gt
 800e722:	1a9b      	subgt	r3, r3, r2
 800e724:	18ed      	addgt	r5, r5, r3
 800e726:	2600      	movs	r6, #0
 800e728:	341a      	adds	r4, #26
 800e72a:	42b5      	cmp	r5, r6
 800e72c:	d11a      	bne.n	800e764 <_printf_common+0xc8>
 800e72e:	2000      	movs	r0, #0
 800e730:	e008      	b.n	800e744 <_printf_common+0xa8>
 800e732:	2301      	movs	r3, #1
 800e734:	4652      	mov	r2, sl
 800e736:	4649      	mov	r1, r9
 800e738:	4638      	mov	r0, r7
 800e73a:	47c0      	blx	r8
 800e73c:	3001      	adds	r0, #1
 800e73e:	d103      	bne.n	800e748 <_printf_common+0xac>
 800e740:	f04f 30ff 	mov.w	r0, #4294967295
 800e744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e748:	3501      	adds	r5, #1
 800e74a:	e7c6      	b.n	800e6da <_printf_common+0x3e>
 800e74c:	18e1      	adds	r1, r4, r3
 800e74e:	1c5a      	adds	r2, r3, #1
 800e750:	2030      	movs	r0, #48	; 0x30
 800e752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e756:	4422      	add	r2, r4
 800e758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e75c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e760:	3302      	adds	r3, #2
 800e762:	e7c7      	b.n	800e6f4 <_printf_common+0x58>
 800e764:	2301      	movs	r3, #1
 800e766:	4622      	mov	r2, r4
 800e768:	4649      	mov	r1, r9
 800e76a:	4638      	mov	r0, r7
 800e76c:	47c0      	blx	r8
 800e76e:	3001      	adds	r0, #1
 800e770:	d0e6      	beq.n	800e740 <_printf_common+0xa4>
 800e772:	3601      	adds	r6, #1
 800e774:	e7d9      	b.n	800e72a <_printf_common+0x8e>
	...

0800e778 <_printf_i>:
 800e778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e77c:	7e0f      	ldrb	r7, [r1, #24]
 800e77e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e780:	2f78      	cmp	r7, #120	; 0x78
 800e782:	4691      	mov	r9, r2
 800e784:	4680      	mov	r8, r0
 800e786:	460c      	mov	r4, r1
 800e788:	469a      	mov	sl, r3
 800e78a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e78e:	d807      	bhi.n	800e7a0 <_printf_i+0x28>
 800e790:	2f62      	cmp	r7, #98	; 0x62
 800e792:	d80a      	bhi.n	800e7aa <_printf_i+0x32>
 800e794:	2f00      	cmp	r7, #0
 800e796:	f000 80d8 	beq.w	800e94a <_printf_i+0x1d2>
 800e79a:	2f58      	cmp	r7, #88	; 0x58
 800e79c:	f000 80a3 	beq.w	800e8e6 <_printf_i+0x16e>
 800e7a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e7a8:	e03a      	b.n	800e820 <_printf_i+0xa8>
 800e7aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e7ae:	2b15      	cmp	r3, #21
 800e7b0:	d8f6      	bhi.n	800e7a0 <_printf_i+0x28>
 800e7b2:	a101      	add	r1, pc, #4	; (adr r1, 800e7b8 <_printf_i+0x40>)
 800e7b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e7b8:	0800e811 	.word	0x0800e811
 800e7bc:	0800e825 	.word	0x0800e825
 800e7c0:	0800e7a1 	.word	0x0800e7a1
 800e7c4:	0800e7a1 	.word	0x0800e7a1
 800e7c8:	0800e7a1 	.word	0x0800e7a1
 800e7cc:	0800e7a1 	.word	0x0800e7a1
 800e7d0:	0800e825 	.word	0x0800e825
 800e7d4:	0800e7a1 	.word	0x0800e7a1
 800e7d8:	0800e7a1 	.word	0x0800e7a1
 800e7dc:	0800e7a1 	.word	0x0800e7a1
 800e7e0:	0800e7a1 	.word	0x0800e7a1
 800e7e4:	0800e931 	.word	0x0800e931
 800e7e8:	0800e855 	.word	0x0800e855
 800e7ec:	0800e913 	.word	0x0800e913
 800e7f0:	0800e7a1 	.word	0x0800e7a1
 800e7f4:	0800e7a1 	.word	0x0800e7a1
 800e7f8:	0800e953 	.word	0x0800e953
 800e7fc:	0800e7a1 	.word	0x0800e7a1
 800e800:	0800e855 	.word	0x0800e855
 800e804:	0800e7a1 	.word	0x0800e7a1
 800e808:	0800e7a1 	.word	0x0800e7a1
 800e80c:	0800e91b 	.word	0x0800e91b
 800e810:	682b      	ldr	r3, [r5, #0]
 800e812:	1d1a      	adds	r2, r3, #4
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	602a      	str	r2, [r5, #0]
 800e818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e81c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e820:	2301      	movs	r3, #1
 800e822:	e0a3      	b.n	800e96c <_printf_i+0x1f4>
 800e824:	6820      	ldr	r0, [r4, #0]
 800e826:	6829      	ldr	r1, [r5, #0]
 800e828:	0606      	lsls	r6, r0, #24
 800e82a:	f101 0304 	add.w	r3, r1, #4
 800e82e:	d50a      	bpl.n	800e846 <_printf_i+0xce>
 800e830:	680e      	ldr	r6, [r1, #0]
 800e832:	602b      	str	r3, [r5, #0]
 800e834:	2e00      	cmp	r6, #0
 800e836:	da03      	bge.n	800e840 <_printf_i+0xc8>
 800e838:	232d      	movs	r3, #45	; 0x2d
 800e83a:	4276      	negs	r6, r6
 800e83c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e840:	485e      	ldr	r0, [pc, #376]	; (800e9bc <_printf_i+0x244>)
 800e842:	230a      	movs	r3, #10
 800e844:	e019      	b.n	800e87a <_printf_i+0x102>
 800e846:	680e      	ldr	r6, [r1, #0]
 800e848:	602b      	str	r3, [r5, #0]
 800e84a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e84e:	bf18      	it	ne
 800e850:	b236      	sxthne	r6, r6
 800e852:	e7ef      	b.n	800e834 <_printf_i+0xbc>
 800e854:	682b      	ldr	r3, [r5, #0]
 800e856:	6820      	ldr	r0, [r4, #0]
 800e858:	1d19      	adds	r1, r3, #4
 800e85a:	6029      	str	r1, [r5, #0]
 800e85c:	0601      	lsls	r1, r0, #24
 800e85e:	d501      	bpl.n	800e864 <_printf_i+0xec>
 800e860:	681e      	ldr	r6, [r3, #0]
 800e862:	e002      	b.n	800e86a <_printf_i+0xf2>
 800e864:	0646      	lsls	r6, r0, #25
 800e866:	d5fb      	bpl.n	800e860 <_printf_i+0xe8>
 800e868:	881e      	ldrh	r6, [r3, #0]
 800e86a:	4854      	ldr	r0, [pc, #336]	; (800e9bc <_printf_i+0x244>)
 800e86c:	2f6f      	cmp	r7, #111	; 0x6f
 800e86e:	bf0c      	ite	eq
 800e870:	2308      	moveq	r3, #8
 800e872:	230a      	movne	r3, #10
 800e874:	2100      	movs	r1, #0
 800e876:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e87a:	6865      	ldr	r5, [r4, #4]
 800e87c:	60a5      	str	r5, [r4, #8]
 800e87e:	2d00      	cmp	r5, #0
 800e880:	bfa2      	ittt	ge
 800e882:	6821      	ldrge	r1, [r4, #0]
 800e884:	f021 0104 	bicge.w	r1, r1, #4
 800e888:	6021      	strge	r1, [r4, #0]
 800e88a:	b90e      	cbnz	r6, 800e890 <_printf_i+0x118>
 800e88c:	2d00      	cmp	r5, #0
 800e88e:	d04d      	beq.n	800e92c <_printf_i+0x1b4>
 800e890:	4615      	mov	r5, r2
 800e892:	fbb6 f1f3 	udiv	r1, r6, r3
 800e896:	fb03 6711 	mls	r7, r3, r1, r6
 800e89a:	5dc7      	ldrb	r7, [r0, r7]
 800e89c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e8a0:	4637      	mov	r7, r6
 800e8a2:	42bb      	cmp	r3, r7
 800e8a4:	460e      	mov	r6, r1
 800e8a6:	d9f4      	bls.n	800e892 <_printf_i+0x11a>
 800e8a8:	2b08      	cmp	r3, #8
 800e8aa:	d10b      	bne.n	800e8c4 <_printf_i+0x14c>
 800e8ac:	6823      	ldr	r3, [r4, #0]
 800e8ae:	07de      	lsls	r6, r3, #31
 800e8b0:	d508      	bpl.n	800e8c4 <_printf_i+0x14c>
 800e8b2:	6923      	ldr	r3, [r4, #16]
 800e8b4:	6861      	ldr	r1, [r4, #4]
 800e8b6:	4299      	cmp	r1, r3
 800e8b8:	bfde      	ittt	le
 800e8ba:	2330      	movle	r3, #48	; 0x30
 800e8bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e8c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e8c4:	1b52      	subs	r2, r2, r5
 800e8c6:	6122      	str	r2, [r4, #16]
 800e8c8:	f8cd a000 	str.w	sl, [sp]
 800e8cc:	464b      	mov	r3, r9
 800e8ce:	aa03      	add	r2, sp, #12
 800e8d0:	4621      	mov	r1, r4
 800e8d2:	4640      	mov	r0, r8
 800e8d4:	f7ff fee2 	bl	800e69c <_printf_common>
 800e8d8:	3001      	adds	r0, #1
 800e8da:	d14c      	bne.n	800e976 <_printf_i+0x1fe>
 800e8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e8e0:	b004      	add	sp, #16
 800e8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8e6:	4835      	ldr	r0, [pc, #212]	; (800e9bc <_printf_i+0x244>)
 800e8e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e8ec:	6829      	ldr	r1, [r5, #0]
 800e8ee:	6823      	ldr	r3, [r4, #0]
 800e8f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800e8f4:	6029      	str	r1, [r5, #0]
 800e8f6:	061d      	lsls	r5, r3, #24
 800e8f8:	d514      	bpl.n	800e924 <_printf_i+0x1ac>
 800e8fa:	07df      	lsls	r7, r3, #31
 800e8fc:	bf44      	itt	mi
 800e8fe:	f043 0320 	orrmi.w	r3, r3, #32
 800e902:	6023      	strmi	r3, [r4, #0]
 800e904:	b91e      	cbnz	r6, 800e90e <_printf_i+0x196>
 800e906:	6823      	ldr	r3, [r4, #0]
 800e908:	f023 0320 	bic.w	r3, r3, #32
 800e90c:	6023      	str	r3, [r4, #0]
 800e90e:	2310      	movs	r3, #16
 800e910:	e7b0      	b.n	800e874 <_printf_i+0xfc>
 800e912:	6823      	ldr	r3, [r4, #0]
 800e914:	f043 0320 	orr.w	r3, r3, #32
 800e918:	6023      	str	r3, [r4, #0]
 800e91a:	2378      	movs	r3, #120	; 0x78
 800e91c:	4828      	ldr	r0, [pc, #160]	; (800e9c0 <_printf_i+0x248>)
 800e91e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e922:	e7e3      	b.n	800e8ec <_printf_i+0x174>
 800e924:	0659      	lsls	r1, r3, #25
 800e926:	bf48      	it	mi
 800e928:	b2b6      	uxthmi	r6, r6
 800e92a:	e7e6      	b.n	800e8fa <_printf_i+0x182>
 800e92c:	4615      	mov	r5, r2
 800e92e:	e7bb      	b.n	800e8a8 <_printf_i+0x130>
 800e930:	682b      	ldr	r3, [r5, #0]
 800e932:	6826      	ldr	r6, [r4, #0]
 800e934:	6961      	ldr	r1, [r4, #20]
 800e936:	1d18      	adds	r0, r3, #4
 800e938:	6028      	str	r0, [r5, #0]
 800e93a:	0635      	lsls	r5, r6, #24
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	d501      	bpl.n	800e944 <_printf_i+0x1cc>
 800e940:	6019      	str	r1, [r3, #0]
 800e942:	e002      	b.n	800e94a <_printf_i+0x1d2>
 800e944:	0670      	lsls	r0, r6, #25
 800e946:	d5fb      	bpl.n	800e940 <_printf_i+0x1c8>
 800e948:	8019      	strh	r1, [r3, #0]
 800e94a:	2300      	movs	r3, #0
 800e94c:	6123      	str	r3, [r4, #16]
 800e94e:	4615      	mov	r5, r2
 800e950:	e7ba      	b.n	800e8c8 <_printf_i+0x150>
 800e952:	682b      	ldr	r3, [r5, #0]
 800e954:	1d1a      	adds	r2, r3, #4
 800e956:	602a      	str	r2, [r5, #0]
 800e958:	681d      	ldr	r5, [r3, #0]
 800e95a:	6862      	ldr	r2, [r4, #4]
 800e95c:	2100      	movs	r1, #0
 800e95e:	4628      	mov	r0, r5
 800e960:	f7f1 fcc6 	bl	80002f0 <memchr>
 800e964:	b108      	cbz	r0, 800e96a <_printf_i+0x1f2>
 800e966:	1b40      	subs	r0, r0, r5
 800e968:	6060      	str	r0, [r4, #4]
 800e96a:	6863      	ldr	r3, [r4, #4]
 800e96c:	6123      	str	r3, [r4, #16]
 800e96e:	2300      	movs	r3, #0
 800e970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e974:	e7a8      	b.n	800e8c8 <_printf_i+0x150>
 800e976:	6923      	ldr	r3, [r4, #16]
 800e978:	462a      	mov	r2, r5
 800e97a:	4649      	mov	r1, r9
 800e97c:	4640      	mov	r0, r8
 800e97e:	47d0      	blx	sl
 800e980:	3001      	adds	r0, #1
 800e982:	d0ab      	beq.n	800e8dc <_printf_i+0x164>
 800e984:	6823      	ldr	r3, [r4, #0]
 800e986:	079b      	lsls	r3, r3, #30
 800e988:	d413      	bmi.n	800e9b2 <_printf_i+0x23a>
 800e98a:	68e0      	ldr	r0, [r4, #12]
 800e98c:	9b03      	ldr	r3, [sp, #12]
 800e98e:	4298      	cmp	r0, r3
 800e990:	bfb8      	it	lt
 800e992:	4618      	movlt	r0, r3
 800e994:	e7a4      	b.n	800e8e0 <_printf_i+0x168>
 800e996:	2301      	movs	r3, #1
 800e998:	4632      	mov	r2, r6
 800e99a:	4649      	mov	r1, r9
 800e99c:	4640      	mov	r0, r8
 800e99e:	47d0      	blx	sl
 800e9a0:	3001      	adds	r0, #1
 800e9a2:	d09b      	beq.n	800e8dc <_printf_i+0x164>
 800e9a4:	3501      	adds	r5, #1
 800e9a6:	68e3      	ldr	r3, [r4, #12]
 800e9a8:	9903      	ldr	r1, [sp, #12]
 800e9aa:	1a5b      	subs	r3, r3, r1
 800e9ac:	42ab      	cmp	r3, r5
 800e9ae:	dcf2      	bgt.n	800e996 <_printf_i+0x21e>
 800e9b0:	e7eb      	b.n	800e98a <_printf_i+0x212>
 800e9b2:	2500      	movs	r5, #0
 800e9b4:	f104 0619 	add.w	r6, r4, #25
 800e9b8:	e7f5      	b.n	800e9a6 <_printf_i+0x22e>
 800e9ba:	bf00      	nop
 800e9bc:	080123fe 	.word	0x080123fe
 800e9c0:	0801240f 	.word	0x0801240f

0800e9c4 <iprintf>:
 800e9c4:	b40f      	push	{r0, r1, r2, r3}
 800e9c6:	4b0a      	ldr	r3, [pc, #40]	; (800e9f0 <iprintf+0x2c>)
 800e9c8:	b513      	push	{r0, r1, r4, lr}
 800e9ca:	681c      	ldr	r4, [r3, #0]
 800e9cc:	b124      	cbz	r4, 800e9d8 <iprintf+0x14>
 800e9ce:	69a3      	ldr	r3, [r4, #24]
 800e9d0:	b913      	cbnz	r3, 800e9d8 <iprintf+0x14>
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	f7ff f9e8 	bl	800dda8 <__sinit>
 800e9d8:	ab05      	add	r3, sp, #20
 800e9da:	9a04      	ldr	r2, [sp, #16]
 800e9dc:	68a1      	ldr	r1, [r4, #8]
 800e9de:	9301      	str	r3, [sp, #4]
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	f001 fd93 	bl	801050c <_vfiprintf_r>
 800e9e6:	b002      	add	sp, #8
 800e9e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9ec:	b004      	add	sp, #16
 800e9ee:	4770      	bx	lr
 800e9f0:	24000014 	.word	0x24000014

0800e9f4 <_puts_r>:
 800e9f4:	b570      	push	{r4, r5, r6, lr}
 800e9f6:	460e      	mov	r6, r1
 800e9f8:	4605      	mov	r5, r0
 800e9fa:	b118      	cbz	r0, 800ea04 <_puts_r+0x10>
 800e9fc:	6983      	ldr	r3, [r0, #24]
 800e9fe:	b90b      	cbnz	r3, 800ea04 <_puts_r+0x10>
 800ea00:	f7ff f9d2 	bl	800dda8 <__sinit>
 800ea04:	69ab      	ldr	r3, [r5, #24]
 800ea06:	68ac      	ldr	r4, [r5, #8]
 800ea08:	b913      	cbnz	r3, 800ea10 <_puts_r+0x1c>
 800ea0a:	4628      	mov	r0, r5
 800ea0c:	f7ff f9cc 	bl	800dda8 <__sinit>
 800ea10:	4b2c      	ldr	r3, [pc, #176]	; (800eac4 <_puts_r+0xd0>)
 800ea12:	429c      	cmp	r4, r3
 800ea14:	d120      	bne.n	800ea58 <_puts_r+0x64>
 800ea16:	686c      	ldr	r4, [r5, #4]
 800ea18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea1a:	07db      	lsls	r3, r3, #31
 800ea1c:	d405      	bmi.n	800ea2a <_puts_r+0x36>
 800ea1e:	89a3      	ldrh	r3, [r4, #12]
 800ea20:	0598      	lsls	r0, r3, #22
 800ea22:	d402      	bmi.n	800ea2a <_puts_r+0x36>
 800ea24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea26:	f7ff fa82 	bl	800df2e <__retarget_lock_acquire_recursive>
 800ea2a:	89a3      	ldrh	r3, [r4, #12]
 800ea2c:	0719      	lsls	r1, r3, #28
 800ea2e:	d51d      	bpl.n	800ea6c <_puts_r+0x78>
 800ea30:	6923      	ldr	r3, [r4, #16]
 800ea32:	b1db      	cbz	r3, 800ea6c <_puts_r+0x78>
 800ea34:	3e01      	subs	r6, #1
 800ea36:	68a3      	ldr	r3, [r4, #8]
 800ea38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	60a3      	str	r3, [r4, #8]
 800ea40:	bb39      	cbnz	r1, 800ea92 <_puts_r+0x9e>
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	da38      	bge.n	800eab8 <_puts_r+0xc4>
 800ea46:	4622      	mov	r2, r4
 800ea48:	210a      	movs	r1, #10
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	f000 f944 	bl	800ecd8 <__swbuf_r>
 800ea50:	3001      	adds	r0, #1
 800ea52:	d011      	beq.n	800ea78 <_puts_r+0x84>
 800ea54:	250a      	movs	r5, #10
 800ea56:	e011      	b.n	800ea7c <_puts_r+0x88>
 800ea58:	4b1b      	ldr	r3, [pc, #108]	; (800eac8 <_puts_r+0xd4>)
 800ea5a:	429c      	cmp	r4, r3
 800ea5c:	d101      	bne.n	800ea62 <_puts_r+0x6e>
 800ea5e:	68ac      	ldr	r4, [r5, #8]
 800ea60:	e7da      	b.n	800ea18 <_puts_r+0x24>
 800ea62:	4b1a      	ldr	r3, [pc, #104]	; (800eacc <_puts_r+0xd8>)
 800ea64:	429c      	cmp	r4, r3
 800ea66:	bf08      	it	eq
 800ea68:	68ec      	ldreq	r4, [r5, #12]
 800ea6a:	e7d5      	b.n	800ea18 <_puts_r+0x24>
 800ea6c:	4621      	mov	r1, r4
 800ea6e:	4628      	mov	r0, r5
 800ea70:	f000 f996 	bl	800eda0 <__swsetup_r>
 800ea74:	2800      	cmp	r0, #0
 800ea76:	d0dd      	beq.n	800ea34 <_puts_r+0x40>
 800ea78:	f04f 35ff 	mov.w	r5, #4294967295
 800ea7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea7e:	07da      	lsls	r2, r3, #31
 800ea80:	d405      	bmi.n	800ea8e <_puts_r+0x9a>
 800ea82:	89a3      	ldrh	r3, [r4, #12]
 800ea84:	059b      	lsls	r3, r3, #22
 800ea86:	d402      	bmi.n	800ea8e <_puts_r+0x9a>
 800ea88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea8a:	f7ff fa51 	bl	800df30 <__retarget_lock_release_recursive>
 800ea8e:	4628      	mov	r0, r5
 800ea90:	bd70      	pop	{r4, r5, r6, pc}
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	da04      	bge.n	800eaa0 <_puts_r+0xac>
 800ea96:	69a2      	ldr	r2, [r4, #24]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	dc06      	bgt.n	800eaaa <_puts_r+0xb6>
 800ea9c:	290a      	cmp	r1, #10
 800ea9e:	d004      	beq.n	800eaaa <_puts_r+0xb6>
 800eaa0:	6823      	ldr	r3, [r4, #0]
 800eaa2:	1c5a      	adds	r2, r3, #1
 800eaa4:	6022      	str	r2, [r4, #0]
 800eaa6:	7019      	strb	r1, [r3, #0]
 800eaa8:	e7c5      	b.n	800ea36 <_puts_r+0x42>
 800eaaa:	4622      	mov	r2, r4
 800eaac:	4628      	mov	r0, r5
 800eaae:	f000 f913 	bl	800ecd8 <__swbuf_r>
 800eab2:	3001      	adds	r0, #1
 800eab4:	d1bf      	bne.n	800ea36 <_puts_r+0x42>
 800eab6:	e7df      	b.n	800ea78 <_puts_r+0x84>
 800eab8:	6823      	ldr	r3, [r4, #0]
 800eaba:	250a      	movs	r5, #10
 800eabc:	1c5a      	adds	r2, r3, #1
 800eabe:	6022      	str	r2, [r4, #0]
 800eac0:	701d      	strb	r5, [r3, #0]
 800eac2:	e7db      	b.n	800ea7c <_puts_r+0x88>
 800eac4:	080123a8 	.word	0x080123a8
 800eac8:	080123c8 	.word	0x080123c8
 800eacc:	08012388 	.word	0x08012388

0800ead0 <puts>:
 800ead0:	4b02      	ldr	r3, [pc, #8]	; (800eadc <puts+0xc>)
 800ead2:	4601      	mov	r1, r0
 800ead4:	6818      	ldr	r0, [r3, #0]
 800ead6:	f7ff bf8d 	b.w	800e9f4 <_puts_r>
 800eada:	bf00      	nop
 800eadc:	24000014 	.word	0x24000014

0800eae0 <rand>:
 800eae0:	4b16      	ldr	r3, [pc, #88]	; (800eb3c <rand+0x5c>)
 800eae2:	b510      	push	{r4, lr}
 800eae4:	681c      	ldr	r4, [r3, #0]
 800eae6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eae8:	b9b3      	cbnz	r3, 800eb18 <rand+0x38>
 800eaea:	2018      	movs	r0, #24
 800eaec:	f7ff fa22 	bl	800df34 <malloc>
 800eaf0:	63a0      	str	r0, [r4, #56]	; 0x38
 800eaf2:	b928      	cbnz	r0, 800eb00 <rand+0x20>
 800eaf4:	4602      	mov	r2, r0
 800eaf6:	4b12      	ldr	r3, [pc, #72]	; (800eb40 <rand+0x60>)
 800eaf8:	4812      	ldr	r0, [pc, #72]	; (800eb44 <rand+0x64>)
 800eafa:	214e      	movs	r1, #78	; 0x4e
 800eafc:	f000 f9be 	bl	800ee7c <__assert_func>
 800eb00:	4a11      	ldr	r2, [pc, #68]	; (800eb48 <rand+0x68>)
 800eb02:	4b12      	ldr	r3, [pc, #72]	; (800eb4c <rand+0x6c>)
 800eb04:	e9c0 2300 	strd	r2, r3, [r0]
 800eb08:	4b11      	ldr	r3, [pc, #68]	; (800eb50 <rand+0x70>)
 800eb0a:	6083      	str	r3, [r0, #8]
 800eb0c:	230b      	movs	r3, #11
 800eb0e:	8183      	strh	r3, [r0, #12]
 800eb10:	2201      	movs	r2, #1
 800eb12:	2300      	movs	r3, #0
 800eb14:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800eb18:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800eb1a:	4a0e      	ldr	r2, [pc, #56]	; (800eb54 <rand+0x74>)
 800eb1c:	6920      	ldr	r0, [r4, #16]
 800eb1e:	6963      	ldr	r3, [r4, #20]
 800eb20:	490d      	ldr	r1, [pc, #52]	; (800eb58 <rand+0x78>)
 800eb22:	4342      	muls	r2, r0
 800eb24:	fb01 2203 	mla	r2, r1, r3, r2
 800eb28:	fba0 0101 	umull	r0, r1, r0, r1
 800eb2c:	1c43      	adds	r3, r0, #1
 800eb2e:	eb42 0001 	adc.w	r0, r2, r1
 800eb32:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800eb36:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800eb3a:	bd10      	pop	{r4, pc}
 800eb3c:	24000014 	.word	0x24000014
 800eb40:	08012420 	.word	0x08012420
 800eb44:	08012437 	.word	0x08012437
 800eb48:	abcd330e 	.word	0xabcd330e
 800eb4c:	e66d1234 	.word	0xe66d1234
 800eb50:	0005deec 	.word	0x0005deec
 800eb54:	5851f42d 	.word	0x5851f42d
 800eb58:	4c957f2d 	.word	0x4c957f2d

0800eb5c <cleanup_glue>:
 800eb5c:	b538      	push	{r3, r4, r5, lr}
 800eb5e:	460c      	mov	r4, r1
 800eb60:	6809      	ldr	r1, [r1, #0]
 800eb62:	4605      	mov	r5, r0
 800eb64:	b109      	cbz	r1, 800eb6a <cleanup_glue+0xe>
 800eb66:	f7ff fff9 	bl	800eb5c <cleanup_glue>
 800eb6a:	4621      	mov	r1, r4
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb72:	f7ff ba05 	b.w	800df80 <_free_r>
	...

0800eb78 <_reclaim_reent>:
 800eb78:	4b2c      	ldr	r3, [pc, #176]	; (800ec2c <_reclaim_reent+0xb4>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4283      	cmp	r3, r0
 800eb7e:	b570      	push	{r4, r5, r6, lr}
 800eb80:	4604      	mov	r4, r0
 800eb82:	d051      	beq.n	800ec28 <_reclaim_reent+0xb0>
 800eb84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eb86:	b143      	cbz	r3, 800eb9a <_reclaim_reent+0x22>
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d14a      	bne.n	800ec24 <_reclaim_reent+0xac>
 800eb8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb90:	6819      	ldr	r1, [r3, #0]
 800eb92:	b111      	cbz	r1, 800eb9a <_reclaim_reent+0x22>
 800eb94:	4620      	mov	r0, r4
 800eb96:	f7ff f9f3 	bl	800df80 <_free_r>
 800eb9a:	6961      	ldr	r1, [r4, #20]
 800eb9c:	b111      	cbz	r1, 800eba4 <_reclaim_reent+0x2c>
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f7ff f9ee 	bl	800df80 <_free_r>
 800eba4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eba6:	b111      	cbz	r1, 800ebae <_reclaim_reent+0x36>
 800eba8:	4620      	mov	r0, r4
 800ebaa:	f7ff f9e9 	bl	800df80 <_free_r>
 800ebae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ebb0:	b111      	cbz	r1, 800ebb8 <_reclaim_reent+0x40>
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	f7ff f9e4 	bl	800df80 <_free_r>
 800ebb8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ebba:	b111      	cbz	r1, 800ebc2 <_reclaim_reent+0x4a>
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	f7ff f9df 	bl	800df80 <_free_r>
 800ebc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ebc4:	b111      	cbz	r1, 800ebcc <_reclaim_reent+0x54>
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	f7ff f9da 	bl	800df80 <_free_r>
 800ebcc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ebce:	b111      	cbz	r1, 800ebd6 <_reclaim_reent+0x5e>
 800ebd0:	4620      	mov	r0, r4
 800ebd2:	f7ff f9d5 	bl	800df80 <_free_r>
 800ebd6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ebd8:	b111      	cbz	r1, 800ebe0 <_reclaim_reent+0x68>
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f7ff f9d0 	bl	800df80 <_free_r>
 800ebe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebe2:	b111      	cbz	r1, 800ebea <_reclaim_reent+0x72>
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	f7ff f9cb 	bl	800df80 <_free_r>
 800ebea:	69a3      	ldr	r3, [r4, #24]
 800ebec:	b1e3      	cbz	r3, 800ec28 <_reclaim_reent+0xb0>
 800ebee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	4798      	blx	r3
 800ebf4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ebf6:	b1b9      	cbz	r1, 800ec28 <_reclaim_reent+0xb0>
 800ebf8:	4620      	mov	r0, r4
 800ebfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebfe:	f7ff bfad 	b.w	800eb5c <cleanup_glue>
 800ec02:	5949      	ldr	r1, [r1, r5]
 800ec04:	b941      	cbnz	r1, 800ec18 <_reclaim_reent+0xa0>
 800ec06:	3504      	adds	r5, #4
 800ec08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec0a:	2d80      	cmp	r5, #128	; 0x80
 800ec0c:	68d9      	ldr	r1, [r3, #12]
 800ec0e:	d1f8      	bne.n	800ec02 <_reclaim_reent+0x8a>
 800ec10:	4620      	mov	r0, r4
 800ec12:	f7ff f9b5 	bl	800df80 <_free_r>
 800ec16:	e7ba      	b.n	800eb8e <_reclaim_reent+0x16>
 800ec18:	680e      	ldr	r6, [r1, #0]
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	f7ff f9b0 	bl	800df80 <_free_r>
 800ec20:	4631      	mov	r1, r6
 800ec22:	e7ef      	b.n	800ec04 <_reclaim_reent+0x8c>
 800ec24:	2500      	movs	r5, #0
 800ec26:	e7ef      	b.n	800ec08 <_reclaim_reent+0x90>
 800ec28:	bd70      	pop	{r4, r5, r6, pc}
 800ec2a:	bf00      	nop
 800ec2c:	24000014 	.word	0x24000014

0800ec30 <_sbrk_r>:
 800ec30:	b538      	push	{r3, r4, r5, lr}
 800ec32:	4d06      	ldr	r5, [pc, #24]	; (800ec4c <_sbrk_r+0x1c>)
 800ec34:	2300      	movs	r3, #0
 800ec36:	4604      	mov	r4, r0
 800ec38:	4608      	mov	r0, r1
 800ec3a:	602b      	str	r3, [r5, #0]
 800ec3c:	f7f3 fffc 	bl	8002c38 <_sbrk>
 800ec40:	1c43      	adds	r3, r0, #1
 800ec42:	d102      	bne.n	800ec4a <_sbrk_r+0x1a>
 800ec44:	682b      	ldr	r3, [r5, #0]
 800ec46:	b103      	cbz	r3, 800ec4a <_sbrk_r+0x1a>
 800ec48:	6023      	str	r3, [r4, #0]
 800ec4a:	bd38      	pop	{r3, r4, r5, pc}
 800ec4c:	24005220 	.word	0x24005220

0800ec50 <__sread>:
 800ec50:	b510      	push	{r4, lr}
 800ec52:	460c      	mov	r4, r1
 800ec54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec58:	f001 fd88 	bl	801076c <_read_r>
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	bfab      	itete	ge
 800ec60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec62:	89a3      	ldrhlt	r3, [r4, #12]
 800ec64:	181b      	addge	r3, r3, r0
 800ec66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec6a:	bfac      	ite	ge
 800ec6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec6e:	81a3      	strhlt	r3, [r4, #12]
 800ec70:	bd10      	pop	{r4, pc}

0800ec72 <__swrite>:
 800ec72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec76:	461f      	mov	r7, r3
 800ec78:	898b      	ldrh	r3, [r1, #12]
 800ec7a:	05db      	lsls	r3, r3, #23
 800ec7c:	4605      	mov	r5, r0
 800ec7e:	460c      	mov	r4, r1
 800ec80:	4616      	mov	r6, r2
 800ec82:	d505      	bpl.n	800ec90 <__swrite+0x1e>
 800ec84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec88:	2302      	movs	r3, #2
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	f000 fff6 	bl	800fc7c <_lseek_r>
 800ec90:	89a3      	ldrh	r3, [r4, #12]
 800ec92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec9a:	81a3      	strh	r3, [r4, #12]
 800ec9c:	4632      	mov	r2, r6
 800ec9e:	463b      	mov	r3, r7
 800eca0:	4628      	mov	r0, r5
 800eca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eca6:	f000 b869 	b.w	800ed7c <_write_r>

0800ecaa <__sseek>:
 800ecaa:	b510      	push	{r4, lr}
 800ecac:	460c      	mov	r4, r1
 800ecae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecb2:	f000 ffe3 	bl	800fc7c <_lseek_r>
 800ecb6:	1c43      	adds	r3, r0, #1
 800ecb8:	89a3      	ldrh	r3, [r4, #12]
 800ecba:	bf15      	itete	ne
 800ecbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800ecbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ecc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ecc6:	81a3      	strheq	r3, [r4, #12]
 800ecc8:	bf18      	it	ne
 800ecca:	81a3      	strhne	r3, [r4, #12]
 800eccc:	bd10      	pop	{r4, pc}

0800ecce <__sclose>:
 800ecce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecd2:	f000 b8f1 	b.w	800eeb8 <_close_r>
	...

0800ecd8 <__swbuf_r>:
 800ecd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecda:	460e      	mov	r6, r1
 800ecdc:	4614      	mov	r4, r2
 800ecde:	4605      	mov	r5, r0
 800ece0:	b118      	cbz	r0, 800ecea <__swbuf_r+0x12>
 800ece2:	6983      	ldr	r3, [r0, #24]
 800ece4:	b90b      	cbnz	r3, 800ecea <__swbuf_r+0x12>
 800ece6:	f7ff f85f 	bl	800dda8 <__sinit>
 800ecea:	4b21      	ldr	r3, [pc, #132]	; (800ed70 <__swbuf_r+0x98>)
 800ecec:	429c      	cmp	r4, r3
 800ecee:	d12b      	bne.n	800ed48 <__swbuf_r+0x70>
 800ecf0:	686c      	ldr	r4, [r5, #4]
 800ecf2:	69a3      	ldr	r3, [r4, #24]
 800ecf4:	60a3      	str	r3, [r4, #8]
 800ecf6:	89a3      	ldrh	r3, [r4, #12]
 800ecf8:	071a      	lsls	r2, r3, #28
 800ecfa:	d52f      	bpl.n	800ed5c <__swbuf_r+0x84>
 800ecfc:	6923      	ldr	r3, [r4, #16]
 800ecfe:	b36b      	cbz	r3, 800ed5c <__swbuf_r+0x84>
 800ed00:	6923      	ldr	r3, [r4, #16]
 800ed02:	6820      	ldr	r0, [r4, #0]
 800ed04:	1ac0      	subs	r0, r0, r3
 800ed06:	6963      	ldr	r3, [r4, #20]
 800ed08:	b2f6      	uxtb	r6, r6
 800ed0a:	4283      	cmp	r3, r0
 800ed0c:	4637      	mov	r7, r6
 800ed0e:	dc04      	bgt.n	800ed1a <__swbuf_r+0x42>
 800ed10:	4621      	mov	r1, r4
 800ed12:	4628      	mov	r0, r5
 800ed14:	f000 ff60 	bl	800fbd8 <_fflush_r>
 800ed18:	bb30      	cbnz	r0, 800ed68 <__swbuf_r+0x90>
 800ed1a:	68a3      	ldr	r3, [r4, #8]
 800ed1c:	3b01      	subs	r3, #1
 800ed1e:	60a3      	str	r3, [r4, #8]
 800ed20:	6823      	ldr	r3, [r4, #0]
 800ed22:	1c5a      	adds	r2, r3, #1
 800ed24:	6022      	str	r2, [r4, #0]
 800ed26:	701e      	strb	r6, [r3, #0]
 800ed28:	6963      	ldr	r3, [r4, #20]
 800ed2a:	3001      	adds	r0, #1
 800ed2c:	4283      	cmp	r3, r0
 800ed2e:	d004      	beq.n	800ed3a <__swbuf_r+0x62>
 800ed30:	89a3      	ldrh	r3, [r4, #12]
 800ed32:	07db      	lsls	r3, r3, #31
 800ed34:	d506      	bpl.n	800ed44 <__swbuf_r+0x6c>
 800ed36:	2e0a      	cmp	r6, #10
 800ed38:	d104      	bne.n	800ed44 <__swbuf_r+0x6c>
 800ed3a:	4621      	mov	r1, r4
 800ed3c:	4628      	mov	r0, r5
 800ed3e:	f000 ff4b 	bl	800fbd8 <_fflush_r>
 800ed42:	b988      	cbnz	r0, 800ed68 <__swbuf_r+0x90>
 800ed44:	4638      	mov	r0, r7
 800ed46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed48:	4b0a      	ldr	r3, [pc, #40]	; (800ed74 <__swbuf_r+0x9c>)
 800ed4a:	429c      	cmp	r4, r3
 800ed4c:	d101      	bne.n	800ed52 <__swbuf_r+0x7a>
 800ed4e:	68ac      	ldr	r4, [r5, #8]
 800ed50:	e7cf      	b.n	800ecf2 <__swbuf_r+0x1a>
 800ed52:	4b09      	ldr	r3, [pc, #36]	; (800ed78 <__swbuf_r+0xa0>)
 800ed54:	429c      	cmp	r4, r3
 800ed56:	bf08      	it	eq
 800ed58:	68ec      	ldreq	r4, [r5, #12]
 800ed5a:	e7ca      	b.n	800ecf2 <__swbuf_r+0x1a>
 800ed5c:	4621      	mov	r1, r4
 800ed5e:	4628      	mov	r0, r5
 800ed60:	f000 f81e 	bl	800eda0 <__swsetup_r>
 800ed64:	2800      	cmp	r0, #0
 800ed66:	d0cb      	beq.n	800ed00 <__swbuf_r+0x28>
 800ed68:	f04f 37ff 	mov.w	r7, #4294967295
 800ed6c:	e7ea      	b.n	800ed44 <__swbuf_r+0x6c>
 800ed6e:	bf00      	nop
 800ed70:	080123a8 	.word	0x080123a8
 800ed74:	080123c8 	.word	0x080123c8
 800ed78:	08012388 	.word	0x08012388

0800ed7c <_write_r>:
 800ed7c:	b538      	push	{r3, r4, r5, lr}
 800ed7e:	4d07      	ldr	r5, [pc, #28]	; (800ed9c <_write_r+0x20>)
 800ed80:	4604      	mov	r4, r0
 800ed82:	4608      	mov	r0, r1
 800ed84:	4611      	mov	r1, r2
 800ed86:	2200      	movs	r2, #0
 800ed88:	602a      	str	r2, [r5, #0]
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	f7f3 fd22 	bl	80027d4 <_write>
 800ed90:	1c43      	adds	r3, r0, #1
 800ed92:	d102      	bne.n	800ed9a <_write_r+0x1e>
 800ed94:	682b      	ldr	r3, [r5, #0]
 800ed96:	b103      	cbz	r3, 800ed9a <_write_r+0x1e>
 800ed98:	6023      	str	r3, [r4, #0]
 800ed9a:	bd38      	pop	{r3, r4, r5, pc}
 800ed9c:	24005220 	.word	0x24005220

0800eda0 <__swsetup_r>:
 800eda0:	4b32      	ldr	r3, [pc, #200]	; (800ee6c <__swsetup_r+0xcc>)
 800eda2:	b570      	push	{r4, r5, r6, lr}
 800eda4:	681d      	ldr	r5, [r3, #0]
 800eda6:	4606      	mov	r6, r0
 800eda8:	460c      	mov	r4, r1
 800edaa:	b125      	cbz	r5, 800edb6 <__swsetup_r+0x16>
 800edac:	69ab      	ldr	r3, [r5, #24]
 800edae:	b913      	cbnz	r3, 800edb6 <__swsetup_r+0x16>
 800edb0:	4628      	mov	r0, r5
 800edb2:	f7fe fff9 	bl	800dda8 <__sinit>
 800edb6:	4b2e      	ldr	r3, [pc, #184]	; (800ee70 <__swsetup_r+0xd0>)
 800edb8:	429c      	cmp	r4, r3
 800edba:	d10f      	bne.n	800eddc <__swsetup_r+0x3c>
 800edbc:	686c      	ldr	r4, [r5, #4]
 800edbe:	89a3      	ldrh	r3, [r4, #12]
 800edc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edc4:	0719      	lsls	r1, r3, #28
 800edc6:	d42c      	bmi.n	800ee22 <__swsetup_r+0x82>
 800edc8:	06dd      	lsls	r5, r3, #27
 800edca:	d411      	bmi.n	800edf0 <__swsetup_r+0x50>
 800edcc:	2309      	movs	r3, #9
 800edce:	6033      	str	r3, [r6, #0]
 800edd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800edd4:	81a3      	strh	r3, [r4, #12]
 800edd6:	f04f 30ff 	mov.w	r0, #4294967295
 800edda:	e03e      	b.n	800ee5a <__swsetup_r+0xba>
 800eddc:	4b25      	ldr	r3, [pc, #148]	; (800ee74 <__swsetup_r+0xd4>)
 800edde:	429c      	cmp	r4, r3
 800ede0:	d101      	bne.n	800ede6 <__swsetup_r+0x46>
 800ede2:	68ac      	ldr	r4, [r5, #8]
 800ede4:	e7eb      	b.n	800edbe <__swsetup_r+0x1e>
 800ede6:	4b24      	ldr	r3, [pc, #144]	; (800ee78 <__swsetup_r+0xd8>)
 800ede8:	429c      	cmp	r4, r3
 800edea:	bf08      	it	eq
 800edec:	68ec      	ldreq	r4, [r5, #12]
 800edee:	e7e6      	b.n	800edbe <__swsetup_r+0x1e>
 800edf0:	0758      	lsls	r0, r3, #29
 800edf2:	d512      	bpl.n	800ee1a <__swsetup_r+0x7a>
 800edf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edf6:	b141      	cbz	r1, 800ee0a <__swsetup_r+0x6a>
 800edf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edfc:	4299      	cmp	r1, r3
 800edfe:	d002      	beq.n	800ee06 <__swsetup_r+0x66>
 800ee00:	4630      	mov	r0, r6
 800ee02:	f7ff f8bd 	bl	800df80 <_free_r>
 800ee06:	2300      	movs	r3, #0
 800ee08:	6363      	str	r3, [r4, #52]	; 0x34
 800ee0a:	89a3      	ldrh	r3, [r4, #12]
 800ee0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee10:	81a3      	strh	r3, [r4, #12]
 800ee12:	2300      	movs	r3, #0
 800ee14:	6063      	str	r3, [r4, #4]
 800ee16:	6923      	ldr	r3, [r4, #16]
 800ee18:	6023      	str	r3, [r4, #0]
 800ee1a:	89a3      	ldrh	r3, [r4, #12]
 800ee1c:	f043 0308 	orr.w	r3, r3, #8
 800ee20:	81a3      	strh	r3, [r4, #12]
 800ee22:	6923      	ldr	r3, [r4, #16]
 800ee24:	b94b      	cbnz	r3, 800ee3a <__swsetup_r+0x9a>
 800ee26:	89a3      	ldrh	r3, [r4, #12]
 800ee28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee30:	d003      	beq.n	800ee3a <__swsetup_r+0x9a>
 800ee32:	4621      	mov	r1, r4
 800ee34:	4630      	mov	r0, r6
 800ee36:	f000 ff59 	bl	800fcec <__smakebuf_r>
 800ee3a:	89a0      	ldrh	r0, [r4, #12]
 800ee3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee40:	f010 0301 	ands.w	r3, r0, #1
 800ee44:	d00a      	beq.n	800ee5c <__swsetup_r+0xbc>
 800ee46:	2300      	movs	r3, #0
 800ee48:	60a3      	str	r3, [r4, #8]
 800ee4a:	6963      	ldr	r3, [r4, #20]
 800ee4c:	425b      	negs	r3, r3
 800ee4e:	61a3      	str	r3, [r4, #24]
 800ee50:	6923      	ldr	r3, [r4, #16]
 800ee52:	b943      	cbnz	r3, 800ee66 <__swsetup_r+0xc6>
 800ee54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee58:	d1ba      	bne.n	800edd0 <__swsetup_r+0x30>
 800ee5a:	bd70      	pop	{r4, r5, r6, pc}
 800ee5c:	0781      	lsls	r1, r0, #30
 800ee5e:	bf58      	it	pl
 800ee60:	6963      	ldrpl	r3, [r4, #20]
 800ee62:	60a3      	str	r3, [r4, #8]
 800ee64:	e7f4      	b.n	800ee50 <__swsetup_r+0xb0>
 800ee66:	2000      	movs	r0, #0
 800ee68:	e7f7      	b.n	800ee5a <__swsetup_r+0xba>
 800ee6a:	bf00      	nop
 800ee6c:	24000014 	.word	0x24000014
 800ee70:	080123a8 	.word	0x080123a8
 800ee74:	080123c8 	.word	0x080123c8
 800ee78:	08012388 	.word	0x08012388

0800ee7c <__assert_func>:
 800ee7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee7e:	4614      	mov	r4, r2
 800ee80:	461a      	mov	r2, r3
 800ee82:	4b09      	ldr	r3, [pc, #36]	; (800eea8 <__assert_func+0x2c>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	4605      	mov	r5, r0
 800ee88:	68d8      	ldr	r0, [r3, #12]
 800ee8a:	b14c      	cbz	r4, 800eea0 <__assert_func+0x24>
 800ee8c:	4b07      	ldr	r3, [pc, #28]	; (800eeac <__assert_func+0x30>)
 800ee8e:	9100      	str	r1, [sp, #0]
 800ee90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee94:	4906      	ldr	r1, [pc, #24]	; (800eeb0 <__assert_func+0x34>)
 800ee96:	462b      	mov	r3, r5
 800ee98:	f000 feda 	bl	800fc50 <fiprintf>
 800ee9c:	f001 fc78 	bl	8010790 <abort>
 800eea0:	4b04      	ldr	r3, [pc, #16]	; (800eeb4 <__assert_func+0x38>)
 800eea2:	461c      	mov	r4, r3
 800eea4:	e7f3      	b.n	800ee8e <__assert_func+0x12>
 800eea6:	bf00      	nop
 800eea8:	24000014 	.word	0x24000014
 800eeac:	08012492 	.word	0x08012492
 800eeb0:	0801249f 	.word	0x0801249f
 800eeb4:	080124cd 	.word	0x080124cd

0800eeb8 <_close_r>:
 800eeb8:	b538      	push	{r3, r4, r5, lr}
 800eeba:	4d06      	ldr	r5, [pc, #24]	; (800eed4 <_close_r+0x1c>)
 800eebc:	2300      	movs	r3, #0
 800eebe:	4604      	mov	r4, r0
 800eec0:	4608      	mov	r0, r1
 800eec2:	602b      	str	r3, [r5, #0]
 800eec4:	f7f3 fe83 	bl	8002bce <_close>
 800eec8:	1c43      	adds	r3, r0, #1
 800eeca:	d102      	bne.n	800eed2 <_close_r+0x1a>
 800eecc:	682b      	ldr	r3, [r5, #0]
 800eece:	b103      	cbz	r3, 800eed2 <_close_r+0x1a>
 800eed0:	6023      	str	r3, [r4, #0]
 800eed2:	bd38      	pop	{r3, r4, r5, pc}
 800eed4:	24005220 	.word	0x24005220

0800eed8 <quorem>:
 800eed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eedc:	6903      	ldr	r3, [r0, #16]
 800eede:	690c      	ldr	r4, [r1, #16]
 800eee0:	42a3      	cmp	r3, r4
 800eee2:	4607      	mov	r7, r0
 800eee4:	f2c0 8081 	blt.w	800efea <quorem+0x112>
 800eee8:	3c01      	subs	r4, #1
 800eeea:	f101 0814 	add.w	r8, r1, #20
 800eeee:	f100 0514 	add.w	r5, r0, #20
 800eef2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eef6:	9301      	str	r3, [sp, #4]
 800eef8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eefc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef00:	3301      	adds	r3, #1
 800ef02:	429a      	cmp	r2, r3
 800ef04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ef08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef0c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef10:	d331      	bcc.n	800ef76 <quorem+0x9e>
 800ef12:	f04f 0e00 	mov.w	lr, #0
 800ef16:	4640      	mov	r0, r8
 800ef18:	46ac      	mov	ip, r5
 800ef1a:	46f2      	mov	sl, lr
 800ef1c:	f850 2b04 	ldr.w	r2, [r0], #4
 800ef20:	b293      	uxth	r3, r2
 800ef22:	fb06 e303 	mla	r3, r6, r3, lr
 800ef26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	ebaa 0303 	sub.w	r3, sl, r3
 800ef30:	f8dc a000 	ldr.w	sl, [ip]
 800ef34:	0c12      	lsrs	r2, r2, #16
 800ef36:	fa13 f38a 	uxtah	r3, r3, sl
 800ef3a:	fb06 e202 	mla	r2, r6, r2, lr
 800ef3e:	9300      	str	r3, [sp, #0]
 800ef40:	9b00      	ldr	r3, [sp, #0]
 800ef42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ef46:	b292      	uxth	r2, r2
 800ef48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ef4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef50:	f8bd 3000 	ldrh.w	r3, [sp]
 800ef54:	4581      	cmp	r9, r0
 800ef56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef5a:	f84c 3b04 	str.w	r3, [ip], #4
 800ef5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ef62:	d2db      	bcs.n	800ef1c <quorem+0x44>
 800ef64:	f855 300b 	ldr.w	r3, [r5, fp]
 800ef68:	b92b      	cbnz	r3, 800ef76 <quorem+0x9e>
 800ef6a:	9b01      	ldr	r3, [sp, #4]
 800ef6c:	3b04      	subs	r3, #4
 800ef6e:	429d      	cmp	r5, r3
 800ef70:	461a      	mov	r2, r3
 800ef72:	d32e      	bcc.n	800efd2 <quorem+0xfa>
 800ef74:	613c      	str	r4, [r7, #16]
 800ef76:	4638      	mov	r0, r7
 800ef78:	f001 f986 	bl	8010288 <__mcmp>
 800ef7c:	2800      	cmp	r0, #0
 800ef7e:	db24      	blt.n	800efca <quorem+0xf2>
 800ef80:	3601      	adds	r6, #1
 800ef82:	4628      	mov	r0, r5
 800ef84:	f04f 0c00 	mov.w	ip, #0
 800ef88:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef8c:	f8d0 e000 	ldr.w	lr, [r0]
 800ef90:	b293      	uxth	r3, r2
 800ef92:	ebac 0303 	sub.w	r3, ip, r3
 800ef96:	0c12      	lsrs	r2, r2, #16
 800ef98:	fa13 f38e 	uxtah	r3, r3, lr
 800ef9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800efa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efaa:	45c1      	cmp	r9, r8
 800efac:	f840 3b04 	str.w	r3, [r0], #4
 800efb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800efb4:	d2e8      	bcs.n	800ef88 <quorem+0xb0>
 800efb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efbe:	b922      	cbnz	r2, 800efca <quorem+0xf2>
 800efc0:	3b04      	subs	r3, #4
 800efc2:	429d      	cmp	r5, r3
 800efc4:	461a      	mov	r2, r3
 800efc6:	d30a      	bcc.n	800efde <quorem+0x106>
 800efc8:	613c      	str	r4, [r7, #16]
 800efca:	4630      	mov	r0, r6
 800efcc:	b003      	add	sp, #12
 800efce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efd2:	6812      	ldr	r2, [r2, #0]
 800efd4:	3b04      	subs	r3, #4
 800efd6:	2a00      	cmp	r2, #0
 800efd8:	d1cc      	bne.n	800ef74 <quorem+0x9c>
 800efda:	3c01      	subs	r4, #1
 800efdc:	e7c7      	b.n	800ef6e <quorem+0x96>
 800efde:	6812      	ldr	r2, [r2, #0]
 800efe0:	3b04      	subs	r3, #4
 800efe2:	2a00      	cmp	r2, #0
 800efe4:	d1f0      	bne.n	800efc8 <quorem+0xf0>
 800efe6:	3c01      	subs	r4, #1
 800efe8:	e7eb      	b.n	800efc2 <quorem+0xea>
 800efea:	2000      	movs	r0, #0
 800efec:	e7ee      	b.n	800efcc <quorem+0xf4>
	...

0800eff0 <_dtoa_r>:
 800eff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff4:	ed2d 8b02 	vpush	{d8}
 800eff8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800effa:	b091      	sub	sp, #68	; 0x44
 800effc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f000:	ec59 8b10 	vmov	r8, r9, d0
 800f004:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f006:	9106      	str	r1, [sp, #24]
 800f008:	4606      	mov	r6, r0
 800f00a:	9208      	str	r2, [sp, #32]
 800f00c:	930c      	str	r3, [sp, #48]	; 0x30
 800f00e:	b975      	cbnz	r5, 800f02e <_dtoa_r+0x3e>
 800f010:	2010      	movs	r0, #16
 800f012:	f7fe ff8f 	bl	800df34 <malloc>
 800f016:	4602      	mov	r2, r0
 800f018:	6270      	str	r0, [r6, #36]	; 0x24
 800f01a:	b920      	cbnz	r0, 800f026 <_dtoa_r+0x36>
 800f01c:	4baa      	ldr	r3, [pc, #680]	; (800f2c8 <_dtoa_r+0x2d8>)
 800f01e:	21ea      	movs	r1, #234	; 0xea
 800f020:	48aa      	ldr	r0, [pc, #680]	; (800f2cc <_dtoa_r+0x2dc>)
 800f022:	f7ff ff2b 	bl	800ee7c <__assert_func>
 800f026:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f02a:	6005      	str	r5, [r0, #0]
 800f02c:	60c5      	str	r5, [r0, #12]
 800f02e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f030:	6819      	ldr	r1, [r3, #0]
 800f032:	b151      	cbz	r1, 800f04a <_dtoa_r+0x5a>
 800f034:	685a      	ldr	r2, [r3, #4]
 800f036:	604a      	str	r2, [r1, #4]
 800f038:	2301      	movs	r3, #1
 800f03a:	4093      	lsls	r3, r2
 800f03c:	608b      	str	r3, [r1, #8]
 800f03e:	4630      	mov	r0, r6
 800f040:	f000 fee0 	bl	800fe04 <_Bfree>
 800f044:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f046:	2200      	movs	r2, #0
 800f048:	601a      	str	r2, [r3, #0]
 800f04a:	f1b9 0300 	subs.w	r3, r9, #0
 800f04e:	bfbb      	ittet	lt
 800f050:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f054:	9303      	strlt	r3, [sp, #12]
 800f056:	2300      	movge	r3, #0
 800f058:	2201      	movlt	r2, #1
 800f05a:	bfac      	ite	ge
 800f05c:	6023      	strge	r3, [r4, #0]
 800f05e:	6022      	strlt	r2, [r4, #0]
 800f060:	4b9b      	ldr	r3, [pc, #620]	; (800f2d0 <_dtoa_r+0x2e0>)
 800f062:	9c03      	ldr	r4, [sp, #12]
 800f064:	43a3      	bics	r3, r4
 800f066:	d11c      	bne.n	800f0a2 <_dtoa_r+0xb2>
 800f068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f06a:	f242 730f 	movw	r3, #9999	; 0x270f
 800f06e:	6013      	str	r3, [r2, #0]
 800f070:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800f074:	ea53 0308 	orrs.w	r3, r3, r8
 800f078:	f000 84fd 	beq.w	800fa76 <_dtoa_r+0xa86>
 800f07c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f07e:	b963      	cbnz	r3, 800f09a <_dtoa_r+0xaa>
 800f080:	4b94      	ldr	r3, [pc, #592]	; (800f2d4 <_dtoa_r+0x2e4>)
 800f082:	e01f      	b.n	800f0c4 <_dtoa_r+0xd4>
 800f084:	4b94      	ldr	r3, [pc, #592]	; (800f2d8 <_dtoa_r+0x2e8>)
 800f086:	9301      	str	r3, [sp, #4]
 800f088:	3308      	adds	r3, #8
 800f08a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f08c:	6013      	str	r3, [r2, #0]
 800f08e:	9801      	ldr	r0, [sp, #4]
 800f090:	b011      	add	sp, #68	; 0x44
 800f092:	ecbd 8b02 	vpop	{d8}
 800f096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f09a:	4b8e      	ldr	r3, [pc, #568]	; (800f2d4 <_dtoa_r+0x2e4>)
 800f09c:	9301      	str	r3, [sp, #4]
 800f09e:	3303      	adds	r3, #3
 800f0a0:	e7f3      	b.n	800f08a <_dtoa_r+0x9a>
 800f0a2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f0a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ae:	d10b      	bne.n	800f0c8 <_dtoa_r+0xd8>
 800f0b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	6013      	str	r3, [r2, #0]
 800f0b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	f000 84d9 	beq.w	800fa70 <_dtoa_r+0xa80>
 800f0be:	4887      	ldr	r0, [pc, #540]	; (800f2dc <_dtoa_r+0x2ec>)
 800f0c0:	6018      	str	r0, [r3, #0]
 800f0c2:	1e43      	subs	r3, r0, #1
 800f0c4:	9301      	str	r3, [sp, #4]
 800f0c6:	e7e2      	b.n	800f08e <_dtoa_r+0x9e>
 800f0c8:	a90f      	add	r1, sp, #60	; 0x3c
 800f0ca:	aa0e      	add	r2, sp, #56	; 0x38
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	eeb0 0b48 	vmov.f64	d0, d8
 800f0d2:	f001 f97f 	bl	80103d4 <__d2b>
 800f0d6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800f0da:	4605      	mov	r5, r0
 800f0dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f0de:	2900      	cmp	r1, #0
 800f0e0:	d046      	beq.n	800f170 <_dtoa_r+0x180>
 800f0e2:	ee18 4a90 	vmov	r4, s17
 800f0e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f0ea:	ec53 2b18 	vmov	r2, r3, d8
 800f0ee:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800f0f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f0f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f0fa:	2400      	movs	r4, #0
 800f0fc:	ec43 2b16 	vmov	d6, r2, r3
 800f100:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f104:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800f2b0 <_dtoa_r+0x2c0>
 800f108:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f10c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800f2b8 <_dtoa_r+0x2c8>
 800f110:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f114:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800f2c0 <_dtoa_r+0x2d0>
 800f118:	ee07 1a90 	vmov	s15, r1
 800f11c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f120:	eeb0 7b46 	vmov.f64	d7, d6
 800f124:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f128:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f12c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f134:	ee16 ba90 	vmov	fp, s13
 800f138:	940a      	str	r4, [sp, #40]	; 0x28
 800f13a:	d508      	bpl.n	800f14e <_dtoa_r+0x15e>
 800f13c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f140:	eeb4 6b47 	vcmp.f64	d6, d7
 800f144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f148:	bf18      	it	ne
 800f14a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f14e:	f1bb 0f16 	cmp.w	fp, #22
 800f152:	d82f      	bhi.n	800f1b4 <_dtoa_r+0x1c4>
 800f154:	4b62      	ldr	r3, [pc, #392]	; (800f2e0 <_dtoa_r+0x2f0>)
 800f156:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f15a:	ed93 7b00 	vldr	d7, [r3]
 800f15e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f166:	d501      	bpl.n	800f16c <_dtoa_r+0x17c>
 800f168:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f16c:	2300      	movs	r3, #0
 800f16e:	e022      	b.n	800f1b6 <_dtoa_r+0x1c6>
 800f170:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f172:	4401      	add	r1, r0
 800f174:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800f178:	2b20      	cmp	r3, #32
 800f17a:	bfc1      	itttt	gt
 800f17c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f180:	fa04 f303 	lslgt.w	r3, r4, r3
 800f184:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800f188:	fa28 f804 	lsrgt.w	r8, r8, r4
 800f18c:	bfd6      	itet	le
 800f18e:	f1c3 0320 	rsble	r3, r3, #32
 800f192:	ea43 0808 	orrgt.w	r8, r3, r8
 800f196:	fa08 f803 	lslle.w	r8, r8, r3
 800f19a:	ee07 8a90 	vmov	s15, r8
 800f19e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f1a2:	3901      	subs	r1, #1
 800f1a4:	ee17 4a90 	vmov	r4, s15
 800f1a8:	ec53 2b17 	vmov	r2, r3, d7
 800f1ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800f1b0:	2401      	movs	r4, #1
 800f1b2:	e7a3      	b.n	800f0fc <_dtoa_r+0x10c>
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1b8:	1a43      	subs	r3, r0, r1
 800f1ba:	1e5a      	subs	r2, r3, #1
 800f1bc:	bf45      	ittet	mi
 800f1be:	f1c3 0301 	rsbmi	r3, r3, #1
 800f1c2:	9304      	strmi	r3, [sp, #16]
 800f1c4:	2300      	movpl	r3, #0
 800f1c6:	2300      	movmi	r3, #0
 800f1c8:	9205      	str	r2, [sp, #20]
 800f1ca:	bf54      	ite	pl
 800f1cc:	9304      	strpl	r3, [sp, #16]
 800f1ce:	9305      	strmi	r3, [sp, #20]
 800f1d0:	f1bb 0f00 	cmp.w	fp, #0
 800f1d4:	db18      	blt.n	800f208 <_dtoa_r+0x218>
 800f1d6:	9b05      	ldr	r3, [sp, #20]
 800f1d8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f1dc:	445b      	add	r3, fp
 800f1de:	9305      	str	r3, [sp, #20]
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	9a06      	ldr	r2, [sp, #24]
 800f1e4:	2a09      	cmp	r2, #9
 800f1e6:	d849      	bhi.n	800f27c <_dtoa_r+0x28c>
 800f1e8:	2a05      	cmp	r2, #5
 800f1ea:	bfc4      	itt	gt
 800f1ec:	3a04      	subgt	r2, #4
 800f1ee:	9206      	strgt	r2, [sp, #24]
 800f1f0:	9a06      	ldr	r2, [sp, #24]
 800f1f2:	f1a2 0202 	sub.w	r2, r2, #2
 800f1f6:	bfcc      	ite	gt
 800f1f8:	2400      	movgt	r4, #0
 800f1fa:	2401      	movle	r4, #1
 800f1fc:	2a03      	cmp	r2, #3
 800f1fe:	d848      	bhi.n	800f292 <_dtoa_r+0x2a2>
 800f200:	e8df f002 	tbb	[pc, r2]
 800f204:	3a2c2e0b 	.word	0x3a2c2e0b
 800f208:	9b04      	ldr	r3, [sp, #16]
 800f20a:	2200      	movs	r2, #0
 800f20c:	eba3 030b 	sub.w	r3, r3, fp
 800f210:	9304      	str	r3, [sp, #16]
 800f212:	9209      	str	r2, [sp, #36]	; 0x24
 800f214:	f1cb 0300 	rsb	r3, fp, #0
 800f218:	e7e3      	b.n	800f1e2 <_dtoa_r+0x1f2>
 800f21a:	2200      	movs	r2, #0
 800f21c:	9207      	str	r2, [sp, #28]
 800f21e:	9a08      	ldr	r2, [sp, #32]
 800f220:	2a00      	cmp	r2, #0
 800f222:	dc39      	bgt.n	800f298 <_dtoa_r+0x2a8>
 800f224:	f04f 0a01 	mov.w	sl, #1
 800f228:	46d1      	mov	r9, sl
 800f22a:	4652      	mov	r2, sl
 800f22c:	f8cd a020 	str.w	sl, [sp, #32]
 800f230:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800f232:	2100      	movs	r1, #0
 800f234:	6079      	str	r1, [r7, #4]
 800f236:	2004      	movs	r0, #4
 800f238:	f100 0c14 	add.w	ip, r0, #20
 800f23c:	4594      	cmp	ip, r2
 800f23e:	6879      	ldr	r1, [r7, #4]
 800f240:	d92f      	bls.n	800f2a2 <_dtoa_r+0x2b2>
 800f242:	4630      	mov	r0, r6
 800f244:	930d      	str	r3, [sp, #52]	; 0x34
 800f246:	f000 fd9d 	bl	800fd84 <_Balloc>
 800f24a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f24c:	9001      	str	r0, [sp, #4]
 800f24e:	4602      	mov	r2, r0
 800f250:	2800      	cmp	r0, #0
 800f252:	d149      	bne.n	800f2e8 <_dtoa_r+0x2f8>
 800f254:	4b23      	ldr	r3, [pc, #140]	; (800f2e4 <_dtoa_r+0x2f4>)
 800f256:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f25a:	e6e1      	b.n	800f020 <_dtoa_r+0x30>
 800f25c:	2201      	movs	r2, #1
 800f25e:	e7dd      	b.n	800f21c <_dtoa_r+0x22c>
 800f260:	2200      	movs	r2, #0
 800f262:	9207      	str	r2, [sp, #28]
 800f264:	9a08      	ldr	r2, [sp, #32]
 800f266:	eb0b 0a02 	add.w	sl, fp, r2
 800f26a:	f10a 0901 	add.w	r9, sl, #1
 800f26e:	464a      	mov	r2, r9
 800f270:	2a01      	cmp	r2, #1
 800f272:	bfb8      	it	lt
 800f274:	2201      	movlt	r2, #1
 800f276:	e7db      	b.n	800f230 <_dtoa_r+0x240>
 800f278:	2201      	movs	r2, #1
 800f27a:	e7f2      	b.n	800f262 <_dtoa_r+0x272>
 800f27c:	2401      	movs	r4, #1
 800f27e:	2200      	movs	r2, #0
 800f280:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800f284:	f04f 3aff 	mov.w	sl, #4294967295
 800f288:	2100      	movs	r1, #0
 800f28a:	46d1      	mov	r9, sl
 800f28c:	2212      	movs	r2, #18
 800f28e:	9108      	str	r1, [sp, #32]
 800f290:	e7ce      	b.n	800f230 <_dtoa_r+0x240>
 800f292:	2201      	movs	r2, #1
 800f294:	9207      	str	r2, [sp, #28]
 800f296:	e7f5      	b.n	800f284 <_dtoa_r+0x294>
 800f298:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f29c:	46d1      	mov	r9, sl
 800f29e:	4652      	mov	r2, sl
 800f2a0:	e7c6      	b.n	800f230 <_dtoa_r+0x240>
 800f2a2:	3101      	adds	r1, #1
 800f2a4:	6079      	str	r1, [r7, #4]
 800f2a6:	0040      	lsls	r0, r0, #1
 800f2a8:	e7c6      	b.n	800f238 <_dtoa_r+0x248>
 800f2aa:	bf00      	nop
 800f2ac:	f3af 8000 	nop.w
 800f2b0:	636f4361 	.word	0x636f4361
 800f2b4:	3fd287a7 	.word	0x3fd287a7
 800f2b8:	8b60c8b3 	.word	0x8b60c8b3
 800f2bc:	3fc68a28 	.word	0x3fc68a28
 800f2c0:	509f79fb 	.word	0x509f79fb
 800f2c4:	3fd34413 	.word	0x3fd34413
 800f2c8:	08012420 	.word	0x08012420
 800f2cc:	080124db 	.word	0x080124db
 800f2d0:	7ff00000 	.word	0x7ff00000
 800f2d4:	080124d7 	.word	0x080124d7
 800f2d8:	080124ce 	.word	0x080124ce
 800f2dc:	080123fd 	.word	0x080123fd
 800f2e0:	080125d0 	.word	0x080125d0
 800f2e4:	08012536 	.word	0x08012536
 800f2e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f2ea:	9901      	ldr	r1, [sp, #4]
 800f2ec:	6011      	str	r1, [r2, #0]
 800f2ee:	f1b9 0f0e 	cmp.w	r9, #14
 800f2f2:	d86c      	bhi.n	800f3ce <_dtoa_r+0x3de>
 800f2f4:	2c00      	cmp	r4, #0
 800f2f6:	d06a      	beq.n	800f3ce <_dtoa_r+0x3de>
 800f2f8:	f1bb 0f00 	cmp.w	fp, #0
 800f2fc:	f340 80a0 	ble.w	800f440 <_dtoa_r+0x450>
 800f300:	49c1      	ldr	r1, [pc, #772]	; (800f608 <_dtoa_r+0x618>)
 800f302:	f00b 020f 	and.w	r2, fp, #15
 800f306:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f30a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f30e:	ed92 7b00 	vldr	d7, [r2]
 800f312:	ea4f 112b 	mov.w	r1, fp, asr #4
 800f316:	f000 8087 	beq.w	800f428 <_dtoa_r+0x438>
 800f31a:	4abc      	ldr	r2, [pc, #752]	; (800f60c <_dtoa_r+0x61c>)
 800f31c:	ed92 6b08 	vldr	d6, [r2, #32]
 800f320:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f324:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f328:	f001 010f 	and.w	r1, r1, #15
 800f32c:	2203      	movs	r2, #3
 800f32e:	48b7      	ldr	r0, [pc, #732]	; (800f60c <_dtoa_r+0x61c>)
 800f330:	2900      	cmp	r1, #0
 800f332:	d17b      	bne.n	800f42c <_dtoa_r+0x43c>
 800f334:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f338:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f33c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f340:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f342:	2900      	cmp	r1, #0
 800f344:	f000 80a2 	beq.w	800f48c <_dtoa_r+0x49c>
 800f348:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f34c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f350:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f358:	f140 8098 	bpl.w	800f48c <_dtoa_r+0x49c>
 800f35c:	f1b9 0f00 	cmp.w	r9, #0
 800f360:	f000 8094 	beq.w	800f48c <_dtoa_r+0x49c>
 800f364:	f1ba 0f00 	cmp.w	sl, #0
 800f368:	dd2f      	ble.n	800f3ca <_dtoa_r+0x3da>
 800f36a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f36e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f372:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f376:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f37a:	3201      	adds	r2, #1
 800f37c:	4650      	mov	r0, sl
 800f37e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f382:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f386:	ee07 2a90 	vmov	s15, r2
 800f38a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f38e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f392:	ee15 4a90 	vmov	r4, s11
 800f396:	ec52 1b15 	vmov	r1, r2, d5
 800f39a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	d177      	bne.n	800f492 <_dtoa_r+0x4a2>
 800f3a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f3a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f3aa:	ec42 1b17 	vmov	d7, r1, r2
 800f3ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b6:	f300 8263 	bgt.w	800f880 <_dtoa_r+0x890>
 800f3ba:	eeb1 7b47 	vneg.f64	d7, d7
 800f3be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c6:	f100 8258 	bmi.w	800f87a <_dtoa_r+0x88a>
 800f3ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f3ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f3d0:	2a00      	cmp	r2, #0
 800f3d2:	f2c0 811d 	blt.w	800f610 <_dtoa_r+0x620>
 800f3d6:	f1bb 0f0e 	cmp.w	fp, #14
 800f3da:	f300 8119 	bgt.w	800f610 <_dtoa_r+0x620>
 800f3de:	4b8a      	ldr	r3, [pc, #552]	; (800f608 <_dtoa_r+0x618>)
 800f3e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f3e4:	ed93 6b00 	vldr	d6, [r3]
 800f3e8:	9b08      	ldr	r3, [sp, #32]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	f280 80b7 	bge.w	800f55e <_dtoa_r+0x56e>
 800f3f0:	f1b9 0f00 	cmp.w	r9, #0
 800f3f4:	f300 80b3 	bgt.w	800f55e <_dtoa_r+0x56e>
 800f3f8:	f040 823f 	bne.w	800f87a <_dtoa_r+0x88a>
 800f3fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f400:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f404:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f408:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f410:	464c      	mov	r4, r9
 800f412:	464f      	mov	r7, r9
 800f414:	f280 8215 	bge.w	800f842 <_dtoa_r+0x852>
 800f418:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f41c:	2331      	movs	r3, #49	; 0x31
 800f41e:	f808 3b01 	strb.w	r3, [r8], #1
 800f422:	f10b 0b01 	add.w	fp, fp, #1
 800f426:	e211      	b.n	800f84c <_dtoa_r+0x85c>
 800f428:	2202      	movs	r2, #2
 800f42a:	e780      	b.n	800f32e <_dtoa_r+0x33e>
 800f42c:	07cc      	lsls	r4, r1, #31
 800f42e:	d504      	bpl.n	800f43a <_dtoa_r+0x44a>
 800f430:	ed90 6b00 	vldr	d6, [r0]
 800f434:	3201      	adds	r2, #1
 800f436:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f43a:	1049      	asrs	r1, r1, #1
 800f43c:	3008      	adds	r0, #8
 800f43e:	e777      	b.n	800f330 <_dtoa_r+0x340>
 800f440:	d022      	beq.n	800f488 <_dtoa_r+0x498>
 800f442:	f1cb 0100 	rsb	r1, fp, #0
 800f446:	4a70      	ldr	r2, [pc, #448]	; (800f608 <_dtoa_r+0x618>)
 800f448:	f001 000f 	and.w	r0, r1, #15
 800f44c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f450:	ed92 7b00 	vldr	d7, [r2]
 800f454:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f458:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f45c:	486b      	ldr	r0, [pc, #428]	; (800f60c <_dtoa_r+0x61c>)
 800f45e:	1109      	asrs	r1, r1, #4
 800f460:	2400      	movs	r4, #0
 800f462:	2202      	movs	r2, #2
 800f464:	b929      	cbnz	r1, 800f472 <_dtoa_r+0x482>
 800f466:	2c00      	cmp	r4, #0
 800f468:	f43f af6a 	beq.w	800f340 <_dtoa_r+0x350>
 800f46c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f470:	e766      	b.n	800f340 <_dtoa_r+0x350>
 800f472:	07cf      	lsls	r7, r1, #31
 800f474:	d505      	bpl.n	800f482 <_dtoa_r+0x492>
 800f476:	ed90 6b00 	vldr	d6, [r0]
 800f47a:	3201      	adds	r2, #1
 800f47c:	2401      	movs	r4, #1
 800f47e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f482:	1049      	asrs	r1, r1, #1
 800f484:	3008      	adds	r0, #8
 800f486:	e7ed      	b.n	800f464 <_dtoa_r+0x474>
 800f488:	2202      	movs	r2, #2
 800f48a:	e759      	b.n	800f340 <_dtoa_r+0x350>
 800f48c:	465f      	mov	r7, fp
 800f48e:	4648      	mov	r0, r9
 800f490:	e775      	b.n	800f37e <_dtoa_r+0x38e>
 800f492:	ec42 1b17 	vmov	d7, r1, r2
 800f496:	4a5c      	ldr	r2, [pc, #368]	; (800f608 <_dtoa_r+0x618>)
 800f498:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f49c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f4a0:	9a01      	ldr	r2, [sp, #4]
 800f4a2:	1814      	adds	r4, r2, r0
 800f4a4:	9a07      	ldr	r2, [sp, #28]
 800f4a6:	b352      	cbz	r2, 800f4fe <_dtoa_r+0x50e>
 800f4a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f4ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f4b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f4b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f4b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f4bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f4c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f4c4:	ee14 2a90 	vmov	r2, s9
 800f4c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f4cc:	3230      	adds	r2, #48	; 0x30
 800f4ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f4d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4da:	f808 2b01 	strb.w	r2, [r8], #1
 800f4de:	d439      	bmi.n	800f554 <_dtoa_r+0x564>
 800f4e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f4e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ec:	d472      	bmi.n	800f5d4 <_dtoa_r+0x5e4>
 800f4ee:	45a0      	cmp	r8, r4
 800f4f0:	f43f af6b 	beq.w	800f3ca <_dtoa_r+0x3da>
 800f4f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f4f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f4fc:	e7e0      	b.n	800f4c0 <_dtoa_r+0x4d0>
 800f4fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f502:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f506:	4621      	mov	r1, r4
 800f508:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f50c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f510:	ee14 2a90 	vmov	r2, s9
 800f514:	3230      	adds	r2, #48	; 0x30
 800f516:	f808 2b01 	strb.w	r2, [r8], #1
 800f51a:	45a0      	cmp	r8, r4
 800f51c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f520:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f524:	d118      	bne.n	800f558 <_dtoa_r+0x568>
 800f526:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f52a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f52e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f536:	dc4d      	bgt.n	800f5d4 <_dtoa_r+0x5e4>
 800f538:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f53c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f544:	f57f af41 	bpl.w	800f3ca <_dtoa_r+0x3da>
 800f548:	4688      	mov	r8, r1
 800f54a:	3901      	subs	r1, #1
 800f54c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f550:	2b30      	cmp	r3, #48	; 0x30
 800f552:	d0f9      	beq.n	800f548 <_dtoa_r+0x558>
 800f554:	46bb      	mov	fp, r7
 800f556:	e02a      	b.n	800f5ae <_dtoa_r+0x5be>
 800f558:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f55c:	e7d6      	b.n	800f50c <_dtoa_r+0x51c>
 800f55e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f562:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f566:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f56a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f56e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f572:	ee15 3a10 	vmov	r3, s10
 800f576:	3330      	adds	r3, #48	; 0x30
 800f578:	f808 3b01 	strb.w	r3, [r8], #1
 800f57c:	9b01      	ldr	r3, [sp, #4]
 800f57e:	eba8 0303 	sub.w	r3, r8, r3
 800f582:	4599      	cmp	r9, r3
 800f584:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f588:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f58c:	d133      	bne.n	800f5f6 <_dtoa_r+0x606>
 800f58e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f592:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f59a:	dc1a      	bgt.n	800f5d2 <_dtoa_r+0x5e2>
 800f59c:	eeb4 7b46 	vcmp.f64	d7, d6
 800f5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5a4:	d103      	bne.n	800f5ae <_dtoa_r+0x5be>
 800f5a6:	ee15 3a10 	vmov	r3, s10
 800f5aa:	07d9      	lsls	r1, r3, #31
 800f5ac:	d411      	bmi.n	800f5d2 <_dtoa_r+0x5e2>
 800f5ae:	4629      	mov	r1, r5
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	f000 fc27 	bl	800fe04 <_Bfree>
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5ba:	f888 3000 	strb.w	r3, [r8]
 800f5be:	f10b 0301 	add.w	r3, fp, #1
 800f5c2:	6013      	str	r3, [r2, #0]
 800f5c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	f43f ad61 	beq.w	800f08e <_dtoa_r+0x9e>
 800f5cc:	f8c3 8000 	str.w	r8, [r3]
 800f5d0:	e55d      	b.n	800f08e <_dtoa_r+0x9e>
 800f5d2:	465f      	mov	r7, fp
 800f5d4:	4643      	mov	r3, r8
 800f5d6:	4698      	mov	r8, r3
 800f5d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f5dc:	2a39      	cmp	r2, #57	; 0x39
 800f5de:	d106      	bne.n	800f5ee <_dtoa_r+0x5fe>
 800f5e0:	9a01      	ldr	r2, [sp, #4]
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d1f7      	bne.n	800f5d6 <_dtoa_r+0x5e6>
 800f5e6:	9901      	ldr	r1, [sp, #4]
 800f5e8:	2230      	movs	r2, #48	; 0x30
 800f5ea:	3701      	adds	r7, #1
 800f5ec:	700a      	strb	r2, [r1, #0]
 800f5ee:	781a      	ldrb	r2, [r3, #0]
 800f5f0:	3201      	adds	r2, #1
 800f5f2:	701a      	strb	r2, [r3, #0]
 800f5f4:	e7ae      	b.n	800f554 <_dtoa_r+0x564>
 800f5f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f5fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f602:	d1b2      	bne.n	800f56a <_dtoa_r+0x57a>
 800f604:	e7d3      	b.n	800f5ae <_dtoa_r+0x5be>
 800f606:	bf00      	nop
 800f608:	080125d0 	.word	0x080125d0
 800f60c:	080125a8 	.word	0x080125a8
 800f610:	9907      	ldr	r1, [sp, #28]
 800f612:	2900      	cmp	r1, #0
 800f614:	f000 80d0 	beq.w	800f7b8 <_dtoa_r+0x7c8>
 800f618:	9906      	ldr	r1, [sp, #24]
 800f61a:	2901      	cmp	r1, #1
 800f61c:	f300 80b4 	bgt.w	800f788 <_dtoa_r+0x798>
 800f620:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f622:	2900      	cmp	r1, #0
 800f624:	f000 80ac 	beq.w	800f780 <_dtoa_r+0x790>
 800f628:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f62c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f630:	461c      	mov	r4, r3
 800f632:	930a      	str	r3, [sp, #40]	; 0x28
 800f634:	9b04      	ldr	r3, [sp, #16]
 800f636:	4413      	add	r3, r2
 800f638:	9304      	str	r3, [sp, #16]
 800f63a:	9b05      	ldr	r3, [sp, #20]
 800f63c:	2101      	movs	r1, #1
 800f63e:	4413      	add	r3, r2
 800f640:	4630      	mov	r0, r6
 800f642:	9305      	str	r3, [sp, #20]
 800f644:	f000 fc96 	bl	800ff74 <__i2b>
 800f648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f64a:	4607      	mov	r7, r0
 800f64c:	f1b8 0f00 	cmp.w	r8, #0
 800f650:	dd0d      	ble.n	800f66e <_dtoa_r+0x67e>
 800f652:	9a05      	ldr	r2, [sp, #20]
 800f654:	2a00      	cmp	r2, #0
 800f656:	dd0a      	ble.n	800f66e <_dtoa_r+0x67e>
 800f658:	4542      	cmp	r2, r8
 800f65a:	9904      	ldr	r1, [sp, #16]
 800f65c:	bfa8      	it	ge
 800f65e:	4642      	movge	r2, r8
 800f660:	1a89      	subs	r1, r1, r2
 800f662:	9104      	str	r1, [sp, #16]
 800f664:	9905      	ldr	r1, [sp, #20]
 800f666:	eba8 0802 	sub.w	r8, r8, r2
 800f66a:	1a8a      	subs	r2, r1, r2
 800f66c:	9205      	str	r2, [sp, #20]
 800f66e:	b303      	cbz	r3, 800f6b2 <_dtoa_r+0x6c2>
 800f670:	9a07      	ldr	r2, [sp, #28]
 800f672:	2a00      	cmp	r2, #0
 800f674:	f000 80a5 	beq.w	800f7c2 <_dtoa_r+0x7d2>
 800f678:	2c00      	cmp	r4, #0
 800f67a:	dd13      	ble.n	800f6a4 <_dtoa_r+0x6b4>
 800f67c:	4639      	mov	r1, r7
 800f67e:	4622      	mov	r2, r4
 800f680:	4630      	mov	r0, r6
 800f682:	930d      	str	r3, [sp, #52]	; 0x34
 800f684:	f000 fd36 	bl	80100f4 <__pow5mult>
 800f688:	462a      	mov	r2, r5
 800f68a:	4601      	mov	r1, r0
 800f68c:	4607      	mov	r7, r0
 800f68e:	4630      	mov	r0, r6
 800f690:	f000 fc86 	bl	800ffa0 <__multiply>
 800f694:	4629      	mov	r1, r5
 800f696:	900a      	str	r0, [sp, #40]	; 0x28
 800f698:	4630      	mov	r0, r6
 800f69a:	f000 fbb3 	bl	800fe04 <_Bfree>
 800f69e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6a2:	4615      	mov	r5, r2
 800f6a4:	1b1a      	subs	r2, r3, r4
 800f6a6:	d004      	beq.n	800f6b2 <_dtoa_r+0x6c2>
 800f6a8:	4629      	mov	r1, r5
 800f6aa:	4630      	mov	r0, r6
 800f6ac:	f000 fd22 	bl	80100f4 <__pow5mult>
 800f6b0:	4605      	mov	r5, r0
 800f6b2:	2101      	movs	r1, #1
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	f000 fc5d 	bl	800ff74 <__i2b>
 800f6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	4604      	mov	r4, r0
 800f6c0:	f340 8081 	ble.w	800f7c6 <_dtoa_r+0x7d6>
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	4601      	mov	r1, r0
 800f6c8:	4630      	mov	r0, r6
 800f6ca:	f000 fd13 	bl	80100f4 <__pow5mult>
 800f6ce:	9b06      	ldr	r3, [sp, #24]
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	4604      	mov	r4, r0
 800f6d4:	dd7a      	ble.n	800f7cc <_dtoa_r+0x7dc>
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	930a      	str	r3, [sp, #40]	; 0x28
 800f6da:	6922      	ldr	r2, [r4, #16]
 800f6dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f6e0:	6910      	ldr	r0, [r2, #16]
 800f6e2:	f000 fbf7 	bl	800fed4 <__hi0bits>
 800f6e6:	f1c0 0020 	rsb	r0, r0, #32
 800f6ea:	9b05      	ldr	r3, [sp, #20]
 800f6ec:	4418      	add	r0, r3
 800f6ee:	f010 001f 	ands.w	r0, r0, #31
 800f6f2:	f000 808c 	beq.w	800f80e <_dtoa_r+0x81e>
 800f6f6:	f1c0 0220 	rsb	r2, r0, #32
 800f6fa:	2a04      	cmp	r2, #4
 800f6fc:	f340 8085 	ble.w	800f80a <_dtoa_r+0x81a>
 800f700:	f1c0 001c 	rsb	r0, r0, #28
 800f704:	9b04      	ldr	r3, [sp, #16]
 800f706:	4403      	add	r3, r0
 800f708:	9304      	str	r3, [sp, #16]
 800f70a:	9b05      	ldr	r3, [sp, #20]
 800f70c:	4403      	add	r3, r0
 800f70e:	4480      	add	r8, r0
 800f710:	9305      	str	r3, [sp, #20]
 800f712:	9b04      	ldr	r3, [sp, #16]
 800f714:	2b00      	cmp	r3, #0
 800f716:	dd05      	ble.n	800f724 <_dtoa_r+0x734>
 800f718:	4629      	mov	r1, r5
 800f71a:	461a      	mov	r2, r3
 800f71c:	4630      	mov	r0, r6
 800f71e:	f000 fd43 	bl	80101a8 <__lshift>
 800f722:	4605      	mov	r5, r0
 800f724:	9b05      	ldr	r3, [sp, #20]
 800f726:	2b00      	cmp	r3, #0
 800f728:	dd05      	ble.n	800f736 <_dtoa_r+0x746>
 800f72a:	4621      	mov	r1, r4
 800f72c:	461a      	mov	r2, r3
 800f72e:	4630      	mov	r0, r6
 800f730:	f000 fd3a 	bl	80101a8 <__lshift>
 800f734:	4604      	mov	r4, r0
 800f736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d06a      	beq.n	800f812 <_dtoa_r+0x822>
 800f73c:	4621      	mov	r1, r4
 800f73e:	4628      	mov	r0, r5
 800f740:	f000 fda2 	bl	8010288 <__mcmp>
 800f744:	2800      	cmp	r0, #0
 800f746:	da64      	bge.n	800f812 <_dtoa_r+0x822>
 800f748:	2300      	movs	r3, #0
 800f74a:	4629      	mov	r1, r5
 800f74c:	220a      	movs	r2, #10
 800f74e:	4630      	mov	r0, r6
 800f750:	f000 fb7a 	bl	800fe48 <__multadd>
 800f754:	9b07      	ldr	r3, [sp, #28]
 800f756:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f75a:	4605      	mov	r5, r0
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	f000 8191 	beq.w	800fa84 <_dtoa_r+0xa94>
 800f762:	4639      	mov	r1, r7
 800f764:	2300      	movs	r3, #0
 800f766:	220a      	movs	r2, #10
 800f768:	4630      	mov	r0, r6
 800f76a:	f000 fb6d 	bl	800fe48 <__multadd>
 800f76e:	f1ba 0f00 	cmp.w	sl, #0
 800f772:	4607      	mov	r7, r0
 800f774:	f300 808d 	bgt.w	800f892 <_dtoa_r+0x8a2>
 800f778:	9b06      	ldr	r3, [sp, #24]
 800f77a:	2b02      	cmp	r3, #2
 800f77c:	dc50      	bgt.n	800f820 <_dtoa_r+0x830>
 800f77e:	e088      	b.n	800f892 <_dtoa_r+0x8a2>
 800f780:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f782:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f786:	e751      	b.n	800f62c <_dtoa_r+0x63c>
 800f788:	f109 34ff 	add.w	r4, r9, #4294967295
 800f78c:	42a3      	cmp	r3, r4
 800f78e:	bfbf      	itttt	lt
 800f790:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800f792:	1ae3      	sublt	r3, r4, r3
 800f794:	18d2      	addlt	r2, r2, r3
 800f796:	9209      	strlt	r2, [sp, #36]	; 0x24
 800f798:	bfb6      	itet	lt
 800f79a:	4623      	movlt	r3, r4
 800f79c:	1b1c      	subge	r4, r3, r4
 800f79e:	2400      	movlt	r4, #0
 800f7a0:	f1b9 0f00 	cmp.w	r9, #0
 800f7a4:	bfb5      	itete	lt
 800f7a6:	9a04      	ldrlt	r2, [sp, #16]
 800f7a8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800f7ac:	eba2 0809 	sublt.w	r8, r2, r9
 800f7b0:	464a      	movge	r2, r9
 800f7b2:	bfb8      	it	lt
 800f7b4:	2200      	movlt	r2, #0
 800f7b6:	e73c      	b.n	800f632 <_dtoa_r+0x642>
 800f7b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f7bc:	9f07      	ldr	r7, [sp, #28]
 800f7be:	461c      	mov	r4, r3
 800f7c0:	e744      	b.n	800f64c <_dtoa_r+0x65c>
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	e770      	b.n	800f6a8 <_dtoa_r+0x6b8>
 800f7c6:	9b06      	ldr	r3, [sp, #24]
 800f7c8:	2b01      	cmp	r3, #1
 800f7ca:	dc18      	bgt.n	800f7fe <_dtoa_r+0x80e>
 800f7cc:	9b02      	ldr	r3, [sp, #8]
 800f7ce:	b9b3      	cbnz	r3, 800f7fe <_dtoa_r+0x80e>
 800f7d0:	9b03      	ldr	r3, [sp, #12]
 800f7d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f7d6:	b9a2      	cbnz	r2, 800f802 <_dtoa_r+0x812>
 800f7d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f7dc:	0d12      	lsrs	r2, r2, #20
 800f7de:	0512      	lsls	r2, r2, #20
 800f7e0:	b18a      	cbz	r2, 800f806 <_dtoa_r+0x816>
 800f7e2:	9b04      	ldr	r3, [sp, #16]
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	9304      	str	r3, [sp, #16]
 800f7e8:	9b05      	ldr	r3, [sp, #20]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	9305      	str	r3, [sp, #20]
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	930a      	str	r3, [sp, #40]	; 0x28
 800f7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	f47f af70 	bne.w	800f6da <_dtoa_r+0x6ea>
 800f7fa:	2001      	movs	r0, #1
 800f7fc:	e775      	b.n	800f6ea <_dtoa_r+0x6fa>
 800f7fe:	2300      	movs	r3, #0
 800f800:	e7f6      	b.n	800f7f0 <_dtoa_r+0x800>
 800f802:	9b02      	ldr	r3, [sp, #8]
 800f804:	e7f4      	b.n	800f7f0 <_dtoa_r+0x800>
 800f806:	920a      	str	r2, [sp, #40]	; 0x28
 800f808:	e7f3      	b.n	800f7f2 <_dtoa_r+0x802>
 800f80a:	d082      	beq.n	800f712 <_dtoa_r+0x722>
 800f80c:	4610      	mov	r0, r2
 800f80e:	301c      	adds	r0, #28
 800f810:	e778      	b.n	800f704 <_dtoa_r+0x714>
 800f812:	f1b9 0f00 	cmp.w	r9, #0
 800f816:	dc37      	bgt.n	800f888 <_dtoa_r+0x898>
 800f818:	9b06      	ldr	r3, [sp, #24]
 800f81a:	2b02      	cmp	r3, #2
 800f81c:	dd34      	ble.n	800f888 <_dtoa_r+0x898>
 800f81e:	46ca      	mov	sl, r9
 800f820:	f1ba 0f00 	cmp.w	sl, #0
 800f824:	d10d      	bne.n	800f842 <_dtoa_r+0x852>
 800f826:	4621      	mov	r1, r4
 800f828:	4653      	mov	r3, sl
 800f82a:	2205      	movs	r2, #5
 800f82c:	4630      	mov	r0, r6
 800f82e:	f000 fb0b 	bl	800fe48 <__multadd>
 800f832:	4601      	mov	r1, r0
 800f834:	4604      	mov	r4, r0
 800f836:	4628      	mov	r0, r5
 800f838:	f000 fd26 	bl	8010288 <__mcmp>
 800f83c:	2800      	cmp	r0, #0
 800f83e:	f73f adeb 	bgt.w	800f418 <_dtoa_r+0x428>
 800f842:	9b08      	ldr	r3, [sp, #32]
 800f844:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f848:	ea6f 0b03 	mvn.w	fp, r3
 800f84c:	f04f 0900 	mov.w	r9, #0
 800f850:	4621      	mov	r1, r4
 800f852:	4630      	mov	r0, r6
 800f854:	f000 fad6 	bl	800fe04 <_Bfree>
 800f858:	2f00      	cmp	r7, #0
 800f85a:	f43f aea8 	beq.w	800f5ae <_dtoa_r+0x5be>
 800f85e:	f1b9 0f00 	cmp.w	r9, #0
 800f862:	d005      	beq.n	800f870 <_dtoa_r+0x880>
 800f864:	45b9      	cmp	r9, r7
 800f866:	d003      	beq.n	800f870 <_dtoa_r+0x880>
 800f868:	4649      	mov	r1, r9
 800f86a:	4630      	mov	r0, r6
 800f86c:	f000 faca 	bl	800fe04 <_Bfree>
 800f870:	4639      	mov	r1, r7
 800f872:	4630      	mov	r0, r6
 800f874:	f000 fac6 	bl	800fe04 <_Bfree>
 800f878:	e699      	b.n	800f5ae <_dtoa_r+0x5be>
 800f87a:	2400      	movs	r4, #0
 800f87c:	4627      	mov	r7, r4
 800f87e:	e7e0      	b.n	800f842 <_dtoa_r+0x852>
 800f880:	46bb      	mov	fp, r7
 800f882:	4604      	mov	r4, r0
 800f884:	4607      	mov	r7, r0
 800f886:	e5c7      	b.n	800f418 <_dtoa_r+0x428>
 800f888:	9b07      	ldr	r3, [sp, #28]
 800f88a:	46ca      	mov	sl, r9
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	f000 8100 	beq.w	800fa92 <_dtoa_r+0xaa2>
 800f892:	f1b8 0f00 	cmp.w	r8, #0
 800f896:	dd05      	ble.n	800f8a4 <_dtoa_r+0x8b4>
 800f898:	4639      	mov	r1, r7
 800f89a:	4642      	mov	r2, r8
 800f89c:	4630      	mov	r0, r6
 800f89e:	f000 fc83 	bl	80101a8 <__lshift>
 800f8a2:	4607      	mov	r7, r0
 800f8a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d05d      	beq.n	800f966 <_dtoa_r+0x976>
 800f8aa:	6879      	ldr	r1, [r7, #4]
 800f8ac:	4630      	mov	r0, r6
 800f8ae:	f000 fa69 	bl	800fd84 <_Balloc>
 800f8b2:	4680      	mov	r8, r0
 800f8b4:	b928      	cbnz	r0, 800f8c2 <_dtoa_r+0x8d2>
 800f8b6:	4b82      	ldr	r3, [pc, #520]	; (800fac0 <_dtoa_r+0xad0>)
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f8be:	f7ff bbaf 	b.w	800f020 <_dtoa_r+0x30>
 800f8c2:	693a      	ldr	r2, [r7, #16]
 800f8c4:	3202      	adds	r2, #2
 800f8c6:	0092      	lsls	r2, r2, #2
 800f8c8:	f107 010c 	add.w	r1, r7, #12
 800f8cc:	300c      	adds	r0, #12
 800f8ce:	f7fe fb41 	bl	800df54 <memcpy>
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	4641      	mov	r1, r8
 800f8d6:	4630      	mov	r0, r6
 800f8d8:	f000 fc66 	bl	80101a8 <__lshift>
 800f8dc:	9b01      	ldr	r3, [sp, #4]
 800f8de:	3301      	adds	r3, #1
 800f8e0:	9304      	str	r3, [sp, #16]
 800f8e2:	9b01      	ldr	r3, [sp, #4]
 800f8e4:	4453      	add	r3, sl
 800f8e6:	9308      	str	r3, [sp, #32]
 800f8e8:	9b02      	ldr	r3, [sp, #8]
 800f8ea:	f003 0301 	and.w	r3, r3, #1
 800f8ee:	46b9      	mov	r9, r7
 800f8f0:	9307      	str	r3, [sp, #28]
 800f8f2:	4607      	mov	r7, r0
 800f8f4:	9b04      	ldr	r3, [sp, #16]
 800f8f6:	4621      	mov	r1, r4
 800f8f8:	3b01      	subs	r3, #1
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	9302      	str	r3, [sp, #8]
 800f8fe:	f7ff faeb 	bl	800eed8 <quorem>
 800f902:	4603      	mov	r3, r0
 800f904:	3330      	adds	r3, #48	; 0x30
 800f906:	9005      	str	r0, [sp, #20]
 800f908:	4649      	mov	r1, r9
 800f90a:	4628      	mov	r0, r5
 800f90c:	9309      	str	r3, [sp, #36]	; 0x24
 800f90e:	f000 fcbb 	bl	8010288 <__mcmp>
 800f912:	463a      	mov	r2, r7
 800f914:	4682      	mov	sl, r0
 800f916:	4621      	mov	r1, r4
 800f918:	4630      	mov	r0, r6
 800f91a:	f000 fcd1 	bl	80102c0 <__mdiff>
 800f91e:	68c2      	ldr	r2, [r0, #12]
 800f920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f922:	4680      	mov	r8, r0
 800f924:	bb0a      	cbnz	r2, 800f96a <_dtoa_r+0x97a>
 800f926:	4601      	mov	r1, r0
 800f928:	4628      	mov	r0, r5
 800f92a:	f000 fcad 	bl	8010288 <__mcmp>
 800f92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f930:	4602      	mov	r2, r0
 800f932:	4641      	mov	r1, r8
 800f934:	4630      	mov	r0, r6
 800f936:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800f93a:	f000 fa63 	bl	800fe04 <_Bfree>
 800f93e:	9b06      	ldr	r3, [sp, #24]
 800f940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f942:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f946:	ea43 0102 	orr.w	r1, r3, r2
 800f94a:	9b07      	ldr	r3, [sp, #28]
 800f94c:	430b      	orrs	r3, r1
 800f94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f950:	d10d      	bne.n	800f96e <_dtoa_r+0x97e>
 800f952:	2b39      	cmp	r3, #57	; 0x39
 800f954:	d029      	beq.n	800f9aa <_dtoa_r+0x9ba>
 800f956:	f1ba 0f00 	cmp.w	sl, #0
 800f95a:	dd01      	ble.n	800f960 <_dtoa_r+0x970>
 800f95c:	9b05      	ldr	r3, [sp, #20]
 800f95e:	3331      	adds	r3, #49	; 0x31
 800f960:	9a02      	ldr	r2, [sp, #8]
 800f962:	7013      	strb	r3, [r2, #0]
 800f964:	e774      	b.n	800f850 <_dtoa_r+0x860>
 800f966:	4638      	mov	r0, r7
 800f968:	e7b8      	b.n	800f8dc <_dtoa_r+0x8ec>
 800f96a:	2201      	movs	r2, #1
 800f96c:	e7e1      	b.n	800f932 <_dtoa_r+0x942>
 800f96e:	f1ba 0f00 	cmp.w	sl, #0
 800f972:	db06      	blt.n	800f982 <_dtoa_r+0x992>
 800f974:	9906      	ldr	r1, [sp, #24]
 800f976:	ea41 0a0a 	orr.w	sl, r1, sl
 800f97a:	9907      	ldr	r1, [sp, #28]
 800f97c:	ea5a 0101 	orrs.w	r1, sl, r1
 800f980:	d120      	bne.n	800f9c4 <_dtoa_r+0x9d4>
 800f982:	2a00      	cmp	r2, #0
 800f984:	ddec      	ble.n	800f960 <_dtoa_r+0x970>
 800f986:	4629      	mov	r1, r5
 800f988:	2201      	movs	r2, #1
 800f98a:	4630      	mov	r0, r6
 800f98c:	9304      	str	r3, [sp, #16]
 800f98e:	f000 fc0b 	bl	80101a8 <__lshift>
 800f992:	4621      	mov	r1, r4
 800f994:	4605      	mov	r5, r0
 800f996:	f000 fc77 	bl	8010288 <__mcmp>
 800f99a:	2800      	cmp	r0, #0
 800f99c:	9b04      	ldr	r3, [sp, #16]
 800f99e:	dc02      	bgt.n	800f9a6 <_dtoa_r+0x9b6>
 800f9a0:	d1de      	bne.n	800f960 <_dtoa_r+0x970>
 800f9a2:	07da      	lsls	r2, r3, #31
 800f9a4:	d5dc      	bpl.n	800f960 <_dtoa_r+0x970>
 800f9a6:	2b39      	cmp	r3, #57	; 0x39
 800f9a8:	d1d8      	bne.n	800f95c <_dtoa_r+0x96c>
 800f9aa:	9a02      	ldr	r2, [sp, #8]
 800f9ac:	2339      	movs	r3, #57	; 0x39
 800f9ae:	7013      	strb	r3, [r2, #0]
 800f9b0:	4643      	mov	r3, r8
 800f9b2:	4698      	mov	r8, r3
 800f9b4:	3b01      	subs	r3, #1
 800f9b6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f9ba:	2a39      	cmp	r2, #57	; 0x39
 800f9bc:	d051      	beq.n	800fa62 <_dtoa_r+0xa72>
 800f9be:	3201      	adds	r2, #1
 800f9c0:	701a      	strb	r2, [r3, #0]
 800f9c2:	e745      	b.n	800f850 <_dtoa_r+0x860>
 800f9c4:	2a00      	cmp	r2, #0
 800f9c6:	dd03      	ble.n	800f9d0 <_dtoa_r+0x9e0>
 800f9c8:	2b39      	cmp	r3, #57	; 0x39
 800f9ca:	d0ee      	beq.n	800f9aa <_dtoa_r+0x9ba>
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	e7c7      	b.n	800f960 <_dtoa_r+0x970>
 800f9d0:	9a04      	ldr	r2, [sp, #16]
 800f9d2:	9908      	ldr	r1, [sp, #32]
 800f9d4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f9d8:	428a      	cmp	r2, r1
 800f9da:	d02b      	beq.n	800fa34 <_dtoa_r+0xa44>
 800f9dc:	4629      	mov	r1, r5
 800f9de:	2300      	movs	r3, #0
 800f9e0:	220a      	movs	r2, #10
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	f000 fa30 	bl	800fe48 <__multadd>
 800f9e8:	45b9      	cmp	r9, r7
 800f9ea:	4605      	mov	r5, r0
 800f9ec:	f04f 0300 	mov.w	r3, #0
 800f9f0:	f04f 020a 	mov.w	r2, #10
 800f9f4:	4649      	mov	r1, r9
 800f9f6:	4630      	mov	r0, r6
 800f9f8:	d107      	bne.n	800fa0a <_dtoa_r+0xa1a>
 800f9fa:	f000 fa25 	bl	800fe48 <__multadd>
 800f9fe:	4681      	mov	r9, r0
 800fa00:	4607      	mov	r7, r0
 800fa02:	9b04      	ldr	r3, [sp, #16]
 800fa04:	3301      	adds	r3, #1
 800fa06:	9304      	str	r3, [sp, #16]
 800fa08:	e774      	b.n	800f8f4 <_dtoa_r+0x904>
 800fa0a:	f000 fa1d 	bl	800fe48 <__multadd>
 800fa0e:	4639      	mov	r1, r7
 800fa10:	4681      	mov	r9, r0
 800fa12:	2300      	movs	r3, #0
 800fa14:	220a      	movs	r2, #10
 800fa16:	4630      	mov	r0, r6
 800fa18:	f000 fa16 	bl	800fe48 <__multadd>
 800fa1c:	4607      	mov	r7, r0
 800fa1e:	e7f0      	b.n	800fa02 <_dtoa_r+0xa12>
 800fa20:	f1ba 0f00 	cmp.w	sl, #0
 800fa24:	9a01      	ldr	r2, [sp, #4]
 800fa26:	bfcc      	ite	gt
 800fa28:	46d0      	movgt	r8, sl
 800fa2a:	f04f 0801 	movle.w	r8, #1
 800fa2e:	4490      	add	r8, r2
 800fa30:	f04f 0900 	mov.w	r9, #0
 800fa34:	4629      	mov	r1, r5
 800fa36:	2201      	movs	r2, #1
 800fa38:	4630      	mov	r0, r6
 800fa3a:	9302      	str	r3, [sp, #8]
 800fa3c:	f000 fbb4 	bl	80101a8 <__lshift>
 800fa40:	4621      	mov	r1, r4
 800fa42:	4605      	mov	r5, r0
 800fa44:	f000 fc20 	bl	8010288 <__mcmp>
 800fa48:	2800      	cmp	r0, #0
 800fa4a:	dcb1      	bgt.n	800f9b0 <_dtoa_r+0x9c0>
 800fa4c:	d102      	bne.n	800fa54 <_dtoa_r+0xa64>
 800fa4e:	9b02      	ldr	r3, [sp, #8]
 800fa50:	07db      	lsls	r3, r3, #31
 800fa52:	d4ad      	bmi.n	800f9b0 <_dtoa_r+0x9c0>
 800fa54:	4643      	mov	r3, r8
 800fa56:	4698      	mov	r8, r3
 800fa58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa5c:	2a30      	cmp	r2, #48	; 0x30
 800fa5e:	d0fa      	beq.n	800fa56 <_dtoa_r+0xa66>
 800fa60:	e6f6      	b.n	800f850 <_dtoa_r+0x860>
 800fa62:	9a01      	ldr	r2, [sp, #4]
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d1a4      	bne.n	800f9b2 <_dtoa_r+0x9c2>
 800fa68:	f10b 0b01 	add.w	fp, fp, #1
 800fa6c:	2331      	movs	r3, #49	; 0x31
 800fa6e:	e778      	b.n	800f962 <_dtoa_r+0x972>
 800fa70:	4b14      	ldr	r3, [pc, #80]	; (800fac4 <_dtoa_r+0xad4>)
 800fa72:	f7ff bb27 	b.w	800f0c4 <_dtoa_r+0xd4>
 800fa76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	f47f ab03 	bne.w	800f084 <_dtoa_r+0x94>
 800fa7e:	4b12      	ldr	r3, [pc, #72]	; (800fac8 <_dtoa_r+0xad8>)
 800fa80:	f7ff bb20 	b.w	800f0c4 <_dtoa_r+0xd4>
 800fa84:	f1ba 0f00 	cmp.w	sl, #0
 800fa88:	dc03      	bgt.n	800fa92 <_dtoa_r+0xaa2>
 800fa8a:	9b06      	ldr	r3, [sp, #24]
 800fa8c:	2b02      	cmp	r3, #2
 800fa8e:	f73f aec7 	bgt.w	800f820 <_dtoa_r+0x830>
 800fa92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fa96:	4621      	mov	r1, r4
 800fa98:	4628      	mov	r0, r5
 800fa9a:	f7ff fa1d 	bl	800eed8 <quorem>
 800fa9e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800faa2:	f808 3b01 	strb.w	r3, [r8], #1
 800faa6:	9a01      	ldr	r2, [sp, #4]
 800faa8:	eba8 0202 	sub.w	r2, r8, r2
 800faac:	4592      	cmp	sl, r2
 800faae:	ddb7      	ble.n	800fa20 <_dtoa_r+0xa30>
 800fab0:	4629      	mov	r1, r5
 800fab2:	2300      	movs	r3, #0
 800fab4:	220a      	movs	r2, #10
 800fab6:	4630      	mov	r0, r6
 800fab8:	f000 f9c6 	bl	800fe48 <__multadd>
 800fabc:	4605      	mov	r5, r0
 800fabe:	e7ea      	b.n	800fa96 <_dtoa_r+0xaa6>
 800fac0:	08012536 	.word	0x08012536
 800fac4:	080123fc 	.word	0x080123fc
 800fac8:	080124ce 	.word	0x080124ce

0800facc <__sflush_r>:
 800facc:	898a      	ldrh	r2, [r1, #12]
 800face:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fad2:	4605      	mov	r5, r0
 800fad4:	0710      	lsls	r0, r2, #28
 800fad6:	460c      	mov	r4, r1
 800fad8:	d458      	bmi.n	800fb8c <__sflush_r+0xc0>
 800fada:	684b      	ldr	r3, [r1, #4]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	dc05      	bgt.n	800faec <__sflush_r+0x20>
 800fae0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	dc02      	bgt.n	800faec <__sflush_r+0x20>
 800fae6:	2000      	movs	r0, #0
 800fae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800faee:	2e00      	cmp	r6, #0
 800faf0:	d0f9      	beq.n	800fae6 <__sflush_r+0x1a>
 800faf2:	2300      	movs	r3, #0
 800faf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800faf8:	682f      	ldr	r7, [r5, #0]
 800fafa:	602b      	str	r3, [r5, #0]
 800fafc:	d032      	beq.n	800fb64 <__sflush_r+0x98>
 800fafe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb00:	89a3      	ldrh	r3, [r4, #12]
 800fb02:	075a      	lsls	r2, r3, #29
 800fb04:	d505      	bpl.n	800fb12 <__sflush_r+0x46>
 800fb06:	6863      	ldr	r3, [r4, #4]
 800fb08:	1ac0      	subs	r0, r0, r3
 800fb0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb0c:	b10b      	cbz	r3, 800fb12 <__sflush_r+0x46>
 800fb0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb10:	1ac0      	subs	r0, r0, r3
 800fb12:	2300      	movs	r3, #0
 800fb14:	4602      	mov	r2, r0
 800fb16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb18:	6a21      	ldr	r1, [r4, #32]
 800fb1a:	4628      	mov	r0, r5
 800fb1c:	47b0      	blx	r6
 800fb1e:	1c43      	adds	r3, r0, #1
 800fb20:	89a3      	ldrh	r3, [r4, #12]
 800fb22:	d106      	bne.n	800fb32 <__sflush_r+0x66>
 800fb24:	6829      	ldr	r1, [r5, #0]
 800fb26:	291d      	cmp	r1, #29
 800fb28:	d82c      	bhi.n	800fb84 <__sflush_r+0xb8>
 800fb2a:	4a2a      	ldr	r2, [pc, #168]	; (800fbd4 <__sflush_r+0x108>)
 800fb2c:	40ca      	lsrs	r2, r1
 800fb2e:	07d6      	lsls	r6, r2, #31
 800fb30:	d528      	bpl.n	800fb84 <__sflush_r+0xb8>
 800fb32:	2200      	movs	r2, #0
 800fb34:	6062      	str	r2, [r4, #4]
 800fb36:	04d9      	lsls	r1, r3, #19
 800fb38:	6922      	ldr	r2, [r4, #16]
 800fb3a:	6022      	str	r2, [r4, #0]
 800fb3c:	d504      	bpl.n	800fb48 <__sflush_r+0x7c>
 800fb3e:	1c42      	adds	r2, r0, #1
 800fb40:	d101      	bne.n	800fb46 <__sflush_r+0x7a>
 800fb42:	682b      	ldr	r3, [r5, #0]
 800fb44:	b903      	cbnz	r3, 800fb48 <__sflush_r+0x7c>
 800fb46:	6560      	str	r0, [r4, #84]	; 0x54
 800fb48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb4a:	602f      	str	r7, [r5, #0]
 800fb4c:	2900      	cmp	r1, #0
 800fb4e:	d0ca      	beq.n	800fae6 <__sflush_r+0x1a>
 800fb50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb54:	4299      	cmp	r1, r3
 800fb56:	d002      	beq.n	800fb5e <__sflush_r+0x92>
 800fb58:	4628      	mov	r0, r5
 800fb5a:	f7fe fa11 	bl	800df80 <_free_r>
 800fb5e:	2000      	movs	r0, #0
 800fb60:	6360      	str	r0, [r4, #52]	; 0x34
 800fb62:	e7c1      	b.n	800fae8 <__sflush_r+0x1c>
 800fb64:	6a21      	ldr	r1, [r4, #32]
 800fb66:	2301      	movs	r3, #1
 800fb68:	4628      	mov	r0, r5
 800fb6a:	47b0      	blx	r6
 800fb6c:	1c41      	adds	r1, r0, #1
 800fb6e:	d1c7      	bne.n	800fb00 <__sflush_r+0x34>
 800fb70:	682b      	ldr	r3, [r5, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d0c4      	beq.n	800fb00 <__sflush_r+0x34>
 800fb76:	2b1d      	cmp	r3, #29
 800fb78:	d001      	beq.n	800fb7e <__sflush_r+0xb2>
 800fb7a:	2b16      	cmp	r3, #22
 800fb7c:	d101      	bne.n	800fb82 <__sflush_r+0xb6>
 800fb7e:	602f      	str	r7, [r5, #0]
 800fb80:	e7b1      	b.n	800fae6 <__sflush_r+0x1a>
 800fb82:	89a3      	ldrh	r3, [r4, #12]
 800fb84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb88:	81a3      	strh	r3, [r4, #12]
 800fb8a:	e7ad      	b.n	800fae8 <__sflush_r+0x1c>
 800fb8c:	690f      	ldr	r7, [r1, #16]
 800fb8e:	2f00      	cmp	r7, #0
 800fb90:	d0a9      	beq.n	800fae6 <__sflush_r+0x1a>
 800fb92:	0793      	lsls	r3, r2, #30
 800fb94:	680e      	ldr	r6, [r1, #0]
 800fb96:	bf08      	it	eq
 800fb98:	694b      	ldreq	r3, [r1, #20]
 800fb9a:	600f      	str	r7, [r1, #0]
 800fb9c:	bf18      	it	ne
 800fb9e:	2300      	movne	r3, #0
 800fba0:	eba6 0807 	sub.w	r8, r6, r7
 800fba4:	608b      	str	r3, [r1, #8]
 800fba6:	f1b8 0f00 	cmp.w	r8, #0
 800fbaa:	dd9c      	ble.n	800fae6 <__sflush_r+0x1a>
 800fbac:	6a21      	ldr	r1, [r4, #32]
 800fbae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fbb0:	4643      	mov	r3, r8
 800fbb2:	463a      	mov	r2, r7
 800fbb4:	4628      	mov	r0, r5
 800fbb6:	47b0      	blx	r6
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	dc06      	bgt.n	800fbca <__sflush_r+0xfe>
 800fbbc:	89a3      	ldrh	r3, [r4, #12]
 800fbbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbc2:	81a3      	strh	r3, [r4, #12]
 800fbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbc8:	e78e      	b.n	800fae8 <__sflush_r+0x1c>
 800fbca:	4407      	add	r7, r0
 800fbcc:	eba8 0800 	sub.w	r8, r8, r0
 800fbd0:	e7e9      	b.n	800fba6 <__sflush_r+0xda>
 800fbd2:	bf00      	nop
 800fbd4:	20400001 	.word	0x20400001

0800fbd8 <_fflush_r>:
 800fbd8:	b538      	push	{r3, r4, r5, lr}
 800fbda:	690b      	ldr	r3, [r1, #16]
 800fbdc:	4605      	mov	r5, r0
 800fbde:	460c      	mov	r4, r1
 800fbe0:	b913      	cbnz	r3, 800fbe8 <_fflush_r+0x10>
 800fbe2:	2500      	movs	r5, #0
 800fbe4:	4628      	mov	r0, r5
 800fbe6:	bd38      	pop	{r3, r4, r5, pc}
 800fbe8:	b118      	cbz	r0, 800fbf2 <_fflush_r+0x1a>
 800fbea:	6983      	ldr	r3, [r0, #24]
 800fbec:	b90b      	cbnz	r3, 800fbf2 <_fflush_r+0x1a>
 800fbee:	f7fe f8db 	bl	800dda8 <__sinit>
 800fbf2:	4b14      	ldr	r3, [pc, #80]	; (800fc44 <_fflush_r+0x6c>)
 800fbf4:	429c      	cmp	r4, r3
 800fbf6:	d11b      	bne.n	800fc30 <_fflush_r+0x58>
 800fbf8:	686c      	ldr	r4, [r5, #4]
 800fbfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d0ef      	beq.n	800fbe2 <_fflush_r+0xa>
 800fc02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fc04:	07d0      	lsls	r0, r2, #31
 800fc06:	d404      	bmi.n	800fc12 <_fflush_r+0x3a>
 800fc08:	0599      	lsls	r1, r3, #22
 800fc0a:	d402      	bmi.n	800fc12 <_fflush_r+0x3a>
 800fc0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc0e:	f7fe f98e 	bl	800df2e <__retarget_lock_acquire_recursive>
 800fc12:	4628      	mov	r0, r5
 800fc14:	4621      	mov	r1, r4
 800fc16:	f7ff ff59 	bl	800facc <__sflush_r>
 800fc1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc1c:	07da      	lsls	r2, r3, #31
 800fc1e:	4605      	mov	r5, r0
 800fc20:	d4e0      	bmi.n	800fbe4 <_fflush_r+0xc>
 800fc22:	89a3      	ldrh	r3, [r4, #12]
 800fc24:	059b      	lsls	r3, r3, #22
 800fc26:	d4dd      	bmi.n	800fbe4 <_fflush_r+0xc>
 800fc28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc2a:	f7fe f981 	bl	800df30 <__retarget_lock_release_recursive>
 800fc2e:	e7d9      	b.n	800fbe4 <_fflush_r+0xc>
 800fc30:	4b05      	ldr	r3, [pc, #20]	; (800fc48 <_fflush_r+0x70>)
 800fc32:	429c      	cmp	r4, r3
 800fc34:	d101      	bne.n	800fc3a <_fflush_r+0x62>
 800fc36:	68ac      	ldr	r4, [r5, #8]
 800fc38:	e7df      	b.n	800fbfa <_fflush_r+0x22>
 800fc3a:	4b04      	ldr	r3, [pc, #16]	; (800fc4c <_fflush_r+0x74>)
 800fc3c:	429c      	cmp	r4, r3
 800fc3e:	bf08      	it	eq
 800fc40:	68ec      	ldreq	r4, [r5, #12]
 800fc42:	e7da      	b.n	800fbfa <_fflush_r+0x22>
 800fc44:	080123a8 	.word	0x080123a8
 800fc48:	080123c8 	.word	0x080123c8
 800fc4c:	08012388 	.word	0x08012388

0800fc50 <fiprintf>:
 800fc50:	b40e      	push	{r1, r2, r3}
 800fc52:	b503      	push	{r0, r1, lr}
 800fc54:	4601      	mov	r1, r0
 800fc56:	ab03      	add	r3, sp, #12
 800fc58:	4805      	ldr	r0, [pc, #20]	; (800fc70 <fiprintf+0x20>)
 800fc5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc5e:	6800      	ldr	r0, [r0, #0]
 800fc60:	9301      	str	r3, [sp, #4]
 800fc62:	f000 fc53 	bl	801050c <_vfiprintf_r>
 800fc66:	b002      	add	sp, #8
 800fc68:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc6c:	b003      	add	sp, #12
 800fc6e:	4770      	bx	lr
 800fc70:	24000014 	.word	0x24000014

0800fc74 <_localeconv_r>:
 800fc74:	4800      	ldr	r0, [pc, #0]	; (800fc78 <_localeconv_r+0x4>)
 800fc76:	4770      	bx	lr
 800fc78:	24000168 	.word	0x24000168

0800fc7c <_lseek_r>:
 800fc7c:	b538      	push	{r3, r4, r5, lr}
 800fc7e:	4d07      	ldr	r5, [pc, #28]	; (800fc9c <_lseek_r+0x20>)
 800fc80:	4604      	mov	r4, r0
 800fc82:	4608      	mov	r0, r1
 800fc84:	4611      	mov	r1, r2
 800fc86:	2200      	movs	r2, #0
 800fc88:	602a      	str	r2, [r5, #0]
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	f7f2 ffc6 	bl	8002c1c <_lseek>
 800fc90:	1c43      	adds	r3, r0, #1
 800fc92:	d102      	bne.n	800fc9a <_lseek_r+0x1e>
 800fc94:	682b      	ldr	r3, [r5, #0]
 800fc96:	b103      	cbz	r3, 800fc9a <_lseek_r+0x1e>
 800fc98:	6023      	str	r3, [r4, #0]
 800fc9a:	bd38      	pop	{r3, r4, r5, pc}
 800fc9c:	24005220 	.word	0x24005220

0800fca0 <__swhatbuf_r>:
 800fca0:	b570      	push	{r4, r5, r6, lr}
 800fca2:	460e      	mov	r6, r1
 800fca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fca8:	2900      	cmp	r1, #0
 800fcaa:	b096      	sub	sp, #88	; 0x58
 800fcac:	4614      	mov	r4, r2
 800fcae:	461d      	mov	r5, r3
 800fcb0:	da08      	bge.n	800fcc4 <__swhatbuf_r+0x24>
 800fcb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	602a      	str	r2, [r5, #0]
 800fcba:	061a      	lsls	r2, r3, #24
 800fcbc:	d410      	bmi.n	800fce0 <__swhatbuf_r+0x40>
 800fcbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fcc2:	e00e      	b.n	800fce2 <__swhatbuf_r+0x42>
 800fcc4:	466a      	mov	r2, sp
 800fcc6:	f000 fd6b 	bl	80107a0 <_fstat_r>
 800fcca:	2800      	cmp	r0, #0
 800fccc:	dbf1      	blt.n	800fcb2 <__swhatbuf_r+0x12>
 800fcce:	9a01      	ldr	r2, [sp, #4]
 800fcd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fcd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fcd8:	425a      	negs	r2, r3
 800fcda:	415a      	adcs	r2, r3
 800fcdc:	602a      	str	r2, [r5, #0]
 800fcde:	e7ee      	b.n	800fcbe <__swhatbuf_r+0x1e>
 800fce0:	2340      	movs	r3, #64	; 0x40
 800fce2:	2000      	movs	r0, #0
 800fce4:	6023      	str	r3, [r4, #0]
 800fce6:	b016      	add	sp, #88	; 0x58
 800fce8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fcec <__smakebuf_r>:
 800fcec:	898b      	ldrh	r3, [r1, #12]
 800fcee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fcf0:	079d      	lsls	r5, r3, #30
 800fcf2:	4606      	mov	r6, r0
 800fcf4:	460c      	mov	r4, r1
 800fcf6:	d507      	bpl.n	800fd08 <__smakebuf_r+0x1c>
 800fcf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fcfc:	6023      	str	r3, [r4, #0]
 800fcfe:	6123      	str	r3, [r4, #16]
 800fd00:	2301      	movs	r3, #1
 800fd02:	6163      	str	r3, [r4, #20]
 800fd04:	b002      	add	sp, #8
 800fd06:	bd70      	pop	{r4, r5, r6, pc}
 800fd08:	ab01      	add	r3, sp, #4
 800fd0a:	466a      	mov	r2, sp
 800fd0c:	f7ff ffc8 	bl	800fca0 <__swhatbuf_r>
 800fd10:	9900      	ldr	r1, [sp, #0]
 800fd12:	4605      	mov	r5, r0
 800fd14:	4630      	mov	r0, r6
 800fd16:	f7fe f99f 	bl	800e058 <_malloc_r>
 800fd1a:	b948      	cbnz	r0, 800fd30 <__smakebuf_r+0x44>
 800fd1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd20:	059a      	lsls	r2, r3, #22
 800fd22:	d4ef      	bmi.n	800fd04 <__smakebuf_r+0x18>
 800fd24:	f023 0303 	bic.w	r3, r3, #3
 800fd28:	f043 0302 	orr.w	r3, r3, #2
 800fd2c:	81a3      	strh	r3, [r4, #12]
 800fd2e:	e7e3      	b.n	800fcf8 <__smakebuf_r+0xc>
 800fd30:	4b0d      	ldr	r3, [pc, #52]	; (800fd68 <__smakebuf_r+0x7c>)
 800fd32:	62b3      	str	r3, [r6, #40]	; 0x28
 800fd34:	89a3      	ldrh	r3, [r4, #12]
 800fd36:	6020      	str	r0, [r4, #0]
 800fd38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd3c:	81a3      	strh	r3, [r4, #12]
 800fd3e:	9b00      	ldr	r3, [sp, #0]
 800fd40:	6163      	str	r3, [r4, #20]
 800fd42:	9b01      	ldr	r3, [sp, #4]
 800fd44:	6120      	str	r0, [r4, #16]
 800fd46:	b15b      	cbz	r3, 800fd60 <__smakebuf_r+0x74>
 800fd48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd4c:	4630      	mov	r0, r6
 800fd4e:	f000 fd39 	bl	80107c4 <_isatty_r>
 800fd52:	b128      	cbz	r0, 800fd60 <__smakebuf_r+0x74>
 800fd54:	89a3      	ldrh	r3, [r4, #12]
 800fd56:	f023 0303 	bic.w	r3, r3, #3
 800fd5a:	f043 0301 	orr.w	r3, r3, #1
 800fd5e:	81a3      	strh	r3, [r4, #12]
 800fd60:	89a0      	ldrh	r0, [r4, #12]
 800fd62:	4305      	orrs	r5, r0
 800fd64:	81a5      	strh	r5, [r4, #12]
 800fd66:	e7cd      	b.n	800fd04 <__smakebuf_r+0x18>
 800fd68:	0800dd41 	.word	0x0800dd41

0800fd6c <__malloc_lock>:
 800fd6c:	4801      	ldr	r0, [pc, #4]	; (800fd74 <__malloc_lock+0x8>)
 800fd6e:	f7fe b8de 	b.w	800df2e <__retarget_lock_acquire_recursive>
 800fd72:	bf00      	nop
 800fd74:	24005214 	.word	0x24005214

0800fd78 <__malloc_unlock>:
 800fd78:	4801      	ldr	r0, [pc, #4]	; (800fd80 <__malloc_unlock+0x8>)
 800fd7a:	f7fe b8d9 	b.w	800df30 <__retarget_lock_release_recursive>
 800fd7e:	bf00      	nop
 800fd80:	24005214 	.word	0x24005214

0800fd84 <_Balloc>:
 800fd84:	b570      	push	{r4, r5, r6, lr}
 800fd86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fd88:	4604      	mov	r4, r0
 800fd8a:	460d      	mov	r5, r1
 800fd8c:	b976      	cbnz	r6, 800fdac <_Balloc+0x28>
 800fd8e:	2010      	movs	r0, #16
 800fd90:	f7fe f8d0 	bl	800df34 <malloc>
 800fd94:	4602      	mov	r2, r0
 800fd96:	6260      	str	r0, [r4, #36]	; 0x24
 800fd98:	b920      	cbnz	r0, 800fda4 <_Balloc+0x20>
 800fd9a:	4b18      	ldr	r3, [pc, #96]	; (800fdfc <_Balloc+0x78>)
 800fd9c:	4818      	ldr	r0, [pc, #96]	; (800fe00 <_Balloc+0x7c>)
 800fd9e:	2166      	movs	r1, #102	; 0x66
 800fda0:	f7ff f86c 	bl	800ee7c <__assert_func>
 800fda4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fda8:	6006      	str	r6, [r0, #0]
 800fdaa:	60c6      	str	r6, [r0, #12]
 800fdac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fdae:	68f3      	ldr	r3, [r6, #12]
 800fdb0:	b183      	cbz	r3, 800fdd4 <_Balloc+0x50>
 800fdb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fdb4:	68db      	ldr	r3, [r3, #12]
 800fdb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fdba:	b9b8      	cbnz	r0, 800fdec <_Balloc+0x68>
 800fdbc:	2101      	movs	r1, #1
 800fdbe:	fa01 f605 	lsl.w	r6, r1, r5
 800fdc2:	1d72      	adds	r2, r6, #5
 800fdc4:	0092      	lsls	r2, r2, #2
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	f000 fb60 	bl	801048c <_calloc_r>
 800fdcc:	b160      	cbz	r0, 800fde8 <_Balloc+0x64>
 800fdce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fdd2:	e00e      	b.n	800fdf2 <_Balloc+0x6e>
 800fdd4:	2221      	movs	r2, #33	; 0x21
 800fdd6:	2104      	movs	r1, #4
 800fdd8:	4620      	mov	r0, r4
 800fdda:	f000 fb57 	bl	801048c <_calloc_r>
 800fdde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fde0:	60f0      	str	r0, [r6, #12]
 800fde2:	68db      	ldr	r3, [r3, #12]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d1e4      	bne.n	800fdb2 <_Balloc+0x2e>
 800fde8:	2000      	movs	r0, #0
 800fdea:	bd70      	pop	{r4, r5, r6, pc}
 800fdec:	6802      	ldr	r2, [r0, #0]
 800fdee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fdf8:	e7f7      	b.n	800fdea <_Balloc+0x66>
 800fdfa:	bf00      	nop
 800fdfc:	08012420 	.word	0x08012420
 800fe00:	08012547 	.word	0x08012547

0800fe04 <_Bfree>:
 800fe04:	b570      	push	{r4, r5, r6, lr}
 800fe06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fe08:	4605      	mov	r5, r0
 800fe0a:	460c      	mov	r4, r1
 800fe0c:	b976      	cbnz	r6, 800fe2c <_Bfree+0x28>
 800fe0e:	2010      	movs	r0, #16
 800fe10:	f7fe f890 	bl	800df34 <malloc>
 800fe14:	4602      	mov	r2, r0
 800fe16:	6268      	str	r0, [r5, #36]	; 0x24
 800fe18:	b920      	cbnz	r0, 800fe24 <_Bfree+0x20>
 800fe1a:	4b09      	ldr	r3, [pc, #36]	; (800fe40 <_Bfree+0x3c>)
 800fe1c:	4809      	ldr	r0, [pc, #36]	; (800fe44 <_Bfree+0x40>)
 800fe1e:	218a      	movs	r1, #138	; 0x8a
 800fe20:	f7ff f82c 	bl	800ee7c <__assert_func>
 800fe24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe28:	6006      	str	r6, [r0, #0]
 800fe2a:	60c6      	str	r6, [r0, #12]
 800fe2c:	b13c      	cbz	r4, 800fe3e <_Bfree+0x3a>
 800fe2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fe30:	6862      	ldr	r2, [r4, #4]
 800fe32:	68db      	ldr	r3, [r3, #12]
 800fe34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fe38:	6021      	str	r1, [r4, #0]
 800fe3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fe3e:	bd70      	pop	{r4, r5, r6, pc}
 800fe40:	08012420 	.word	0x08012420
 800fe44:	08012547 	.word	0x08012547

0800fe48 <__multadd>:
 800fe48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe4c:	690d      	ldr	r5, [r1, #16]
 800fe4e:	4607      	mov	r7, r0
 800fe50:	460c      	mov	r4, r1
 800fe52:	461e      	mov	r6, r3
 800fe54:	f101 0c14 	add.w	ip, r1, #20
 800fe58:	2000      	movs	r0, #0
 800fe5a:	f8dc 3000 	ldr.w	r3, [ip]
 800fe5e:	b299      	uxth	r1, r3
 800fe60:	fb02 6101 	mla	r1, r2, r1, r6
 800fe64:	0c1e      	lsrs	r6, r3, #16
 800fe66:	0c0b      	lsrs	r3, r1, #16
 800fe68:	fb02 3306 	mla	r3, r2, r6, r3
 800fe6c:	b289      	uxth	r1, r1
 800fe6e:	3001      	adds	r0, #1
 800fe70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fe74:	4285      	cmp	r5, r0
 800fe76:	f84c 1b04 	str.w	r1, [ip], #4
 800fe7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe7e:	dcec      	bgt.n	800fe5a <__multadd+0x12>
 800fe80:	b30e      	cbz	r6, 800fec6 <__multadd+0x7e>
 800fe82:	68a3      	ldr	r3, [r4, #8]
 800fe84:	42ab      	cmp	r3, r5
 800fe86:	dc19      	bgt.n	800febc <__multadd+0x74>
 800fe88:	6861      	ldr	r1, [r4, #4]
 800fe8a:	4638      	mov	r0, r7
 800fe8c:	3101      	adds	r1, #1
 800fe8e:	f7ff ff79 	bl	800fd84 <_Balloc>
 800fe92:	4680      	mov	r8, r0
 800fe94:	b928      	cbnz	r0, 800fea2 <__multadd+0x5a>
 800fe96:	4602      	mov	r2, r0
 800fe98:	4b0c      	ldr	r3, [pc, #48]	; (800fecc <__multadd+0x84>)
 800fe9a:	480d      	ldr	r0, [pc, #52]	; (800fed0 <__multadd+0x88>)
 800fe9c:	21b5      	movs	r1, #181	; 0xb5
 800fe9e:	f7fe ffed 	bl	800ee7c <__assert_func>
 800fea2:	6922      	ldr	r2, [r4, #16]
 800fea4:	3202      	adds	r2, #2
 800fea6:	f104 010c 	add.w	r1, r4, #12
 800feaa:	0092      	lsls	r2, r2, #2
 800feac:	300c      	adds	r0, #12
 800feae:	f7fe f851 	bl	800df54 <memcpy>
 800feb2:	4621      	mov	r1, r4
 800feb4:	4638      	mov	r0, r7
 800feb6:	f7ff ffa5 	bl	800fe04 <_Bfree>
 800feba:	4644      	mov	r4, r8
 800febc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fec0:	3501      	adds	r5, #1
 800fec2:	615e      	str	r6, [r3, #20]
 800fec4:	6125      	str	r5, [r4, #16]
 800fec6:	4620      	mov	r0, r4
 800fec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fecc:	08012536 	.word	0x08012536
 800fed0:	08012547 	.word	0x08012547

0800fed4 <__hi0bits>:
 800fed4:	0c03      	lsrs	r3, r0, #16
 800fed6:	041b      	lsls	r3, r3, #16
 800fed8:	b9d3      	cbnz	r3, 800ff10 <__hi0bits+0x3c>
 800feda:	0400      	lsls	r0, r0, #16
 800fedc:	2310      	movs	r3, #16
 800fede:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fee2:	bf04      	itt	eq
 800fee4:	0200      	lsleq	r0, r0, #8
 800fee6:	3308      	addeq	r3, #8
 800fee8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800feec:	bf04      	itt	eq
 800feee:	0100      	lsleq	r0, r0, #4
 800fef0:	3304      	addeq	r3, #4
 800fef2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fef6:	bf04      	itt	eq
 800fef8:	0080      	lsleq	r0, r0, #2
 800fefa:	3302      	addeq	r3, #2
 800fefc:	2800      	cmp	r0, #0
 800fefe:	db05      	blt.n	800ff0c <__hi0bits+0x38>
 800ff00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ff04:	f103 0301 	add.w	r3, r3, #1
 800ff08:	bf08      	it	eq
 800ff0a:	2320      	moveq	r3, #32
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	4770      	bx	lr
 800ff10:	2300      	movs	r3, #0
 800ff12:	e7e4      	b.n	800fede <__hi0bits+0xa>

0800ff14 <__lo0bits>:
 800ff14:	6803      	ldr	r3, [r0, #0]
 800ff16:	f013 0207 	ands.w	r2, r3, #7
 800ff1a:	4601      	mov	r1, r0
 800ff1c:	d00b      	beq.n	800ff36 <__lo0bits+0x22>
 800ff1e:	07da      	lsls	r2, r3, #31
 800ff20:	d423      	bmi.n	800ff6a <__lo0bits+0x56>
 800ff22:	0798      	lsls	r0, r3, #30
 800ff24:	bf49      	itett	mi
 800ff26:	085b      	lsrmi	r3, r3, #1
 800ff28:	089b      	lsrpl	r3, r3, #2
 800ff2a:	2001      	movmi	r0, #1
 800ff2c:	600b      	strmi	r3, [r1, #0]
 800ff2e:	bf5c      	itt	pl
 800ff30:	600b      	strpl	r3, [r1, #0]
 800ff32:	2002      	movpl	r0, #2
 800ff34:	4770      	bx	lr
 800ff36:	b298      	uxth	r0, r3
 800ff38:	b9a8      	cbnz	r0, 800ff66 <__lo0bits+0x52>
 800ff3a:	0c1b      	lsrs	r3, r3, #16
 800ff3c:	2010      	movs	r0, #16
 800ff3e:	b2da      	uxtb	r2, r3
 800ff40:	b90a      	cbnz	r2, 800ff46 <__lo0bits+0x32>
 800ff42:	3008      	adds	r0, #8
 800ff44:	0a1b      	lsrs	r3, r3, #8
 800ff46:	071a      	lsls	r2, r3, #28
 800ff48:	bf04      	itt	eq
 800ff4a:	091b      	lsreq	r3, r3, #4
 800ff4c:	3004      	addeq	r0, #4
 800ff4e:	079a      	lsls	r2, r3, #30
 800ff50:	bf04      	itt	eq
 800ff52:	089b      	lsreq	r3, r3, #2
 800ff54:	3002      	addeq	r0, #2
 800ff56:	07da      	lsls	r2, r3, #31
 800ff58:	d403      	bmi.n	800ff62 <__lo0bits+0x4e>
 800ff5a:	085b      	lsrs	r3, r3, #1
 800ff5c:	f100 0001 	add.w	r0, r0, #1
 800ff60:	d005      	beq.n	800ff6e <__lo0bits+0x5a>
 800ff62:	600b      	str	r3, [r1, #0]
 800ff64:	4770      	bx	lr
 800ff66:	4610      	mov	r0, r2
 800ff68:	e7e9      	b.n	800ff3e <__lo0bits+0x2a>
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	4770      	bx	lr
 800ff6e:	2020      	movs	r0, #32
 800ff70:	4770      	bx	lr
	...

0800ff74 <__i2b>:
 800ff74:	b510      	push	{r4, lr}
 800ff76:	460c      	mov	r4, r1
 800ff78:	2101      	movs	r1, #1
 800ff7a:	f7ff ff03 	bl	800fd84 <_Balloc>
 800ff7e:	4602      	mov	r2, r0
 800ff80:	b928      	cbnz	r0, 800ff8e <__i2b+0x1a>
 800ff82:	4b05      	ldr	r3, [pc, #20]	; (800ff98 <__i2b+0x24>)
 800ff84:	4805      	ldr	r0, [pc, #20]	; (800ff9c <__i2b+0x28>)
 800ff86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ff8a:	f7fe ff77 	bl	800ee7c <__assert_func>
 800ff8e:	2301      	movs	r3, #1
 800ff90:	6144      	str	r4, [r0, #20]
 800ff92:	6103      	str	r3, [r0, #16]
 800ff94:	bd10      	pop	{r4, pc}
 800ff96:	bf00      	nop
 800ff98:	08012536 	.word	0x08012536
 800ff9c:	08012547 	.word	0x08012547

0800ffa0 <__multiply>:
 800ffa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa4:	4691      	mov	r9, r2
 800ffa6:	690a      	ldr	r2, [r1, #16]
 800ffa8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	bfb8      	it	lt
 800ffb0:	460b      	movlt	r3, r1
 800ffb2:	460c      	mov	r4, r1
 800ffb4:	bfbc      	itt	lt
 800ffb6:	464c      	movlt	r4, r9
 800ffb8:	4699      	movlt	r9, r3
 800ffba:	6927      	ldr	r7, [r4, #16]
 800ffbc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ffc0:	68a3      	ldr	r3, [r4, #8]
 800ffc2:	6861      	ldr	r1, [r4, #4]
 800ffc4:	eb07 060a 	add.w	r6, r7, sl
 800ffc8:	42b3      	cmp	r3, r6
 800ffca:	b085      	sub	sp, #20
 800ffcc:	bfb8      	it	lt
 800ffce:	3101      	addlt	r1, #1
 800ffd0:	f7ff fed8 	bl	800fd84 <_Balloc>
 800ffd4:	b930      	cbnz	r0, 800ffe4 <__multiply+0x44>
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	4b44      	ldr	r3, [pc, #272]	; (80100ec <__multiply+0x14c>)
 800ffda:	4845      	ldr	r0, [pc, #276]	; (80100f0 <__multiply+0x150>)
 800ffdc:	f240 115d 	movw	r1, #349	; 0x15d
 800ffe0:	f7fe ff4c 	bl	800ee7c <__assert_func>
 800ffe4:	f100 0514 	add.w	r5, r0, #20
 800ffe8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ffec:	462b      	mov	r3, r5
 800ffee:	2200      	movs	r2, #0
 800fff0:	4543      	cmp	r3, r8
 800fff2:	d321      	bcc.n	8010038 <__multiply+0x98>
 800fff4:	f104 0314 	add.w	r3, r4, #20
 800fff8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fffc:	f109 0314 	add.w	r3, r9, #20
 8010000:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010004:	9202      	str	r2, [sp, #8]
 8010006:	1b3a      	subs	r2, r7, r4
 8010008:	3a15      	subs	r2, #21
 801000a:	f022 0203 	bic.w	r2, r2, #3
 801000e:	3204      	adds	r2, #4
 8010010:	f104 0115 	add.w	r1, r4, #21
 8010014:	428f      	cmp	r7, r1
 8010016:	bf38      	it	cc
 8010018:	2204      	movcc	r2, #4
 801001a:	9201      	str	r2, [sp, #4]
 801001c:	9a02      	ldr	r2, [sp, #8]
 801001e:	9303      	str	r3, [sp, #12]
 8010020:	429a      	cmp	r2, r3
 8010022:	d80c      	bhi.n	801003e <__multiply+0x9e>
 8010024:	2e00      	cmp	r6, #0
 8010026:	dd03      	ble.n	8010030 <__multiply+0x90>
 8010028:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801002c:	2b00      	cmp	r3, #0
 801002e:	d05a      	beq.n	80100e6 <__multiply+0x146>
 8010030:	6106      	str	r6, [r0, #16]
 8010032:	b005      	add	sp, #20
 8010034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010038:	f843 2b04 	str.w	r2, [r3], #4
 801003c:	e7d8      	b.n	800fff0 <__multiply+0x50>
 801003e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010042:	f1ba 0f00 	cmp.w	sl, #0
 8010046:	d024      	beq.n	8010092 <__multiply+0xf2>
 8010048:	f104 0e14 	add.w	lr, r4, #20
 801004c:	46a9      	mov	r9, r5
 801004e:	f04f 0c00 	mov.w	ip, #0
 8010052:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010056:	f8d9 1000 	ldr.w	r1, [r9]
 801005a:	fa1f fb82 	uxth.w	fp, r2
 801005e:	b289      	uxth	r1, r1
 8010060:	fb0a 110b 	mla	r1, sl, fp, r1
 8010064:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010068:	f8d9 2000 	ldr.w	r2, [r9]
 801006c:	4461      	add	r1, ip
 801006e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010072:	fb0a c20b 	mla	r2, sl, fp, ip
 8010076:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801007a:	b289      	uxth	r1, r1
 801007c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010080:	4577      	cmp	r7, lr
 8010082:	f849 1b04 	str.w	r1, [r9], #4
 8010086:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801008a:	d8e2      	bhi.n	8010052 <__multiply+0xb2>
 801008c:	9a01      	ldr	r2, [sp, #4]
 801008e:	f845 c002 	str.w	ip, [r5, r2]
 8010092:	9a03      	ldr	r2, [sp, #12]
 8010094:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010098:	3304      	adds	r3, #4
 801009a:	f1b9 0f00 	cmp.w	r9, #0
 801009e:	d020      	beq.n	80100e2 <__multiply+0x142>
 80100a0:	6829      	ldr	r1, [r5, #0]
 80100a2:	f104 0c14 	add.w	ip, r4, #20
 80100a6:	46ae      	mov	lr, r5
 80100a8:	f04f 0a00 	mov.w	sl, #0
 80100ac:	f8bc b000 	ldrh.w	fp, [ip]
 80100b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80100b4:	fb09 220b 	mla	r2, r9, fp, r2
 80100b8:	4492      	add	sl, r2
 80100ba:	b289      	uxth	r1, r1
 80100bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80100c0:	f84e 1b04 	str.w	r1, [lr], #4
 80100c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80100c8:	f8be 1000 	ldrh.w	r1, [lr]
 80100cc:	0c12      	lsrs	r2, r2, #16
 80100ce:	fb09 1102 	mla	r1, r9, r2, r1
 80100d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80100d6:	4567      	cmp	r7, ip
 80100d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80100dc:	d8e6      	bhi.n	80100ac <__multiply+0x10c>
 80100de:	9a01      	ldr	r2, [sp, #4]
 80100e0:	50a9      	str	r1, [r5, r2]
 80100e2:	3504      	adds	r5, #4
 80100e4:	e79a      	b.n	801001c <__multiply+0x7c>
 80100e6:	3e01      	subs	r6, #1
 80100e8:	e79c      	b.n	8010024 <__multiply+0x84>
 80100ea:	bf00      	nop
 80100ec:	08012536 	.word	0x08012536
 80100f0:	08012547 	.word	0x08012547

080100f4 <__pow5mult>:
 80100f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100f8:	4615      	mov	r5, r2
 80100fa:	f012 0203 	ands.w	r2, r2, #3
 80100fe:	4606      	mov	r6, r0
 8010100:	460f      	mov	r7, r1
 8010102:	d007      	beq.n	8010114 <__pow5mult+0x20>
 8010104:	4c25      	ldr	r4, [pc, #148]	; (801019c <__pow5mult+0xa8>)
 8010106:	3a01      	subs	r2, #1
 8010108:	2300      	movs	r3, #0
 801010a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801010e:	f7ff fe9b 	bl	800fe48 <__multadd>
 8010112:	4607      	mov	r7, r0
 8010114:	10ad      	asrs	r5, r5, #2
 8010116:	d03d      	beq.n	8010194 <__pow5mult+0xa0>
 8010118:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801011a:	b97c      	cbnz	r4, 801013c <__pow5mult+0x48>
 801011c:	2010      	movs	r0, #16
 801011e:	f7fd ff09 	bl	800df34 <malloc>
 8010122:	4602      	mov	r2, r0
 8010124:	6270      	str	r0, [r6, #36]	; 0x24
 8010126:	b928      	cbnz	r0, 8010134 <__pow5mult+0x40>
 8010128:	4b1d      	ldr	r3, [pc, #116]	; (80101a0 <__pow5mult+0xac>)
 801012a:	481e      	ldr	r0, [pc, #120]	; (80101a4 <__pow5mult+0xb0>)
 801012c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010130:	f7fe fea4 	bl	800ee7c <__assert_func>
 8010134:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010138:	6004      	str	r4, [r0, #0]
 801013a:	60c4      	str	r4, [r0, #12]
 801013c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010140:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010144:	b94c      	cbnz	r4, 801015a <__pow5mult+0x66>
 8010146:	f240 2171 	movw	r1, #625	; 0x271
 801014a:	4630      	mov	r0, r6
 801014c:	f7ff ff12 	bl	800ff74 <__i2b>
 8010150:	2300      	movs	r3, #0
 8010152:	f8c8 0008 	str.w	r0, [r8, #8]
 8010156:	4604      	mov	r4, r0
 8010158:	6003      	str	r3, [r0, #0]
 801015a:	f04f 0900 	mov.w	r9, #0
 801015e:	07eb      	lsls	r3, r5, #31
 8010160:	d50a      	bpl.n	8010178 <__pow5mult+0x84>
 8010162:	4639      	mov	r1, r7
 8010164:	4622      	mov	r2, r4
 8010166:	4630      	mov	r0, r6
 8010168:	f7ff ff1a 	bl	800ffa0 <__multiply>
 801016c:	4639      	mov	r1, r7
 801016e:	4680      	mov	r8, r0
 8010170:	4630      	mov	r0, r6
 8010172:	f7ff fe47 	bl	800fe04 <_Bfree>
 8010176:	4647      	mov	r7, r8
 8010178:	106d      	asrs	r5, r5, #1
 801017a:	d00b      	beq.n	8010194 <__pow5mult+0xa0>
 801017c:	6820      	ldr	r0, [r4, #0]
 801017e:	b938      	cbnz	r0, 8010190 <__pow5mult+0x9c>
 8010180:	4622      	mov	r2, r4
 8010182:	4621      	mov	r1, r4
 8010184:	4630      	mov	r0, r6
 8010186:	f7ff ff0b 	bl	800ffa0 <__multiply>
 801018a:	6020      	str	r0, [r4, #0]
 801018c:	f8c0 9000 	str.w	r9, [r0]
 8010190:	4604      	mov	r4, r0
 8010192:	e7e4      	b.n	801015e <__pow5mult+0x6a>
 8010194:	4638      	mov	r0, r7
 8010196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801019a:	bf00      	nop
 801019c:	08012698 	.word	0x08012698
 80101a0:	08012420 	.word	0x08012420
 80101a4:	08012547 	.word	0x08012547

080101a8 <__lshift>:
 80101a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101ac:	460c      	mov	r4, r1
 80101ae:	6849      	ldr	r1, [r1, #4]
 80101b0:	6923      	ldr	r3, [r4, #16]
 80101b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80101b6:	68a3      	ldr	r3, [r4, #8]
 80101b8:	4607      	mov	r7, r0
 80101ba:	4691      	mov	r9, r2
 80101bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80101c0:	f108 0601 	add.w	r6, r8, #1
 80101c4:	42b3      	cmp	r3, r6
 80101c6:	db0b      	blt.n	80101e0 <__lshift+0x38>
 80101c8:	4638      	mov	r0, r7
 80101ca:	f7ff fddb 	bl	800fd84 <_Balloc>
 80101ce:	4605      	mov	r5, r0
 80101d0:	b948      	cbnz	r0, 80101e6 <__lshift+0x3e>
 80101d2:	4602      	mov	r2, r0
 80101d4:	4b2a      	ldr	r3, [pc, #168]	; (8010280 <__lshift+0xd8>)
 80101d6:	482b      	ldr	r0, [pc, #172]	; (8010284 <__lshift+0xdc>)
 80101d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80101dc:	f7fe fe4e 	bl	800ee7c <__assert_func>
 80101e0:	3101      	adds	r1, #1
 80101e2:	005b      	lsls	r3, r3, #1
 80101e4:	e7ee      	b.n	80101c4 <__lshift+0x1c>
 80101e6:	2300      	movs	r3, #0
 80101e8:	f100 0114 	add.w	r1, r0, #20
 80101ec:	f100 0210 	add.w	r2, r0, #16
 80101f0:	4618      	mov	r0, r3
 80101f2:	4553      	cmp	r3, sl
 80101f4:	db37      	blt.n	8010266 <__lshift+0xbe>
 80101f6:	6920      	ldr	r0, [r4, #16]
 80101f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80101fc:	f104 0314 	add.w	r3, r4, #20
 8010200:	f019 091f 	ands.w	r9, r9, #31
 8010204:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010208:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801020c:	d02f      	beq.n	801026e <__lshift+0xc6>
 801020e:	f1c9 0e20 	rsb	lr, r9, #32
 8010212:	468a      	mov	sl, r1
 8010214:	f04f 0c00 	mov.w	ip, #0
 8010218:	681a      	ldr	r2, [r3, #0]
 801021a:	fa02 f209 	lsl.w	r2, r2, r9
 801021e:	ea42 020c 	orr.w	r2, r2, ip
 8010222:	f84a 2b04 	str.w	r2, [sl], #4
 8010226:	f853 2b04 	ldr.w	r2, [r3], #4
 801022a:	4298      	cmp	r0, r3
 801022c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010230:	d8f2      	bhi.n	8010218 <__lshift+0x70>
 8010232:	1b03      	subs	r3, r0, r4
 8010234:	3b15      	subs	r3, #21
 8010236:	f023 0303 	bic.w	r3, r3, #3
 801023a:	3304      	adds	r3, #4
 801023c:	f104 0215 	add.w	r2, r4, #21
 8010240:	4290      	cmp	r0, r2
 8010242:	bf38      	it	cc
 8010244:	2304      	movcc	r3, #4
 8010246:	f841 c003 	str.w	ip, [r1, r3]
 801024a:	f1bc 0f00 	cmp.w	ip, #0
 801024e:	d001      	beq.n	8010254 <__lshift+0xac>
 8010250:	f108 0602 	add.w	r6, r8, #2
 8010254:	3e01      	subs	r6, #1
 8010256:	4638      	mov	r0, r7
 8010258:	612e      	str	r6, [r5, #16]
 801025a:	4621      	mov	r1, r4
 801025c:	f7ff fdd2 	bl	800fe04 <_Bfree>
 8010260:	4628      	mov	r0, r5
 8010262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010266:	f842 0f04 	str.w	r0, [r2, #4]!
 801026a:	3301      	adds	r3, #1
 801026c:	e7c1      	b.n	80101f2 <__lshift+0x4a>
 801026e:	3904      	subs	r1, #4
 8010270:	f853 2b04 	ldr.w	r2, [r3], #4
 8010274:	f841 2f04 	str.w	r2, [r1, #4]!
 8010278:	4298      	cmp	r0, r3
 801027a:	d8f9      	bhi.n	8010270 <__lshift+0xc8>
 801027c:	e7ea      	b.n	8010254 <__lshift+0xac>
 801027e:	bf00      	nop
 8010280:	08012536 	.word	0x08012536
 8010284:	08012547 	.word	0x08012547

08010288 <__mcmp>:
 8010288:	b530      	push	{r4, r5, lr}
 801028a:	6902      	ldr	r2, [r0, #16]
 801028c:	690c      	ldr	r4, [r1, #16]
 801028e:	1b12      	subs	r2, r2, r4
 8010290:	d10e      	bne.n	80102b0 <__mcmp+0x28>
 8010292:	f100 0314 	add.w	r3, r0, #20
 8010296:	3114      	adds	r1, #20
 8010298:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801029c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80102a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80102a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80102a8:	42a5      	cmp	r5, r4
 80102aa:	d003      	beq.n	80102b4 <__mcmp+0x2c>
 80102ac:	d305      	bcc.n	80102ba <__mcmp+0x32>
 80102ae:	2201      	movs	r2, #1
 80102b0:	4610      	mov	r0, r2
 80102b2:	bd30      	pop	{r4, r5, pc}
 80102b4:	4283      	cmp	r3, r0
 80102b6:	d3f3      	bcc.n	80102a0 <__mcmp+0x18>
 80102b8:	e7fa      	b.n	80102b0 <__mcmp+0x28>
 80102ba:	f04f 32ff 	mov.w	r2, #4294967295
 80102be:	e7f7      	b.n	80102b0 <__mcmp+0x28>

080102c0 <__mdiff>:
 80102c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102c4:	460c      	mov	r4, r1
 80102c6:	4606      	mov	r6, r0
 80102c8:	4611      	mov	r1, r2
 80102ca:	4620      	mov	r0, r4
 80102cc:	4690      	mov	r8, r2
 80102ce:	f7ff ffdb 	bl	8010288 <__mcmp>
 80102d2:	1e05      	subs	r5, r0, #0
 80102d4:	d110      	bne.n	80102f8 <__mdiff+0x38>
 80102d6:	4629      	mov	r1, r5
 80102d8:	4630      	mov	r0, r6
 80102da:	f7ff fd53 	bl	800fd84 <_Balloc>
 80102de:	b930      	cbnz	r0, 80102ee <__mdiff+0x2e>
 80102e0:	4b3a      	ldr	r3, [pc, #232]	; (80103cc <__mdiff+0x10c>)
 80102e2:	4602      	mov	r2, r0
 80102e4:	f240 2132 	movw	r1, #562	; 0x232
 80102e8:	4839      	ldr	r0, [pc, #228]	; (80103d0 <__mdiff+0x110>)
 80102ea:	f7fe fdc7 	bl	800ee7c <__assert_func>
 80102ee:	2301      	movs	r3, #1
 80102f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80102f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102f8:	bfa4      	itt	ge
 80102fa:	4643      	movge	r3, r8
 80102fc:	46a0      	movge	r8, r4
 80102fe:	4630      	mov	r0, r6
 8010300:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010304:	bfa6      	itte	ge
 8010306:	461c      	movge	r4, r3
 8010308:	2500      	movge	r5, #0
 801030a:	2501      	movlt	r5, #1
 801030c:	f7ff fd3a 	bl	800fd84 <_Balloc>
 8010310:	b920      	cbnz	r0, 801031c <__mdiff+0x5c>
 8010312:	4b2e      	ldr	r3, [pc, #184]	; (80103cc <__mdiff+0x10c>)
 8010314:	4602      	mov	r2, r0
 8010316:	f44f 7110 	mov.w	r1, #576	; 0x240
 801031a:	e7e5      	b.n	80102e8 <__mdiff+0x28>
 801031c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010320:	6926      	ldr	r6, [r4, #16]
 8010322:	60c5      	str	r5, [r0, #12]
 8010324:	f104 0914 	add.w	r9, r4, #20
 8010328:	f108 0514 	add.w	r5, r8, #20
 801032c:	f100 0e14 	add.w	lr, r0, #20
 8010330:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010334:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010338:	f108 0210 	add.w	r2, r8, #16
 801033c:	46f2      	mov	sl, lr
 801033e:	2100      	movs	r1, #0
 8010340:	f859 3b04 	ldr.w	r3, [r9], #4
 8010344:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010348:	fa1f f883 	uxth.w	r8, r3
 801034c:	fa11 f18b 	uxtah	r1, r1, fp
 8010350:	0c1b      	lsrs	r3, r3, #16
 8010352:	eba1 0808 	sub.w	r8, r1, r8
 8010356:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801035a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801035e:	fa1f f888 	uxth.w	r8, r8
 8010362:	1419      	asrs	r1, r3, #16
 8010364:	454e      	cmp	r6, r9
 8010366:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801036a:	f84a 3b04 	str.w	r3, [sl], #4
 801036e:	d8e7      	bhi.n	8010340 <__mdiff+0x80>
 8010370:	1b33      	subs	r3, r6, r4
 8010372:	3b15      	subs	r3, #21
 8010374:	f023 0303 	bic.w	r3, r3, #3
 8010378:	3304      	adds	r3, #4
 801037a:	3415      	adds	r4, #21
 801037c:	42a6      	cmp	r6, r4
 801037e:	bf38      	it	cc
 8010380:	2304      	movcc	r3, #4
 8010382:	441d      	add	r5, r3
 8010384:	4473      	add	r3, lr
 8010386:	469e      	mov	lr, r3
 8010388:	462e      	mov	r6, r5
 801038a:	4566      	cmp	r6, ip
 801038c:	d30e      	bcc.n	80103ac <__mdiff+0xec>
 801038e:	f10c 0203 	add.w	r2, ip, #3
 8010392:	1b52      	subs	r2, r2, r5
 8010394:	f022 0203 	bic.w	r2, r2, #3
 8010398:	3d03      	subs	r5, #3
 801039a:	45ac      	cmp	ip, r5
 801039c:	bf38      	it	cc
 801039e:	2200      	movcc	r2, #0
 80103a0:	441a      	add	r2, r3
 80103a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80103a6:	b17b      	cbz	r3, 80103c8 <__mdiff+0x108>
 80103a8:	6107      	str	r7, [r0, #16]
 80103aa:	e7a3      	b.n	80102f4 <__mdiff+0x34>
 80103ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80103b0:	fa11 f288 	uxtah	r2, r1, r8
 80103b4:	1414      	asrs	r4, r2, #16
 80103b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80103ba:	b292      	uxth	r2, r2
 80103bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80103c0:	f84e 2b04 	str.w	r2, [lr], #4
 80103c4:	1421      	asrs	r1, r4, #16
 80103c6:	e7e0      	b.n	801038a <__mdiff+0xca>
 80103c8:	3f01      	subs	r7, #1
 80103ca:	e7ea      	b.n	80103a2 <__mdiff+0xe2>
 80103cc:	08012536 	.word	0x08012536
 80103d0:	08012547 	.word	0x08012547

080103d4 <__d2b>:
 80103d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80103d8:	4689      	mov	r9, r1
 80103da:	2101      	movs	r1, #1
 80103dc:	ec57 6b10 	vmov	r6, r7, d0
 80103e0:	4690      	mov	r8, r2
 80103e2:	f7ff fccf 	bl	800fd84 <_Balloc>
 80103e6:	4604      	mov	r4, r0
 80103e8:	b930      	cbnz	r0, 80103f8 <__d2b+0x24>
 80103ea:	4602      	mov	r2, r0
 80103ec:	4b25      	ldr	r3, [pc, #148]	; (8010484 <__d2b+0xb0>)
 80103ee:	4826      	ldr	r0, [pc, #152]	; (8010488 <__d2b+0xb4>)
 80103f0:	f240 310a 	movw	r1, #778	; 0x30a
 80103f4:	f7fe fd42 	bl	800ee7c <__assert_func>
 80103f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80103fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010400:	bb35      	cbnz	r5, 8010450 <__d2b+0x7c>
 8010402:	2e00      	cmp	r6, #0
 8010404:	9301      	str	r3, [sp, #4]
 8010406:	d028      	beq.n	801045a <__d2b+0x86>
 8010408:	4668      	mov	r0, sp
 801040a:	9600      	str	r6, [sp, #0]
 801040c:	f7ff fd82 	bl	800ff14 <__lo0bits>
 8010410:	9900      	ldr	r1, [sp, #0]
 8010412:	b300      	cbz	r0, 8010456 <__d2b+0x82>
 8010414:	9a01      	ldr	r2, [sp, #4]
 8010416:	f1c0 0320 	rsb	r3, r0, #32
 801041a:	fa02 f303 	lsl.w	r3, r2, r3
 801041e:	430b      	orrs	r3, r1
 8010420:	40c2      	lsrs	r2, r0
 8010422:	6163      	str	r3, [r4, #20]
 8010424:	9201      	str	r2, [sp, #4]
 8010426:	9b01      	ldr	r3, [sp, #4]
 8010428:	61a3      	str	r3, [r4, #24]
 801042a:	2b00      	cmp	r3, #0
 801042c:	bf14      	ite	ne
 801042e:	2202      	movne	r2, #2
 8010430:	2201      	moveq	r2, #1
 8010432:	6122      	str	r2, [r4, #16]
 8010434:	b1d5      	cbz	r5, 801046c <__d2b+0x98>
 8010436:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801043a:	4405      	add	r5, r0
 801043c:	f8c9 5000 	str.w	r5, [r9]
 8010440:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010444:	f8c8 0000 	str.w	r0, [r8]
 8010448:	4620      	mov	r0, r4
 801044a:	b003      	add	sp, #12
 801044c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010454:	e7d5      	b.n	8010402 <__d2b+0x2e>
 8010456:	6161      	str	r1, [r4, #20]
 8010458:	e7e5      	b.n	8010426 <__d2b+0x52>
 801045a:	a801      	add	r0, sp, #4
 801045c:	f7ff fd5a 	bl	800ff14 <__lo0bits>
 8010460:	9b01      	ldr	r3, [sp, #4]
 8010462:	6163      	str	r3, [r4, #20]
 8010464:	2201      	movs	r2, #1
 8010466:	6122      	str	r2, [r4, #16]
 8010468:	3020      	adds	r0, #32
 801046a:	e7e3      	b.n	8010434 <__d2b+0x60>
 801046c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010470:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010474:	f8c9 0000 	str.w	r0, [r9]
 8010478:	6918      	ldr	r0, [r3, #16]
 801047a:	f7ff fd2b 	bl	800fed4 <__hi0bits>
 801047e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010482:	e7df      	b.n	8010444 <__d2b+0x70>
 8010484:	08012536 	.word	0x08012536
 8010488:	08012547 	.word	0x08012547

0801048c <_calloc_r>:
 801048c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801048e:	fba1 2402 	umull	r2, r4, r1, r2
 8010492:	b94c      	cbnz	r4, 80104a8 <_calloc_r+0x1c>
 8010494:	4611      	mov	r1, r2
 8010496:	9201      	str	r2, [sp, #4]
 8010498:	f7fd fdde 	bl	800e058 <_malloc_r>
 801049c:	9a01      	ldr	r2, [sp, #4]
 801049e:	4605      	mov	r5, r0
 80104a0:	b930      	cbnz	r0, 80104b0 <_calloc_r+0x24>
 80104a2:	4628      	mov	r0, r5
 80104a4:	b003      	add	sp, #12
 80104a6:	bd30      	pop	{r4, r5, pc}
 80104a8:	220c      	movs	r2, #12
 80104aa:	6002      	str	r2, [r0, #0]
 80104ac:	2500      	movs	r5, #0
 80104ae:	e7f8      	b.n	80104a2 <_calloc_r+0x16>
 80104b0:	4621      	mov	r1, r4
 80104b2:	f7fd fd5d 	bl	800df70 <memset>
 80104b6:	e7f4      	b.n	80104a2 <_calloc_r+0x16>

080104b8 <__sfputc_r>:
 80104b8:	6893      	ldr	r3, [r2, #8]
 80104ba:	3b01      	subs	r3, #1
 80104bc:	2b00      	cmp	r3, #0
 80104be:	b410      	push	{r4}
 80104c0:	6093      	str	r3, [r2, #8]
 80104c2:	da08      	bge.n	80104d6 <__sfputc_r+0x1e>
 80104c4:	6994      	ldr	r4, [r2, #24]
 80104c6:	42a3      	cmp	r3, r4
 80104c8:	db01      	blt.n	80104ce <__sfputc_r+0x16>
 80104ca:	290a      	cmp	r1, #10
 80104cc:	d103      	bne.n	80104d6 <__sfputc_r+0x1e>
 80104ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104d2:	f7fe bc01 	b.w	800ecd8 <__swbuf_r>
 80104d6:	6813      	ldr	r3, [r2, #0]
 80104d8:	1c58      	adds	r0, r3, #1
 80104da:	6010      	str	r0, [r2, #0]
 80104dc:	7019      	strb	r1, [r3, #0]
 80104de:	4608      	mov	r0, r1
 80104e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104e4:	4770      	bx	lr

080104e6 <__sfputs_r>:
 80104e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104e8:	4606      	mov	r6, r0
 80104ea:	460f      	mov	r7, r1
 80104ec:	4614      	mov	r4, r2
 80104ee:	18d5      	adds	r5, r2, r3
 80104f0:	42ac      	cmp	r4, r5
 80104f2:	d101      	bne.n	80104f8 <__sfputs_r+0x12>
 80104f4:	2000      	movs	r0, #0
 80104f6:	e007      	b.n	8010508 <__sfputs_r+0x22>
 80104f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104fc:	463a      	mov	r2, r7
 80104fe:	4630      	mov	r0, r6
 8010500:	f7ff ffda 	bl	80104b8 <__sfputc_r>
 8010504:	1c43      	adds	r3, r0, #1
 8010506:	d1f3      	bne.n	80104f0 <__sfputs_r+0xa>
 8010508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801050c <_vfiprintf_r>:
 801050c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010510:	460d      	mov	r5, r1
 8010512:	b09d      	sub	sp, #116	; 0x74
 8010514:	4614      	mov	r4, r2
 8010516:	4698      	mov	r8, r3
 8010518:	4606      	mov	r6, r0
 801051a:	b118      	cbz	r0, 8010524 <_vfiprintf_r+0x18>
 801051c:	6983      	ldr	r3, [r0, #24]
 801051e:	b90b      	cbnz	r3, 8010524 <_vfiprintf_r+0x18>
 8010520:	f7fd fc42 	bl	800dda8 <__sinit>
 8010524:	4b89      	ldr	r3, [pc, #548]	; (801074c <_vfiprintf_r+0x240>)
 8010526:	429d      	cmp	r5, r3
 8010528:	d11b      	bne.n	8010562 <_vfiprintf_r+0x56>
 801052a:	6875      	ldr	r5, [r6, #4]
 801052c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801052e:	07d9      	lsls	r1, r3, #31
 8010530:	d405      	bmi.n	801053e <_vfiprintf_r+0x32>
 8010532:	89ab      	ldrh	r3, [r5, #12]
 8010534:	059a      	lsls	r2, r3, #22
 8010536:	d402      	bmi.n	801053e <_vfiprintf_r+0x32>
 8010538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801053a:	f7fd fcf8 	bl	800df2e <__retarget_lock_acquire_recursive>
 801053e:	89ab      	ldrh	r3, [r5, #12]
 8010540:	071b      	lsls	r3, r3, #28
 8010542:	d501      	bpl.n	8010548 <_vfiprintf_r+0x3c>
 8010544:	692b      	ldr	r3, [r5, #16]
 8010546:	b9eb      	cbnz	r3, 8010584 <_vfiprintf_r+0x78>
 8010548:	4629      	mov	r1, r5
 801054a:	4630      	mov	r0, r6
 801054c:	f7fe fc28 	bl	800eda0 <__swsetup_r>
 8010550:	b1c0      	cbz	r0, 8010584 <_vfiprintf_r+0x78>
 8010552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010554:	07dc      	lsls	r4, r3, #31
 8010556:	d50e      	bpl.n	8010576 <_vfiprintf_r+0x6a>
 8010558:	f04f 30ff 	mov.w	r0, #4294967295
 801055c:	b01d      	add	sp, #116	; 0x74
 801055e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010562:	4b7b      	ldr	r3, [pc, #492]	; (8010750 <_vfiprintf_r+0x244>)
 8010564:	429d      	cmp	r5, r3
 8010566:	d101      	bne.n	801056c <_vfiprintf_r+0x60>
 8010568:	68b5      	ldr	r5, [r6, #8]
 801056a:	e7df      	b.n	801052c <_vfiprintf_r+0x20>
 801056c:	4b79      	ldr	r3, [pc, #484]	; (8010754 <_vfiprintf_r+0x248>)
 801056e:	429d      	cmp	r5, r3
 8010570:	bf08      	it	eq
 8010572:	68f5      	ldreq	r5, [r6, #12]
 8010574:	e7da      	b.n	801052c <_vfiprintf_r+0x20>
 8010576:	89ab      	ldrh	r3, [r5, #12]
 8010578:	0598      	lsls	r0, r3, #22
 801057a:	d4ed      	bmi.n	8010558 <_vfiprintf_r+0x4c>
 801057c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801057e:	f7fd fcd7 	bl	800df30 <__retarget_lock_release_recursive>
 8010582:	e7e9      	b.n	8010558 <_vfiprintf_r+0x4c>
 8010584:	2300      	movs	r3, #0
 8010586:	9309      	str	r3, [sp, #36]	; 0x24
 8010588:	2320      	movs	r3, #32
 801058a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801058e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010592:	2330      	movs	r3, #48	; 0x30
 8010594:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010758 <_vfiprintf_r+0x24c>
 8010598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801059c:	f04f 0901 	mov.w	r9, #1
 80105a0:	4623      	mov	r3, r4
 80105a2:	469a      	mov	sl, r3
 80105a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105a8:	b10a      	cbz	r2, 80105ae <_vfiprintf_r+0xa2>
 80105aa:	2a25      	cmp	r2, #37	; 0x25
 80105ac:	d1f9      	bne.n	80105a2 <_vfiprintf_r+0x96>
 80105ae:	ebba 0b04 	subs.w	fp, sl, r4
 80105b2:	d00b      	beq.n	80105cc <_vfiprintf_r+0xc0>
 80105b4:	465b      	mov	r3, fp
 80105b6:	4622      	mov	r2, r4
 80105b8:	4629      	mov	r1, r5
 80105ba:	4630      	mov	r0, r6
 80105bc:	f7ff ff93 	bl	80104e6 <__sfputs_r>
 80105c0:	3001      	adds	r0, #1
 80105c2:	f000 80aa 	beq.w	801071a <_vfiprintf_r+0x20e>
 80105c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105c8:	445a      	add	r2, fp
 80105ca:	9209      	str	r2, [sp, #36]	; 0x24
 80105cc:	f89a 3000 	ldrb.w	r3, [sl]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	f000 80a2 	beq.w	801071a <_vfiprintf_r+0x20e>
 80105d6:	2300      	movs	r3, #0
 80105d8:	f04f 32ff 	mov.w	r2, #4294967295
 80105dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105e0:	f10a 0a01 	add.w	sl, sl, #1
 80105e4:	9304      	str	r3, [sp, #16]
 80105e6:	9307      	str	r3, [sp, #28]
 80105e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105ec:	931a      	str	r3, [sp, #104]	; 0x68
 80105ee:	4654      	mov	r4, sl
 80105f0:	2205      	movs	r2, #5
 80105f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105f6:	4858      	ldr	r0, [pc, #352]	; (8010758 <_vfiprintf_r+0x24c>)
 80105f8:	f7ef fe7a 	bl	80002f0 <memchr>
 80105fc:	9a04      	ldr	r2, [sp, #16]
 80105fe:	b9d8      	cbnz	r0, 8010638 <_vfiprintf_r+0x12c>
 8010600:	06d1      	lsls	r1, r2, #27
 8010602:	bf44      	itt	mi
 8010604:	2320      	movmi	r3, #32
 8010606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801060a:	0713      	lsls	r3, r2, #28
 801060c:	bf44      	itt	mi
 801060e:	232b      	movmi	r3, #43	; 0x2b
 8010610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010614:	f89a 3000 	ldrb.w	r3, [sl]
 8010618:	2b2a      	cmp	r3, #42	; 0x2a
 801061a:	d015      	beq.n	8010648 <_vfiprintf_r+0x13c>
 801061c:	9a07      	ldr	r2, [sp, #28]
 801061e:	4654      	mov	r4, sl
 8010620:	2000      	movs	r0, #0
 8010622:	f04f 0c0a 	mov.w	ip, #10
 8010626:	4621      	mov	r1, r4
 8010628:	f811 3b01 	ldrb.w	r3, [r1], #1
 801062c:	3b30      	subs	r3, #48	; 0x30
 801062e:	2b09      	cmp	r3, #9
 8010630:	d94e      	bls.n	80106d0 <_vfiprintf_r+0x1c4>
 8010632:	b1b0      	cbz	r0, 8010662 <_vfiprintf_r+0x156>
 8010634:	9207      	str	r2, [sp, #28]
 8010636:	e014      	b.n	8010662 <_vfiprintf_r+0x156>
 8010638:	eba0 0308 	sub.w	r3, r0, r8
 801063c:	fa09 f303 	lsl.w	r3, r9, r3
 8010640:	4313      	orrs	r3, r2
 8010642:	9304      	str	r3, [sp, #16]
 8010644:	46a2      	mov	sl, r4
 8010646:	e7d2      	b.n	80105ee <_vfiprintf_r+0xe2>
 8010648:	9b03      	ldr	r3, [sp, #12]
 801064a:	1d19      	adds	r1, r3, #4
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	9103      	str	r1, [sp, #12]
 8010650:	2b00      	cmp	r3, #0
 8010652:	bfbb      	ittet	lt
 8010654:	425b      	neglt	r3, r3
 8010656:	f042 0202 	orrlt.w	r2, r2, #2
 801065a:	9307      	strge	r3, [sp, #28]
 801065c:	9307      	strlt	r3, [sp, #28]
 801065e:	bfb8      	it	lt
 8010660:	9204      	strlt	r2, [sp, #16]
 8010662:	7823      	ldrb	r3, [r4, #0]
 8010664:	2b2e      	cmp	r3, #46	; 0x2e
 8010666:	d10c      	bne.n	8010682 <_vfiprintf_r+0x176>
 8010668:	7863      	ldrb	r3, [r4, #1]
 801066a:	2b2a      	cmp	r3, #42	; 0x2a
 801066c:	d135      	bne.n	80106da <_vfiprintf_r+0x1ce>
 801066e:	9b03      	ldr	r3, [sp, #12]
 8010670:	1d1a      	adds	r2, r3, #4
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	9203      	str	r2, [sp, #12]
 8010676:	2b00      	cmp	r3, #0
 8010678:	bfb8      	it	lt
 801067a:	f04f 33ff 	movlt.w	r3, #4294967295
 801067e:	3402      	adds	r4, #2
 8010680:	9305      	str	r3, [sp, #20]
 8010682:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010768 <_vfiprintf_r+0x25c>
 8010686:	7821      	ldrb	r1, [r4, #0]
 8010688:	2203      	movs	r2, #3
 801068a:	4650      	mov	r0, sl
 801068c:	f7ef fe30 	bl	80002f0 <memchr>
 8010690:	b140      	cbz	r0, 80106a4 <_vfiprintf_r+0x198>
 8010692:	2340      	movs	r3, #64	; 0x40
 8010694:	eba0 000a 	sub.w	r0, r0, sl
 8010698:	fa03 f000 	lsl.w	r0, r3, r0
 801069c:	9b04      	ldr	r3, [sp, #16]
 801069e:	4303      	orrs	r3, r0
 80106a0:	3401      	adds	r4, #1
 80106a2:	9304      	str	r3, [sp, #16]
 80106a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106a8:	482c      	ldr	r0, [pc, #176]	; (801075c <_vfiprintf_r+0x250>)
 80106aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106ae:	2206      	movs	r2, #6
 80106b0:	f7ef fe1e 	bl	80002f0 <memchr>
 80106b4:	2800      	cmp	r0, #0
 80106b6:	d03f      	beq.n	8010738 <_vfiprintf_r+0x22c>
 80106b8:	4b29      	ldr	r3, [pc, #164]	; (8010760 <_vfiprintf_r+0x254>)
 80106ba:	bb1b      	cbnz	r3, 8010704 <_vfiprintf_r+0x1f8>
 80106bc:	9b03      	ldr	r3, [sp, #12]
 80106be:	3307      	adds	r3, #7
 80106c0:	f023 0307 	bic.w	r3, r3, #7
 80106c4:	3308      	adds	r3, #8
 80106c6:	9303      	str	r3, [sp, #12]
 80106c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106ca:	443b      	add	r3, r7
 80106cc:	9309      	str	r3, [sp, #36]	; 0x24
 80106ce:	e767      	b.n	80105a0 <_vfiprintf_r+0x94>
 80106d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80106d4:	460c      	mov	r4, r1
 80106d6:	2001      	movs	r0, #1
 80106d8:	e7a5      	b.n	8010626 <_vfiprintf_r+0x11a>
 80106da:	2300      	movs	r3, #0
 80106dc:	3401      	adds	r4, #1
 80106de:	9305      	str	r3, [sp, #20]
 80106e0:	4619      	mov	r1, r3
 80106e2:	f04f 0c0a 	mov.w	ip, #10
 80106e6:	4620      	mov	r0, r4
 80106e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106ec:	3a30      	subs	r2, #48	; 0x30
 80106ee:	2a09      	cmp	r2, #9
 80106f0:	d903      	bls.n	80106fa <_vfiprintf_r+0x1ee>
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d0c5      	beq.n	8010682 <_vfiprintf_r+0x176>
 80106f6:	9105      	str	r1, [sp, #20]
 80106f8:	e7c3      	b.n	8010682 <_vfiprintf_r+0x176>
 80106fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80106fe:	4604      	mov	r4, r0
 8010700:	2301      	movs	r3, #1
 8010702:	e7f0      	b.n	80106e6 <_vfiprintf_r+0x1da>
 8010704:	ab03      	add	r3, sp, #12
 8010706:	9300      	str	r3, [sp, #0]
 8010708:	462a      	mov	r2, r5
 801070a:	4b16      	ldr	r3, [pc, #88]	; (8010764 <_vfiprintf_r+0x258>)
 801070c:	a904      	add	r1, sp, #16
 801070e:	4630      	mov	r0, r6
 8010710:	f7fd fda6 	bl	800e260 <_printf_float>
 8010714:	4607      	mov	r7, r0
 8010716:	1c78      	adds	r0, r7, #1
 8010718:	d1d6      	bne.n	80106c8 <_vfiprintf_r+0x1bc>
 801071a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801071c:	07d9      	lsls	r1, r3, #31
 801071e:	d405      	bmi.n	801072c <_vfiprintf_r+0x220>
 8010720:	89ab      	ldrh	r3, [r5, #12]
 8010722:	059a      	lsls	r2, r3, #22
 8010724:	d402      	bmi.n	801072c <_vfiprintf_r+0x220>
 8010726:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010728:	f7fd fc02 	bl	800df30 <__retarget_lock_release_recursive>
 801072c:	89ab      	ldrh	r3, [r5, #12]
 801072e:	065b      	lsls	r3, r3, #25
 8010730:	f53f af12 	bmi.w	8010558 <_vfiprintf_r+0x4c>
 8010734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010736:	e711      	b.n	801055c <_vfiprintf_r+0x50>
 8010738:	ab03      	add	r3, sp, #12
 801073a:	9300      	str	r3, [sp, #0]
 801073c:	462a      	mov	r2, r5
 801073e:	4b09      	ldr	r3, [pc, #36]	; (8010764 <_vfiprintf_r+0x258>)
 8010740:	a904      	add	r1, sp, #16
 8010742:	4630      	mov	r0, r6
 8010744:	f7fe f818 	bl	800e778 <_printf_i>
 8010748:	e7e4      	b.n	8010714 <_vfiprintf_r+0x208>
 801074a:	bf00      	nop
 801074c:	080123a8 	.word	0x080123a8
 8010750:	080123c8 	.word	0x080123c8
 8010754:	08012388 	.word	0x08012388
 8010758:	080126a4 	.word	0x080126a4
 801075c:	080126ae 	.word	0x080126ae
 8010760:	0800e261 	.word	0x0800e261
 8010764:	080104e7 	.word	0x080104e7
 8010768:	080126aa 	.word	0x080126aa

0801076c <_read_r>:
 801076c:	b538      	push	{r3, r4, r5, lr}
 801076e:	4d07      	ldr	r5, [pc, #28]	; (801078c <_read_r+0x20>)
 8010770:	4604      	mov	r4, r0
 8010772:	4608      	mov	r0, r1
 8010774:	4611      	mov	r1, r2
 8010776:	2200      	movs	r2, #0
 8010778:	602a      	str	r2, [r5, #0]
 801077a:	461a      	mov	r2, r3
 801077c:	f7f2 fa0a 	bl	8002b94 <_read>
 8010780:	1c43      	adds	r3, r0, #1
 8010782:	d102      	bne.n	801078a <_read_r+0x1e>
 8010784:	682b      	ldr	r3, [r5, #0]
 8010786:	b103      	cbz	r3, 801078a <_read_r+0x1e>
 8010788:	6023      	str	r3, [r4, #0]
 801078a:	bd38      	pop	{r3, r4, r5, pc}
 801078c:	24005220 	.word	0x24005220

08010790 <abort>:
 8010790:	b508      	push	{r3, lr}
 8010792:	2006      	movs	r0, #6
 8010794:	f000 f860 	bl	8010858 <raise>
 8010798:	2001      	movs	r0, #1
 801079a:	f7f2 f9f1 	bl	8002b80 <_exit>
	...

080107a0 <_fstat_r>:
 80107a0:	b538      	push	{r3, r4, r5, lr}
 80107a2:	4d07      	ldr	r5, [pc, #28]	; (80107c0 <_fstat_r+0x20>)
 80107a4:	2300      	movs	r3, #0
 80107a6:	4604      	mov	r4, r0
 80107a8:	4608      	mov	r0, r1
 80107aa:	4611      	mov	r1, r2
 80107ac:	602b      	str	r3, [r5, #0]
 80107ae:	f7f2 fa1a 	bl	8002be6 <_fstat>
 80107b2:	1c43      	adds	r3, r0, #1
 80107b4:	d102      	bne.n	80107bc <_fstat_r+0x1c>
 80107b6:	682b      	ldr	r3, [r5, #0]
 80107b8:	b103      	cbz	r3, 80107bc <_fstat_r+0x1c>
 80107ba:	6023      	str	r3, [r4, #0]
 80107bc:	bd38      	pop	{r3, r4, r5, pc}
 80107be:	bf00      	nop
 80107c0:	24005220 	.word	0x24005220

080107c4 <_isatty_r>:
 80107c4:	b538      	push	{r3, r4, r5, lr}
 80107c6:	4d06      	ldr	r5, [pc, #24]	; (80107e0 <_isatty_r+0x1c>)
 80107c8:	2300      	movs	r3, #0
 80107ca:	4604      	mov	r4, r0
 80107cc:	4608      	mov	r0, r1
 80107ce:	602b      	str	r3, [r5, #0]
 80107d0:	f7f2 fa19 	bl	8002c06 <_isatty>
 80107d4:	1c43      	adds	r3, r0, #1
 80107d6:	d102      	bne.n	80107de <_isatty_r+0x1a>
 80107d8:	682b      	ldr	r3, [r5, #0]
 80107da:	b103      	cbz	r3, 80107de <_isatty_r+0x1a>
 80107dc:	6023      	str	r3, [r4, #0]
 80107de:	bd38      	pop	{r3, r4, r5, pc}
 80107e0:	24005220 	.word	0x24005220

080107e4 <__ascii_mbtowc>:
 80107e4:	b082      	sub	sp, #8
 80107e6:	b901      	cbnz	r1, 80107ea <__ascii_mbtowc+0x6>
 80107e8:	a901      	add	r1, sp, #4
 80107ea:	b142      	cbz	r2, 80107fe <__ascii_mbtowc+0x1a>
 80107ec:	b14b      	cbz	r3, 8010802 <__ascii_mbtowc+0x1e>
 80107ee:	7813      	ldrb	r3, [r2, #0]
 80107f0:	600b      	str	r3, [r1, #0]
 80107f2:	7812      	ldrb	r2, [r2, #0]
 80107f4:	1e10      	subs	r0, r2, #0
 80107f6:	bf18      	it	ne
 80107f8:	2001      	movne	r0, #1
 80107fa:	b002      	add	sp, #8
 80107fc:	4770      	bx	lr
 80107fe:	4610      	mov	r0, r2
 8010800:	e7fb      	b.n	80107fa <__ascii_mbtowc+0x16>
 8010802:	f06f 0001 	mvn.w	r0, #1
 8010806:	e7f8      	b.n	80107fa <__ascii_mbtowc+0x16>

08010808 <_raise_r>:
 8010808:	291f      	cmp	r1, #31
 801080a:	b538      	push	{r3, r4, r5, lr}
 801080c:	4604      	mov	r4, r0
 801080e:	460d      	mov	r5, r1
 8010810:	d904      	bls.n	801081c <_raise_r+0x14>
 8010812:	2316      	movs	r3, #22
 8010814:	6003      	str	r3, [r0, #0]
 8010816:	f04f 30ff 	mov.w	r0, #4294967295
 801081a:	bd38      	pop	{r3, r4, r5, pc}
 801081c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801081e:	b112      	cbz	r2, 8010826 <_raise_r+0x1e>
 8010820:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010824:	b94b      	cbnz	r3, 801083a <_raise_r+0x32>
 8010826:	4620      	mov	r0, r4
 8010828:	f000 f830 	bl	801088c <_getpid_r>
 801082c:	462a      	mov	r2, r5
 801082e:	4601      	mov	r1, r0
 8010830:	4620      	mov	r0, r4
 8010832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010836:	f000 b817 	b.w	8010868 <_kill_r>
 801083a:	2b01      	cmp	r3, #1
 801083c:	d00a      	beq.n	8010854 <_raise_r+0x4c>
 801083e:	1c59      	adds	r1, r3, #1
 8010840:	d103      	bne.n	801084a <_raise_r+0x42>
 8010842:	2316      	movs	r3, #22
 8010844:	6003      	str	r3, [r0, #0]
 8010846:	2001      	movs	r0, #1
 8010848:	e7e7      	b.n	801081a <_raise_r+0x12>
 801084a:	2400      	movs	r4, #0
 801084c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010850:	4628      	mov	r0, r5
 8010852:	4798      	blx	r3
 8010854:	2000      	movs	r0, #0
 8010856:	e7e0      	b.n	801081a <_raise_r+0x12>

08010858 <raise>:
 8010858:	4b02      	ldr	r3, [pc, #8]	; (8010864 <raise+0xc>)
 801085a:	4601      	mov	r1, r0
 801085c:	6818      	ldr	r0, [r3, #0]
 801085e:	f7ff bfd3 	b.w	8010808 <_raise_r>
 8010862:	bf00      	nop
 8010864:	24000014 	.word	0x24000014

08010868 <_kill_r>:
 8010868:	b538      	push	{r3, r4, r5, lr}
 801086a:	4d07      	ldr	r5, [pc, #28]	; (8010888 <_kill_r+0x20>)
 801086c:	2300      	movs	r3, #0
 801086e:	4604      	mov	r4, r0
 8010870:	4608      	mov	r0, r1
 8010872:	4611      	mov	r1, r2
 8010874:	602b      	str	r3, [r5, #0]
 8010876:	f7f2 f973 	bl	8002b60 <_kill>
 801087a:	1c43      	adds	r3, r0, #1
 801087c:	d102      	bne.n	8010884 <_kill_r+0x1c>
 801087e:	682b      	ldr	r3, [r5, #0]
 8010880:	b103      	cbz	r3, 8010884 <_kill_r+0x1c>
 8010882:	6023      	str	r3, [r4, #0]
 8010884:	bd38      	pop	{r3, r4, r5, pc}
 8010886:	bf00      	nop
 8010888:	24005220 	.word	0x24005220

0801088c <_getpid_r>:
 801088c:	f7f2 b960 	b.w	8002b50 <_getpid>

08010890 <__ascii_wctomb>:
 8010890:	b149      	cbz	r1, 80108a6 <__ascii_wctomb+0x16>
 8010892:	2aff      	cmp	r2, #255	; 0xff
 8010894:	bf85      	ittet	hi
 8010896:	238a      	movhi	r3, #138	; 0x8a
 8010898:	6003      	strhi	r3, [r0, #0]
 801089a:	700a      	strbls	r2, [r1, #0]
 801089c:	f04f 30ff 	movhi.w	r0, #4294967295
 80108a0:	bf98      	it	ls
 80108a2:	2001      	movls	r0, #1
 80108a4:	4770      	bx	lr
 80108a6:	4608      	mov	r0, r1
 80108a8:	4770      	bx	lr

080108aa <cabsf>:
 80108aa:	b508      	push	{r3, lr}
 80108ac:	ed2d 8b04 	vpush	{d8-d9}
 80108b0:	eeb0 9a40 	vmov.f32	s18, s0
 80108b4:	eef0 8a60 	vmov.f32	s17, s1
 80108b8:	f000 f851 	bl	801095e <crealf>
 80108bc:	eef0 0a68 	vmov.f32	s1, s17
 80108c0:	eeb0 8a40 	vmov.f32	s16, s0
 80108c4:	eeb0 0a49 	vmov.f32	s0, s18
 80108c8:	f000 f845 	bl	8010956 <cimagf>
 80108cc:	eef0 0a40 	vmov.f32	s1, s0
 80108d0:	eeb0 0a48 	vmov.f32	s0, s16
 80108d4:	ecbd 8b04 	vpop	{d8-d9}
 80108d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80108dc:	f000 baac 	b.w	8010e38 <hypotf>

080108e0 <cexp>:
 80108e0:	b510      	push	{r4, lr}
 80108e2:	ed2d 8b06 	vpush	{d8-d10}
 80108e6:	eeb0 ab40 	vmov.f64	d10, d0
 80108ea:	eeb0 9b41 	vmov.f64	d9, d1
 80108ee:	f000 f835 	bl	801095c <creal>
 80108f2:	eeb0 1b49 	vmov.f64	d1, d9
 80108f6:	eeb0 8b40 	vmov.f64	d8, d0
 80108fa:	eeb0 0b4a 	vmov.f64	d0, d10
 80108fe:	f000 f827 	bl	8010950 <cimag>
 8010902:	eeb0 ab40 	vmov.f64	d10, d0
 8010906:	eeb0 0b48 	vmov.f64	d0, d8
 801090a:	f000 f829 	bl	8010960 <exp>
 801090e:	eeb0 9b40 	vmov.f64	d9, d0
 8010912:	eeb0 0b4a 	vmov.f64	d0, d10
 8010916:	f000 fa1f 	bl	8010d58 <sin>
 801091a:	ee20 8b09 	vmul.f64	d8, d0, d9
 801091e:	eeb0 0b4a 	vmov.f64	d0, d10
 8010922:	f000 f9cd 	bl	8010cc0 <cos>
 8010926:	eeb0 1b48 	vmov.f64	d1, d8
 801092a:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8010948 <cexp+0x68>
 801092e:	eeb0 6b40 	vmov.f64	d6, d0
 8010932:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010936:	eea6 7b09 	vfma.f64	d7, d6, d9
 801093a:	ecbd 8b06 	vpop	{d8-d10}
 801093e:	eeb0 0b47 	vmov.f64	d0, d7
 8010942:	bd10      	pop	{r4, pc}
 8010944:	f3af 8000 	nop.w
	...

08010950 <cimag>:
 8010950:	eeb0 0b41 	vmov.f64	d0, d1
 8010954:	4770      	bx	lr

08010956 <cimagf>:
 8010956:	eeb0 0a60 	vmov.f32	s0, s1
 801095a:	4770      	bx	lr

0801095c <creal>:
 801095c:	4770      	bx	lr

0801095e <crealf>:
 801095e:	4770      	bx	lr

08010960 <exp>:
 8010960:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8010962:	ee10 3a90 	vmov	r3, s1
 8010966:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801096a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801096e:	18a2      	adds	r2, r4, r2
 8010970:	2a3e      	cmp	r2, #62	; 0x3e
 8010972:	ee10 1a10 	vmov	r1, s0
 8010976:	d922      	bls.n	80109be <exp+0x5e>
 8010978:	2a00      	cmp	r2, #0
 801097a:	da06      	bge.n	801098a <exp+0x2a>
 801097c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010980:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010984:	b004      	add	sp, #16
 8010986:	bcf0      	pop	{r4, r5, r6, r7}
 8010988:	4770      	bx	lr
 801098a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 801098e:	f04f 0000 	mov.w	r0, #0
 8010992:	d913      	bls.n	80109bc <exp+0x5c>
 8010994:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8010998:	bf08      	it	eq
 801099a:	4281      	cmpeq	r1, r0
 801099c:	f000 80a0 	beq.w	8010ae0 <exp+0x180>
 80109a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80109a4:	4294      	cmp	r4, r2
 80109a6:	d0e9      	beq.n	801097c <exp+0x1c>
 80109a8:	4283      	cmp	r3, r0
 80109aa:	da03      	bge.n	80109b4 <exp+0x54>
 80109ac:	b004      	add	sp, #16
 80109ae:	bcf0      	pop	{r4, r5, r6, r7}
 80109b0:	f000 b8c6 	b.w	8010b40 <__math_uflow>
 80109b4:	b004      	add	sp, #16
 80109b6:	bcf0      	pop	{r4, r5, r6, r7}
 80109b8:	f000 b8ca 	b.w	8010b50 <__math_oflow>
 80109bc:	4604      	mov	r4, r0
 80109be:	4950      	ldr	r1, [pc, #320]	; (8010b00 <exp+0x1a0>)
 80109c0:	ed91 6b02 	vldr	d6, [r1, #8]
 80109c4:	ed91 5b00 	vldr	d5, [r1]
 80109c8:	eeb0 7b46 	vmov.f64	d7, d6
 80109cc:	eea5 7b00 	vfma.f64	d7, d5, d0
 80109d0:	ee17 5a10 	vmov	r5, s14
 80109d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80109d8:	ed91 6b04 	vldr	d6, [r1, #16]
 80109dc:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80109e0:	eea6 0b07 	vfma.f64	d0, d6, d7
 80109e4:	ed91 6b06 	vldr	d6, [r1, #24]
 80109e8:	18d8      	adds	r0, r3, r3
 80109ea:	f100 030f 	add.w	r3, r0, #15
 80109ee:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80109f2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80109f6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 80109fa:	ee20 7b00 	vmul.f64	d7, d0, d0
 80109fe:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 8010a02:	ed91 5b08 	vldr	d5, [r1, #32]
 8010a06:	ee30 6b06 	vadd.f64	d6, d0, d6
 8010a0a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8010a0e:	eea4 5b00 	vfma.f64	d5, d4, d0
 8010a12:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8010a16:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010a1a:	ee27 7b07 	vmul.f64	d7, d7, d7
 8010a1e:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8010a22:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 8010a26:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8010a2a:	eea4 5b00 	vfma.f64	d5, d4, d0
 8010a2e:	2600      	movs	r6, #0
 8010a30:	19f2      	adds	r2, r6, r7
 8010a32:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 8010a36:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010a3a:	2c00      	cmp	r4, #0
 8010a3c:	d14b      	bne.n	8010ad6 <exp+0x176>
 8010a3e:	42b5      	cmp	r5, r6
 8010a40:	db10      	blt.n	8010a64 <exp+0x104>
 8010a42:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8010a46:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8010ae8 <exp+0x188>
 8010a4a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8010a4e:	4610      	mov	r0, r2
 8010a50:	ec41 0b10 	vmov	d0, r0, r1
 8010a54:	eea6 0b00 	vfma.f64	d0, d6, d0
 8010a58:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010a5c:	b004      	add	sp, #16
 8010a5e:	bcf0      	pop	{r4, r5, r6, r7}
 8010a60:	f000 b88a 	b.w	8010b78 <__math_check_oflow>
 8010a64:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010a68:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8010a6c:	4610      	mov	r0, r2
 8010a6e:	ec41 0b17 	vmov	d7, r0, r1
 8010a72:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010a76:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010a7a:	ee37 5b06 	vadd.f64	d5, d7, d6
 8010a7e:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8010a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a86:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8010af0 <exp+0x190>
 8010a8a:	d51e      	bpl.n	8010aca <exp+0x16a>
 8010a8c:	ee35 3b04 	vadd.f64	d3, d5, d4
 8010a90:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010a94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010a98:	ee34 6b43 	vsub.f64	d6, d4, d3
 8010a9c:	ee36 5b05 	vadd.f64	d5, d6, d5
 8010aa0:	ee35 5b07 	vadd.f64	d5, d5, d7
 8010aa4:	ee35 5b03 	vadd.f64	d5, d5, d3
 8010aa8:	ee35 5b44 	vsub.f64	d5, d5, d4
 8010aac:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8010ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ab4:	d101      	bne.n	8010aba <exp+0x15a>
 8010ab6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8010af8 <exp+0x198>
 8010aba:	ed8d 0b00 	vstr	d0, [sp]
 8010abe:	ed9d 7b00 	vldr	d7, [sp]
 8010ac2:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010ac6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010aca:	ee25 0b00 	vmul.f64	d0, d5, d0
 8010ace:	b004      	add	sp, #16
 8010ad0:	bcf0      	pop	{r4, r5, r6, r7}
 8010ad2:	f000 b845 	b.w	8010b60 <__math_check_uflow>
 8010ad6:	ec43 2b10 	vmov	d0, r2, r3
 8010ada:	eea6 0b00 	vfma.f64	d0, d6, d0
 8010ade:	e751      	b.n	8010984 <exp+0x24>
 8010ae0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8010af8 <exp+0x198>
 8010ae4:	e74e      	b.n	8010984 <exp+0x24>
 8010ae6:	bf00      	nop
 8010ae8:	00000000 	.word	0x00000000
 8010aec:	7f000000 	.word	0x7f000000
 8010af0:	00000000 	.word	0x00000000
 8010af4:	00100000 	.word	0x00100000
	...
 8010b00:	080127c0 	.word	0x080127c0

08010b04 <with_errno>:
 8010b04:	b513      	push	{r0, r1, r4, lr}
 8010b06:	4604      	mov	r4, r0
 8010b08:	ed8d 0b00 	vstr	d0, [sp]
 8010b0c:	f7fd f8ee 	bl	800dcec <__errno>
 8010b10:	ed9d 0b00 	vldr	d0, [sp]
 8010b14:	6004      	str	r4, [r0, #0]
 8010b16:	b002      	add	sp, #8
 8010b18:	bd10      	pop	{r4, pc}

08010b1a <xflow>:
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	b158      	cbz	r0, 8010b36 <xflow+0x1c>
 8010b1e:	eeb1 7b40 	vneg.f64	d7, d0
 8010b22:	ed8d 7b00 	vstr	d7, [sp]
 8010b26:	ed9d 7b00 	vldr	d7, [sp]
 8010b2a:	2022      	movs	r0, #34	; 0x22
 8010b2c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010b30:	b002      	add	sp, #8
 8010b32:	f7ff bfe7 	b.w	8010b04 <with_errno>
 8010b36:	eeb0 7b40 	vmov.f64	d7, d0
 8010b3a:	e7f2      	b.n	8010b22 <xflow+0x8>
 8010b3c:	0000      	movs	r0, r0
	...

08010b40 <__math_uflow>:
 8010b40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010b48 <__math_uflow+0x8>
 8010b44:	f7ff bfe9 	b.w	8010b1a <xflow>
 8010b48:	00000000 	.word	0x00000000
 8010b4c:	10000000 	.word	0x10000000

08010b50 <__math_oflow>:
 8010b50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010b58 <__math_oflow+0x8>
 8010b54:	f7ff bfe1 	b.w	8010b1a <xflow>
 8010b58:	00000000 	.word	0x00000000
 8010b5c:	70000000 	.word	0x70000000

08010b60 <__math_check_uflow>:
 8010b60:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b68:	d102      	bne.n	8010b70 <__math_check_uflow+0x10>
 8010b6a:	2022      	movs	r0, #34	; 0x22
 8010b6c:	f7ff bfca 	b.w	8010b04 <with_errno>
 8010b70:	4770      	bx	lr
 8010b72:	0000      	movs	r0, r0
 8010b74:	0000      	movs	r0, r0
	...

08010b78 <__math_check_oflow>:
 8010b78:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8010b98 <__math_check_oflow+0x20>
 8010b7c:	eeb0 7bc0 	vabs.f64	d7, d0
 8010b80:	eeb4 7b46 	vcmp.f64	d7, d6
 8010b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b88:	dd02      	ble.n	8010b90 <__math_check_oflow+0x18>
 8010b8a:	2022      	movs	r0, #34	; 0x22
 8010b8c:	f7ff bfba 	b.w	8010b04 <with_errno>
 8010b90:	4770      	bx	lr
 8010b92:	bf00      	nop
 8010b94:	f3af 8000 	nop.w
 8010b98:	ffffffff 	.word	0xffffffff
 8010b9c:	7fefffff 	.word	0x7fefffff

08010ba0 <cbrt>:
 8010ba0:	ee10 0a90 	vmov	r0, s1
 8010ba4:	4b44      	ldr	r3, [pc, #272]	; (8010cb8 <cbrt+0x118>)
 8010ba6:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8010baa:	4299      	cmp	r1, r3
 8010bac:	b510      	push	{r4, lr}
 8010bae:	d902      	bls.n	8010bb6 <cbrt+0x16>
 8010bb0:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010bb4:	bd10      	pop	{r4, pc}
 8010bb6:	ee10 3a10 	vmov	r3, s0
 8010bba:	430b      	orrs	r3, r1
 8010bbc:	d0fa      	beq.n	8010bb4 <cbrt+0x14>
 8010bbe:	ec53 2b10 	vmov	r2, r3, d0
 8010bc2:	460b      	mov	r3, r1
 8010bc4:	ec43 2b16 	vmov	d6, r2, r3
 8010bc8:	4b3c      	ldr	r3, [pc, #240]	; (8010cbc <cbrt+0x11c>)
 8010bca:	4003      	ands	r3, r0
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d14e      	bne.n	8010c6e <cbrt+0xce>
 8010bd0:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010c88 <cbrt+0xe8>
 8010bd4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010bd8:	ee17 1a90 	vmov	r1, s15
 8010bdc:	ec53 2b17 	vmov	r2, r3, d7
 8010be0:	2403      	movs	r4, #3
 8010be2:	fbb1 f1f4 	udiv	r1, r1, r4
 8010be6:	f101 5325 	add.w	r3, r1, #692060160	; 0x29400000
 8010bea:	f503 137d 	add.w	r3, r3, #4145152	; 0x3f4000
 8010bee:	f503 5362 	add.w	r3, r3, #14464	; 0x3880
 8010bf2:	3313      	adds	r3, #19
 8010bf4:	ec43 2b17 	vmov	d7, r2, r3
 8010bf8:	ee27 5b07 	vmul.f64	d5, d7, d7
 8010bfc:	ee85 4b06 	vdiv.f64	d4, d5, d6
 8010c00:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8010c90 <cbrt+0xf0>
 8010c04:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8010c98 <cbrt+0xf8>
 8010c08:	eea7 5b04 	vfma.f64	d5, d7, d4
 8010c0c:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8010ca0 <cbrt+0x100>
 8010c10:	ee82 3b05 	vdiv.f64	d3, d2, d5
 8010c14:	ee35 4b04 	vadd.f64	d4, d5, d4
 8010c18:	ee34 4b03 	vadd.f64	d4, d4, d3
 8010c1c:	ed9f 3b22 	vldr	d3, [pc, #136]	; 8010ca8 <cbrt+0x108>
 8010c20:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010c24:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8010cb0 <cbrt+0x110>
 8010c28:	ee35 5b04 	vadd.f64	d5, d5, d4
 8010c2c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010c30:	ee17 1a90 	vmov	r1, s15
 8010c34:	2200      	movs	r2, #0
 8010c36:	1c4b      	adds	r3, r1, #1
 8010c38:	ec43 2b17 	vmov	d7, r2, r3
 8010c3c:	ee27 4b07 	vmul.f64	d4, d7, d7
 8010c40:	ee86 5b04 	vdiv.f64	d5, d6, d4
 8010c44:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8010c48:	ee35 4b47 	vsub.f64	d4, d5, d7
 8010c4c:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010c50:	ee84 6b05 	vdiv.f64	d6, d4, d5
 8010c54:	eea7 7b06 	vfma.f64	d7, d7, d6
 8010c58:	ee17 1a90 	vmov	r1, s15
 8010c5c:	ec53 2b17 	vmov	r2, r3, d7
 8010c60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8010c64:	ea40 0301 	orr.w	r3, r0, r1
 8010c68:	ec43 2b10 	vmov	d0, r2, r3
 8010c6c:	e7a2      	b.n	8010bb4 <cbrt+0x14>
 8010c6e:	2403      	movs	r4, #3
 8010c70:	fbb1 f1f4 	udiv	r1, r1, r4
 8010c74:	f101 532c 	add.w	r3, r1, #721420288	; 0x2b000000
 8010c78:	f5a3 03c1 	sub.w	r3, r3, #6324224	; 0x608000
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	f2a3 736d 	subw	r3, r3, #1901	; 0x76d
 8010c82:	e7b7      	b.n	8010bf4 <cbrt+0x54>
 8010c84:	f3af 8000 	nop.w
 8010c88:	00000000 	.word	0x00000000
 8010c8c:	43500000 	.word	0x43500000
 8010c90:	f15f15f1 	.word	0xf15f15f1
 8010c94:	3fe15f15 	.word	0x3fe15f15
 8010c98:	2532c834 	.word	0x2532c834
 8010c9c:	bfe691de 	.word	0xbfe691de
 8010ca0:	0ea0ea0f 	.word	0x0ea0ea0f
 8010ca4:	3ff6a0ea 	.word	0x3ff6a0ea
 8010ca8:	6db6db6e 	.word	0x6db6db6e
 8010cac:	3ff9b6db 	.word	0x3ff9b6db
 8010cb0:	b6db6db7 	.word	0xb6db6db7
 8010cb4:	3fd6db6d 	.word	0x3fd6db6d
 8010cb8:	7fefffff 	.word	0x7fefffff
 8010cbc:	7ff00000 	.word	0x7ff00000

08010cc0 <cos>:
 8010cc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010cc2:	eeb0 7b40 	vmov.f64	d7, d0
 8010cc6:	ee17 3a90 	vmov	r3, s15
 8010cca:	4a21      	ldr	r2, [pc, #132]	; (8010d50 <cos+0x90>)
 8010ccc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010cd0:	4293      	cmp	r3, r2
 8010cd2:	dc06      	bgt.n	8010ce2 <cos+0x22>
 8010cd4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8010d48 <cos+0x88>
 8010cd8:	b005      	add	sp, #20
 8010cda:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cde:	f000 bb77 	b.w	80113d0 <__kernel_cos>
 8010ce2:	4a1c      	ldr	r2, [pc, #112]	; (8010d54 <cos+0x94>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	dd04      	ble.n	8010cf2 <cos+0x32>
 8010ce8:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010cec:	b005      	add	sp, #20
 8010cee:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cf2:	4668      	mov	r0, sp
 8010cf4:	f000 f98c 	bl	8011010 <__ieee754_rem_pio2>
 8010cf8:	f000 0003 	and.w	r0, r0, #3
 8010cfc:	2801      	cmp	r0, #1
 8010cfe:	d009      	beq.n	8010d14 <cos+0x54>
 8010d00:	2802      	cmp	r0, #2
 8010d02:	d010      	beq.n	8010d26 <cos+0x66>
 8010d04:	b9b0      	cbnz	r0, 8010d34 <cos+0x74>
 8010d06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010d0a:	ed9d 0b00 	vldr	d0, [sp]
 8010d0e:	f000 fb5f 	bl	80113d0 <__kernel_cos>
 8010d12:	e7eb      	b.n	8010cec <cos+0x2c>
 8010d14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010d18:	ed9d 0b00 	vldr	d0, [sp]
 8010d1c:	f000 fe5c 	bl	80119d8 <__kernel_sin>
 8010d20:	eeb1 0b40 	vneg.f64	d0, d0
 8010d24:	e7e2      	b.n	8010cec <cos+0x2c>
 8010d26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010d2a:	ed9d 0b00 	vldr	d0, [sp]
 8010d2e:	f000 fb4f 	bl	80113d0 <__kernel_cos>
 8010d32:	e7f5      	b.n	8010d20 <cos+0x60>
 8010d34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010d38:	ed9d 0b00 	vldr	d0, [sp]
 8010d3c:	2001      	movs	r0, #1
 8010d3e:	f000 fe4b 	bl	80119d8 <__kernel_sin>
 8010d42:	e7d3      	b.n	8010cec <cos+0x2c>
 8010d44:	f3af 8000 	nop.w
	...
 8010d50:	3fe921fb 	.word	0x3fe921fb
 8010d54:	7fefffff 	.word	0x7fefffff

08010d58 <sin>:
 8010d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d5a:	eeb0 7b40 	vmov.f64	d7, d0
 8010d5e:	ee17 3a90 	vmov	r3, s15
 8010d62:	4a21      	ldr	r2, [pc, #132]	; (8010de8 <sin+0x90>)
 8010d64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010d68:	4293      	cmp	r3, r2
 8010d6a:	dc07      	bgt.n	8010d7c <sin+0x24>
 8010d6c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8010de0 <sin+0x88>
 8010d70:	2000      	movs	r0, #0
 8010d72:	b005      	add	sp, #20
 8010d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d78:	f000 be2e 	b.w	80119d8 <__kernel_sin>
 8010d7c:	4a1b      	ldr	r2, [pc, #108]	; (8010dec <sin+0x94>)
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	dd04      	ble.n	8010d8c <sin+0x34>
 8010d82:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010d86:	b005      	add	sp, #20
 8010d88:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d8c:	4668      	mov	r0, sp
 8010d8e:	f000 f93f 	bl	8011010 <__ieee754_rem_pio2>
 8010d92:	f000 0003 	and.w	r0, r0, #3
 8010d96:	2801      	cmp	r0, #1
 8010d98:	d00a      	beq.n	8010db0 <sin+0x58>
 8010d9a:	2802      	cmp	r0, #2
 8010d9c:	d00f      	beq.n	8010dbe <sin+0x66>
 8010d9e:	b9c0      	cbnz	r0, 8010dd2 <sin+0x7a>
 8010da0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010da4:	ed9d 0b00 	vldr	d0, [sp]
 8010da8:	2001      	movs	r0, #1
 8010daa:	f000 fe15 	bl	80119d8 <__kernel_sin>
 8010dae:	e7ea      	b.n	8010d86 <sin+0x2e>
 8010db0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010db4:	ed9d 0b00 	vldr	d0, [sp]
 8010db8:	f000 fb0a 	bl	80113d0 <__kernel_cos>
 8010dbc:	e7e3      	b.n	8010d86 <sin+0x2e>
 8010dbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010dc2:	ed9d 0b00 	vldr	d0, [sp]
 8010dc6:	2001      	movs	r0, #1
 8010dc8:	f000 fe06 	bl	80119d8 <__kernel_sin>
 8010dcc:	eeb1 0b40 	vneg.f64	d0, d0
 8010dd0:	e7d9      	b.n	8010d86 <sin+0x2e>
 8010dd2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010dd6:	ed9d 0b00 	vldr	d0, [sp]
 8010dda:	f000 faf9 	bl	80113d0 <__kernel_cos>
 8010dde:	e7f5      	b.n	8010dcc <sin+0x74>
	...
 8010de8:	3fe921fb 	.word	0x3fe921fb
 8010dec:	7fefffff 	.word	0x7fefffff

08010df0 <atan2>:
 8010df0:	f000 b84a 	b.w	8010e88 <__ieee754_atan2>
 8010df4:	0000      	movs	r0, r0
	...

08010df8 <sqrt>:
 8010df8:	b508      	push	{r3, lr}
 8010dfa:	ed2d 8b04 	vpush	{d8-d9}
 8010dfe:	eeb0 8b40 	vmov.f64	d8, d0
 8010e02:	f000 fa49 	bl	8011298 <__ieee754_sqrt>
 8010e06:	eeb4 8b48 	vcmp.f64	d8, d8
 8010e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e0e:	d60c      	bvs.n	8010e2a <sqrt+0x32>
 8010e10:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8010e30 <sqrt+0x38>
 8010e14:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e1c:	d505      	bpl.n	8010e2a <sqrt+0x32>
 8010e1e:	f7fc ff65 	bl	800dcec <__errno>
 8010e22:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010e26:	2321      	movs	r3, #33	; 0x21
 8010e28:	6003      	str	r3, [r0, #0]
 8010e2a:	ecbd 8b04 	vpop	{d8-d9}
 8010e2e:	bd08      	pop	{r3, pc}
	...

08010e38 <hypotf>:
 8010e38:	b508      	push	{r3, lr}
 8010e3a:	ed2d 8b04 	vpush	{d8-d9}
 8010e3e:	eeb0 9a40 	vmov.f32	s18, s0
 8010e42:	eef0 8a60 	vmov.f32	s17, s1
 8010e46:	f000 fa2b 	bl	80112a0 <__ieee754_hypotf>
 8010e4a:	eeb0 8a40 	vmov.f32	s16, s0
 8010e4e:	f001 f81d 	bl	8011e8c <finitef>
 8010e52:	b978      	cbnz	r0, 8010e74 <hypotf+0x3c>
 8010e54:	eeb0 0a49 	vmov.f32	s0, s18
 8010e58:	f001 f818 	bl	8011e8c <finitef>
 8010e5c:	b150      	cbz	r0, 8010e74 <hypotf+0x3c>
 8010e5e:	eeb0 0a68 	vmov.f32	s0, s17
 8010e62:	f001 f813 	bl	8011e8c <finitef>
 8010e66:	b128      	cbz	r0, 8010e74 <hypotf+0x3c>
 8010e68:	f7fc ff40 	bl	800dcec <__errno>
 8010e6c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8010e80 <hypotf+0x48>
 8010e70:	2322      	movs	r3, #34	; 0x22
 8010e72:	6003      	str	r3, [r0, #0]
 8010e74:	eeb0 0a48 	vmov.f32	s0, s16
 8010e78:	ecbd 8b04 	vpop	{d8-d9}
 8010e7c:	bd08      	pop	{r3, pc}
 8010e7e:	bf00      	nop
 8010e80:	7f800000 	.word	0x7f800000
 8010e84:	00000000 	.word	0x00000000

08010e88 <__ieee754_atan2>:
 8010e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e8a:	eeb0 7b40 	vmov.f64	d7, d0
 8010e8e:	ee11 6a10 	vmov	r6, s2
 8010e92:	ee11 0a90 	vmov	r0, s3
 8010e96:	4273      	negs	r3, r6
 8010e98:	4f59      	ldr	r7, [pc, #356]	; (8011000 <__ieee754_atan2+0x178>)
 8010e9a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8010e9e:	4333      	orrs	r3, r6
 8010ea0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010ea4:	42bb      	cmp	r3, r7
 8010ea6:	d80d      	bhi.n	8010ec4 <__ieee754_atan2+0x3c>
 8010ea8:	ee10 ca10 	vmov	ip, s0
 8010eac:	ee17 5a90 	vmov	r5, s15
 8010eb0:	f1cc 0100 	rsb	r1, ip, #0
 8010eb4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010eb8:	ea41 010c 	orr.w	r1, r1, ip
 8010ebc:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8010ec0:	42b9      	cmp	r1, r7
 8010ec2:	d904      	bls.n	8010ece <__ieee754_atan2+0x46>
 8010ec4:	ee37 7b01 	vadd.f64	d7, d7, d1
 8010ec8:	eeb0 0b47 	vmov.f64	d0, d7
 8010ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ece:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8010ed2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8010ed6:	4331      	orrs	r1, r6
 8010ed8:	d103      	bne.n	8010ee2 <__ieee754_atan2+0x5a>
 8010eda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010ede:	f000 bdd3 	b.w	8011a88 <atan>
 8010ee2:	1784      	asrs	r4, r0, #30
 8010ee4:	f004 0402 	and.w	r4, r4, #2
 8010ee8:	ea53 010c 	orrs.w	r1, r3, ip
 8010eec:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8010ef0:	d107      	bne.n	8010f02 <__ieee754_atan2+0x7a>
 8010ef2:	2c02      	cmp	r4, #2
 8010ef4:	d05d      	beq.n	8010fb2 <__ieee754_atan2+0x12a>
 8010ef6:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8010fc8 <__ieee754_atan2+0x140>
 8010efa:	2c03      	cmp	r4, #3
 8010efc:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8010f00:	e7e2      	b.n	8010ec8 <__ieee754_atan2+0x40>
 8010f02:	ea52 0106 	orrs.w	r1, r2, r6
 8010f06:	d107      	bne.n	8010f18 <__ieee754_atan2+0x90>
 8010f08:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8010fd0 <__ieee754_atan2+0x148>
 8010f0c:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8010fd8 <__ieee754_atan2+0x150>
 8010f10:	2d00      	cmp	r5, #0
 8010f12:	fe27 7b00 	vselge.f64	d7, d7, d0
 8010f16:	e7d7      	b.n	8010ec8 <__ieee754_atan2+0x40>
 8010f18:	42ba      	cmp	r2, r7
 8010f1a:	d10f      	bne.n	8010f3c <__ieee754_atan2+0xb4>
 8010f1c:	4293      	cmp	r3, r2
 8010f1e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010f22:	d107      	bne.n	8010f34 <__ieee754_atan2+0xac>
 8010f24:	2c02      	cmp	r4, #2
 8010f26:	d847      	bhi.n	8010fb8 <__ieee754_atan2+0x130>
 8010f28:	4b36      	ldr	r3, [pc, #216]	; (8011004 <__ieee754_atan2+0x17c>)
 8010f2a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010f2e:	ed94 7b00 	vldr	d7, [r4]
 8010f32:	e7c9      	b.n	8010ec8 <__ieee754_atan2+0x40>
 8010f34:	2c02      	cmp	r4, #2
 8010f36:	d842      	bhi.n	8010fbe <__ieee754_atan2+0x136>
 8010f38:	4b33      	ldr	r3, [pc, #204]	; (8011008 <__ieee754_atan2+0x180>)
 8010f3a:	e7f6      	b.n	8010f2a <__ieee754_atan2+0xa2>
 8010f3c:	42bb      	cmp	r3, r7
 8010f3e:	d0e3      	beq.n	8010f08 <__ieee754_atan2+0x80>
 8010f40:	1a9b      	subs	r3, r3, r2
 8010f42:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010f46:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010f4a:	da1a      	bge.n	8010f82 <__ieee754_atan2+0xfa>
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	da01      	bge.n	8010f54 <__ieee754_atan2+0xcc>
 8010f50:	323c      	adds	r2, #60	; 0x3c
 8010f52:	db19      	blt.n	8010f88 <__ieee754_atan2+0x100>
 8010f54:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8010f58:	f000 fe90 	bl	8011c7c <fabs>
 8010f5c:	f000 fd94 	bl	8011a88 <atan>
 8010f60:	eeb0 7b40 	vmov.f64	d7, d0
 8010f64:	2c01      	cmp	r4, #1
 8010f66:	d012      	beq.n	8010f8e <__ieee754_atan2+0x106>
 8010f68:	2c02      	cmp	r4, #2
 8010f6a:	d019      	beq.n	8010fa0 <__ieee754_atan2+0x118>
 8010f6c:	2c00      	cmp	r4, #0
 8010f6e:	d0ab      	beq.n	8010ec8 <__ieee754_atan2+0x40>
 8010f70:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8010fe0 <__ieee754_atan2+0x158>
 8010f74:	ee37 7b40 	vsub.f64	d7, d7, d0
 8010f78:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8010fe8 <__ieee754_atan2+0x160>
 8010f7c:	ee37 7b40 	vsub.f64	d7, d7, d0
 8010f80:	e7a2      	b.n	8010ec8 <__ieee754_atan2+0x40>
 8010f82:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010fd0 <__ieee754_atan2+0x148>
 8010f86:	e7ed      	b.n	8010f64 <__ieee754_atan2+0xdc>
 8010f88:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8010ff0 <__ieee754_atan2+0x168>
 8010f8c:	e7ea      	b.n	8010f64 <__ieee754_atan2+0xdc>
 8010f8e:	ee17 1a90 	vmov	r1, s15
 8010f92:	ec53 2b17 	vmov	r2, r3, d7
 8010f96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f9a:	ec43 2b17 	vmov	d7, r2, r3
 8010f9e:	e793      	b.n	8010ec8 <__ieee754_atan2+0x40>
 8010fa0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8010fe0 <__ieee754_atan2+0x158>
 8010fa4:	ee37 7b40 	vsub.f64	d7, d7, d0
 8010fa8:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8010fe8 <__ieee754_atan2+0x160>
 8010fac:	ee30 7b47 	vsub.f64	d7, d0, d7
 8010fb0:	e78a      	b.n	8010ec8 <__ieee754_atan2+0x40>
 8010fb2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8010fe8 <__ieee754_atan2+0x160>
 8010fb6:	e787      	b.n	8010ec8 <__ieee754_atan2+0x40>
 8010fb8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010ff8 <__ieee754_atan2+0x170>
 8010fbc:	e784      	b.n	8010ec8 <__ieee754_atan2+0x40>
 8010fbe:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8010ff0 <__ieee754_atan2+0x168>
 8010fc2:	e781      	b.n	8010ec8 <__ieee754_atan2+0x40>
 8010fc4:	f3af 8000 	nop.w
 8010fc8:	54442d18 	.word	0x54442d18
 8010fcc:	c00921fb 	.word	0xc00921fb
 8010fd0:	54442d18 	.word	0x54442d18
 8010fd4:	3ff921fb 	.word	0x3ff921fb
 8010fd8:	54442d18 	.word	0x54442d18
 8010fdc:	bff921fb 	.word	0xbff921fb
 8010fe0:	33145c07 	.word	0x33145c07
 8010fe4:	3ca1a626 	.word	0x3ca1a626
 8010fe8:	54442d18 	.word	0x54442d18
 8010fec:	400921fb 	.word	0x400921fb
	...
 8010ff8:	54442d18 	.word	0x54442d18
 8010ffc:	3fe921fb 	.word	0x3fe921fb
 8011000:	7ff00000 	.word	0x7ff00000
 8011004:	08013030 	.word	0x08013030
 8011008:	08013048 	.word	0x08013048
 801100c:	00000000 	.word	0x00000000

08011010 <__ieee754_rem_pio2>:
 8011010:	b570      	push	{r4, r5, r6, lr}
 8011012:	eeb0 7b40 	vmov.f64	d7, d0
 8011016:	ee17 5a90 	vmov	r5, s15
 801101a:	4b99      	ldr	r3, [pc, #612]	; (8011280 <__ieee754_rem_pio2+0x270>)
 801101c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011020:	429e      	cmp	r6, r3
 8011022:	b088      	sub	sp, #32
 8011024:	4604      	mov	r4, r0
 8011026:	dc07      	bgt.n	8011038 <__ieee754_rem_pio2+0x28>
 8011028:	2200      	movs	r2, #0
 801102a:	2300      	movs	r3, #0
 801102c:	ed84 0b00 	vstr	d0, [r4]
 8011030:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011034:	2000      	movs	r0, #0
 8011036:	e01b      	b.n	8011070 <__ieee754_rem_pio2+0x60>
 8011038:	4b92      	ldr	r3, [pc, #584]	; (8011284 <__ieee754_rem_pio2+0x274>)
 801103a:	429e      	cmp	r6, r3
 801103c:	dc3b      	bgt.n	80110b6 <__ieee754_rem_pio2+0xa6>
 801103e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8011042:	2d00      	cmp	r5, #0
 8011044:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8011240 <__ieee754_rem_pio2+0x230>
 8011048:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801104c:	dd19      	ble.n	8011082 <__ieee754_rem_pio2+0x72>
 801104e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011052:	429e      	cmp	r6, r3
 8011054:	d00e      	beq.n	8011074 <__ieee754_rem_pio2+0x64>
 8011056:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011248 <__ieee754_rem_pio2+0x238>
 801105a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801105e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011062:	ed84 5b00 	vstr	d5, [r4]
 8011066:	ee37 7b46 	vsub.f64	d7, d7, d6
 801106a:	ed84 7b02 	vstr	d7, [r4, #8]
 801106e:	2001      	movs	r0, #1
 8011070:	b008      	add	sp, #32
 8011072:	bd70      	pop	{r4, r5, r6, pc}
 8011074:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011250 <__ieee754_rem_pio2+0x240>
 8011078:	ee37 7b46 	vsub.f64	d7, d7, d6
 801107c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011258 <__ieee754_rem_pio2+0x248>
 8011080:	e7eb      	b.n	801105a <__ieee754_rem_pio2+0x4a>
 8011082:	429e      	cmp	r6, r3
 8011084:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011088:	d00e      	beq.n	80110a8 <__ieee754_rem_pio2+0x98>
 801108a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8011248 <__ieee754_rem_pio2+0x238>
 801108e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011092:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011096:	ed84 5b00 	vstr	d5, [r4]
 801109a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801109e:	f04f 30ff 	mov.w	r0, #4294967295
 80110a2:	ed84 7b02 	vstr	d7, [r4, #8]
 80110a6:	e7e3      	b.n	8011070 <__ieee754_rem_pio2+0x60>
 80110a8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011250 <__ieee754_rem_pio2+0x240>
 80110ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80110b0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011258 <__ieee754_rem_pio2+0x248>
 80110b4:	e7eb      	b.n	801108e <__ieee754_rem_pio2+0x7e>
 80110b6:	4b74      	ldr	r3, [pc, #464]	; (8011288 <__ieee754_rem_pio2+0x278>)
 80110b8:	429e      	cmp	r6, r3
 80110ba:	dc70      	bgt.n	801119e <__ieee754_rem_pio2+0x18e>
 80110bc:	f000 fdde 	bl	8011c7c <fabs>
 80110c0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80110c4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8011260 <__ieee754_rem_pio2+0x250>
 80110c8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80110cc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80110d0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80110d4:	ee17 0a90 	vmov	r0, s15
 80110d8:	eeb1 4b45 	vneg.f64	d4, d5
 80110dc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011240 <__ieee754_rem_pio2+0x230>
 80110e0:	eea5 0b47 	vfms.f64	d0, d5, d7
 80110e4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011248 <__ieee754_rem_pio2+0x238>
 80110e8:	281f      	cmp	r0, #31
 80110ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80110ee:	ee30 6b47 	vsub.f64	d6, d0, d7
 80110f2:	dc08      	bgt.n	8011106 <__ieee754_rem_pio2+0xf6>
 80110f4:	4b65      	ldr	r3, [pc, #404]	; (801128c <__ieee754_rem_pio2+0x27c>)
 80110f6:	1e42      	subs	r2, r0, #1
 80110f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110fc:	42b3      	cmp	r3, r6
 80110fe:	d002      	beq.n	8011106 <__ieee754_rem_pio2+0xf6>
 8011100:	ed84 6b00 	vstr	d6, [r4]
 8011104:	e026      	b.n	8011154 <__ieee754_rem_pio2+0x144>
 8011106:	ee16 3a90 	vmov	r3, s13
 801110a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801110e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8011112:	2b10      	cmp	r3, #16
 8011114:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011118:	ddf2      	ble.n	8011100 <__ieee754_rem_pio2+0xf0>
 801111a:	eeb0 6b40 	vmov.f64	d6, d0
 801111e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011250 <__ieee754_rem_pio2+0x240>
 8011122:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8011258 <__ieee754_rem_pio2+0x248>
 8011126:	eea4 6b07 	vfma.f64	d6, d4, d7
 801112a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801112e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8011132:	eeb0 7b40 	vmov.f64	d7, d0
 8011136:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801113a:	ee36 3b47 	vsub.f64	d3, d6, d7
 801113e:	ee13 3a90 	vmov	r3, s7
 8011142:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011146:	1ad3      	subs	r3, r2, r3
 8011148:	2b31      	cmp	r3, #49	; 0x31
 801114a:	dc17      	bgt.n	801117c <__ieee754_rem_pio2+0x16c>
 801114c:	eeb0 0b46 	vmov.f64	d0, d6
 8011150:	ed84 3b00 	vstr	d3, [r4]
 8011154:	ed94 6b00 	vldr	d6, [r4]
 8011158:	2d00      	cmp	r5, #0
 801115a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801115e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011162:	ed84 0b02 	vstr	d0, [r4, #8]
 8011166:	da83      	bge.n	8011070 <__ieee754_rem_pio2+0x60>
 8011168:	eeb1 6b46 	vneg.f64	d6, d6
 801116c:	eeb1 0b40 	vneg.f64	d0, d0
 8011170:	ed84 6b00 	vstr	d6, [r4]
 8011174:	ed84 0b02 	vstr	d0, [r4, #8]
 8011178:	4240      	negs	r0, r0
 801117a:	e779      	b.n	8011070 <__ieee754_rem_pio2+0x60>
 801117c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8011268 <__ieee754_rem_pio2+0x258>
 8011180:	eeb0 0b46 	vmov.f64	d0, d6
 8011184:	eea4 0b03 	vfma.f64	d0, d4, d3
 8011188:	ee36 7b40 	vsub.f64	d7, d6, d0
 801118c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8011270 <__ieee754_rem_pio2+0x260>
 8011190:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011194:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011198:	ee30 6b47 	vsub.f64	d6, d0, d7
 801119c:	e7b0      	b.n	8011100 <__ieee754_rem_pio2+0xf0>
 801119e:	4b3c      	ldr	r3, [pc, #240]	; (8011290 <__ieee754_rem_pio2+0x280>)
 80111a0:	429e      	cmp	r6, r3
 80111a2:	dd06      	ble.n	80111b2 <__ieee754_rem_pio2+0x1a2>
 80111a4:	ee30 7b40 	vsub.f64	d7, d0, d0
 80111a8:	ed80 7b02 	vstr	d7, [r0, #8]
 80111ac:	ed80 7b00 	vstr	d7, [r0]
 80111b0:	e740      	b.n	8011034 <__ieee754_rem_pio2+0x24>
 80111b2:	1532      	asrs	r2, r6, #20
 80111b4:	ee10 0a10 	vmov	r0, s0
 80111b8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80111bc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80111c0:	ec41 0b17 	vmov	d7, r0, r1
 80111c4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80111c8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8011278 <__ieee754_rem_pio2+0x268>
 80111cc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80111d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80111d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80111d8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80111dc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80111e0:	a902      	add	r1, sp, #8
 80111e2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80111e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80111ea:	ed8d 6b04 	vstr	d6, [sp, #16]
 80111ee:	ee27 7b05 	vmul.f64	d7, d7, d5
 80111f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80111f6:	2603      	movs	r6, #3
 80111f8:	4608      	mov	r0, r1
 80111fa:	ed91 7b04 	vldr	d7, [r1, #16]
 80111fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011206:	4633      	mov	r3, r6
 8011208:	f1a1 0108 	sub.w	r1, r1, #8
 801120c:	f106 36ff 	add.w	r6, r6, #4294967295
 8011210:	d0f3      	beq.n	80111fa <__ieee754_rem_pio2+0x1ea>
 8011212:	4920      	ldr	r1, [pc, #128]	; (8011294 <__ieee754_rem_pio2+0x284>)
 8011214:	9101      	str	r1, [sp, #4]
 8011216:	2102      	movs	r1, #2
 8011218:	9100      	str	r1, [sp, #0]
 801121a:	4621      	mov	r1, r4
 801121c:	f000 f944 	bl	80114a8 <__kernel_rem_pio2>
 8011220:	2d00      	cmp	r5, #0
 8011222:	f6bf af25 	bge.w	8011070 <__ieee754_rem_pio2+0x60>
 8011226:	ed94 7b00 	vldr	d7, [r4]
 801122a:	eeb1 7b47 	vneg.f64	d7, d7
 801122e:	ed84 7b00 	vstr	d7, [r4]
 8011232:	ed94 7b02 	vldr	d7, [r4, #8]
 8011236:	eeb1 7b47 	vneg.f64	d7, d7
 801123a:	ed84 7b02 	vstr	d7, [r4, #8]
 801123e:	e79b      	b.n	8011178 <__ieee754_rem_pio2+0x168>
 8011240:	54400000 	.word	0x54400000
 8011244:	3ff921fb 	.word	0x3ff921fb
 8011248:	1a626331 	.word	0x1a626331
 801124c:	3dd0b461 	.word	0x3dd0b461
 8011250:	1a600000 	.word	0x1a600000
 8011254:	3dd0b461 	.word	0x3dd0b461
 8011258:	2e037073 	.word	0x2e037073
 801125c:	3ba3198a 	.word	0x3ba3198a
 8011260:	6dc9c883 	.word	0x6dc9c883
 8011264:	3fe45f30 	.word	0x3fe45f30
 8011268:	2e000000 	.word	0x2e000000
 801126c:	3ba3198a 	.word	0x3ba3198a
 8011270:	252049c1 	.word	0x252049c1
 8011274:	397b839a 	.word	0x397b839a
 8011278:	00000000 	.word	0x00000000
 801127c:	41700000 	.word	0x41700000
 8011280:	3fe921fb 	.word	0x3fe921fb
 8011284:	4002d97b 	.word	0x4002d97b
 8011288:	413921fb 	.word	0x413921fb
 801128c:	08013060 	.word	0x08013060
 8011290:	7fefffff 	.word	0x7fefffff
 8011294:	080130e0 	.word	0x080130e0

08011298 <__ieee754_sqrt>:
 8011298:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801129c:	4770      	bx	lr
	...

080112a0 <__ieee754_hypotf>:
 80112a0:	b513      	push	{r0, r1, r4, lr}
 80112a2:	ed8d 0a00 	vstr	s0, [sp]
 80112a6:	edcd 0a01 	vstr	s1, [sp, #4]
 80112aa:	9b00      	ldr	r3, [sp, #0]
 80112ac:	9a01      	ldr	r2, [sp, #4]
 80112ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80112b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80112b6:	4293      	cmp	r3, r2
 80112b8:	bfbe      	ittt	lt
 80112ba:	4619      	movlt	r1, r3
 80112bc:	4613      	movlt	r3, r2
 80112be:	460a      	movlt	r2, r1
 80112c0:	1a99      	subs	r1, r3, r2
 80112c2:	f1b1 6f70 	cmp.w	r1, #251658240	; 0xf000000
 80112c6:	ee00 3a10 	vmov	s0, r3
 80112ca:	ee06 2a90 	vmov	s13, r2
 80112ce:	dd03      	ble.n	80112d8 <__ieee754_hypotf+0x38>
 80112d0:	ee30 0a26 	vadd.f32	s0, s0, s13
 80112d4:	b002      	add	sp, #8
 80112d6:	bd10      	pop	{r4, pc}
 80112d8:	f1b3 4fb1 	cmp.w	r3, #1484783616	; 0x58800000
 80112dc:	dd48      	ble.n	8011370 <__ieee754_hypotf+0xd0>
 80112de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80112e2:	db0c      	blt.n	80112fe <__ieee754_hypotf+0x5e>
 80112e4:	bf08      	it	eq
 80112e6:	ed9f 0a35 	vldreq	s0, [pc, #212]	; 80113bc <__ieee754_hypotf+0x11c>
 80112ea:	eddf 7a34 	vldr	s15, [pc, #208]	; 80113bc <__ieee754_hypotf+0x11c>
 80112ee:	bf18      	it	ne
 80112f0:	ee30 0a26 	vaddne.f32	s0, s0, s13
 80112f4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80112f8:	fe07 0a80 	vseleq.f32	s0, s15, s0
 80112fc:	e7ea      	b.n	80112d4 <__ieee754_hypotf+0x34>
 80112fe:	f103 435e 	add.w	r3, r3, #3724541952	; 0xde000000
 8011302:	f102 425e 	add.w	r2, r2, #3724541952	; 0xde000000
 8011306:	ee00 3a10 	vmov	s0, r3
 801130a:	ee06 2a90 	vmov	s13, r2
 801130e:	2444      	movs	r4, #68	; 0x44
 8011310:	f1b2 5f1a 	cmp.w	r2, #645922816	; 0x26800000
 8011314:	da0b      	bge.n	801132e <__ieee754_hypotf+0x8e>
 8011316:	2a00      	cmp	r2, #0
 8011318:	d0dc      	beq.n	80112d4 <__ieee754_hypotf+0x34>
 801131a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801131e:	da29      	bge.n	8011374 <__ieee754_hypotf+0xd4>
 8011320:	eddf 7a27 	vldr	s15, [pc, #156]	; 80113c0 <__ieee754_hypotf+0x120>
 8011324:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011328:	ee20 0a27 	vmul.f32	s0, s0, s15
 801132c:	3c7e      	subs	r4, #126	; 0x7e
 801132e:	ee30 6a66 	vsub.f32	s12, s0, s13
 8011332:	4924      	ldr	r1, [pc, #144]	; (80113c4 <__ieee754_hypotf+0x124>)
 8011334:	eef4 6ac6 	vcmpe.f32	s13, s12
 8011338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801133c:	d524      	bpl.n	8011388 <__ieee754_hypotf+0xe8>
 801133e:	400b      	ands	r3, r1
 8011340:	ee07 3a90 	vmov	s15, r3
 8011344:	ee30 7a27 	vadd.f32	s14, s0, s15
 8011348:	ee30 0a67 	vsub.f32	s0, s0, s15
 801134c:	ee20 0a47 	vnmul.f32	s0, s0, s14
 8011350:	eea6 0ae6 	vfms.f32	s0, s13, s13
 8011354:	ee97 0aa7 	vfnms.f32	s0, s15, s15
 8011358:	f000 f836 	bl	80113c8 <__ieee754_sqrtf>
 801135c:	2c00      	cmp	r4, #0
 801135e:	d0b9      	beq.n	80112d4 <__ieee754_hypotf+0x34>
 8011360:	05e4      	lsls	r4, r4, #23
 8011362:	f104 547e 	add.w	r4, r4, #1065353216	; 0x3f800000
 8011366:	ee07 4a90 	vmov	s15, r4
 801136a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801136e:	e7b1      	b.n	80112d4 <__ieee754_hypotf+0x34>
 8011370:	2400      	movs	r4, #0
 8011372:	e7cd      	b.n	8011310 <__ieee754_hypotf+0x70>
 8011374:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
 8011378:	f102 5208 	add.w	r2, r2, #570425344	; 0x22000000
 801137c:	ee00 3a10 	vmov	s0, r3
 8011380:	ee06 2a90 	vmov	s13, r2
 8011384:	3c44      	subs	r4, #68	; 0x44
 8011386:	e7d2      	b.n	801132e <__ieee754_hypotf+0x8e>
 8011388:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 801138c:	400b      	ands	r3, r1
 801138e:	ee05 3a10 	vmov	s10, r3
 8011392:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8011396:	ee90 5a24 	vfnms.f32	s10, s0, s9
 801139a:	400a      	ands	r2, r1
 801139c:	ee07 2a10 	vmov	s14, r2
 80113a0:	ee07 3a90 	vmov	s15, r3
 80113a4:	ee76 5ac7 	vsub.f32	s11, s13, s14
 80113a8:	ee26 0a85 	vmul.f32	s0, s13, s10
 80113ac:	eea5 0aa7 	vfma.f32	s0, s11, s15
 80113b0:	ee96 0a46 	vfnma.f32	s0, s12, s12
 80113b4:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80113b8:	e7ce      	b.n	8011358 <__ieee754_hypotf+0xb8>
 80113ba:	bf00      	nop
 80113bc:	7f800000 	.word	0x7f800000
 80113c0:	7e800000 	.word	0x7e800000
 80113c4:	fffff000 	.word	0xfffff000

080113c8 <__ieee754_sqrtf>:
 80113c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80113cc:	4770      	bx	lr
	...

080113d0 <__kernel_cos>:
 80113d0:	ee10 1a90 	vmov	r1, s1
 80113d4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80113d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80113dc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80113e0:	da05      	bge.n	80113ee <__kernel_cos+0x1e>
 80113e2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80113e6:	ee17 3a90 	vmov	r3, s15
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d03d      	beq.n	801146a <__kernel_cos+0x9a>
 80113ee:	ee20 3b00 	vmul.f64	d3, d0, d0
 80113f2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011470 <__kernel_cos+0xa0>
 80113f6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011478 <__kernel_cos+0xa8>
 80113fa:	eea3 6b07 	vfma.f64	d6, d3, d7
 80113fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011480 <__kernel_cos+0xb0>
 8011402:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011406:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011488 <__kernel_cos+0xb8>
 801140a:	eea7 6b03 	vfma.f64	d6, d7, d3
 801140e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011490 <__kernel_cos+0xc0>
 8011412:	4b23      	ldr	r3, [pc, #140]	; (80114a0 <__kernel_cos+0xd0>)
 8011414:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011418:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011498 <__kernel_cos+0xc8>
 801141c:	4299      	cmp	r1, r3
 801141e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011422:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011426:	ee26 5b03 	vmul.f64	d5, d6, d3
 801142a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801142e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8011432:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011436:	dc04      	bgt.n	8011442 <__kernel_cos+0x72>
 8011438:	ee37 6b46 	vsub.f64	d6, d7, d6
 801143c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011440:	4770      	bx	lr
 8011442:	4b18      	ldr	r3, [pc, #96]	; (80114a4 <__kernel_cos+0xd4>)
 8011444:	4299      	cmp	r1, r3
 8011446:	dc0d      	bgt.n	8011464 <__kernel_cos+0x94>
 8011448:	2200      	movs	r2, #0
 801144a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801144e:	ec43 2b15 	vmov	d5, r2, r3
 8011452:	ee34 0b45 	vsub.f64	d0, d4, d5
 8011456:	ee37 7b45 	vsub.f64	d7, d7, d5
 801145a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801145e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011462:	4770      	bx	lr
 8011464:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011468:	e7f3      	b.n	8011452 <__kernel_cos+0x82>
 801146a:	eeb0 0b44 	vmov.f64	d0, d4
 801146e:	4770      	bx	lr
 8011470:	be8838d4 	.word	0xbe8838d4
 8011474:	bda8fae9 	.word	0xbda8fae9
 8011478:	bdb4b1c4 	.word	0xbdb4b1c4
 801147c:	3e21ee9e 	.word	0x3e21ee9e
 8011480:	809c52ad 	.word	0x809c52ad
 8011484:	be927e4f 	.word	0xbe927e4f
 8011488:	19cb1590 	.word	0x19cb1590
 801148c:	3efa01a0 	.word	0x3efa01a0
 8011490:	16c15177 	.word	0x16c15177
 8011494:	bf56c16c 	.word	0xbf56c16c
 8011498:	5555554c 	.word	0x5555554c
 801149c:	3fa55555 	.word	0x3fa55555
 80114a0:	3fd33332 	.word	0x3fd33332
 80114a4:	3fe90000 	.word	0x3fe90000

080114a8 <__kernel_rem_pio2>:
 80114a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114ac:	ed2d 8b06 	vpush	{d8-d10}
 80114b0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80114b4:	460f      	mov	r7, r1
 80114b6:	9002      	str	r0, [sp, #8]
 80114b8:	49c5      	ldr	r1, [pc, #788]	; (80117d0 <__kernel_rem_pio2+0x328>)
 80114ba:	98a2      	ldr	r0, [sp, #648]	; 0x288
 80114bc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 80114c0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 80114c4:	9301      	str	r3, [sp, #4]
 80114c6:	f112 0f14 	cmn.w	r2, #20
 80114ca:	bfa8      	it	ge
 80114cc:	2018      	movge	r0, #24
 80114ce:	f103 31ff 	add.w	r1, r3, #4294967295
 80114d2:	bfb8      	it	lt
 80114d4:	2000      	movlt	r0, #0
 80114d6:	f06f 0417 	mvn.w	r4, #23
 80114da:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80117b8 <__kernel_rem_pio2+0x310>
 80114de:	bfa4      	itt	ge
 80114e0:	f1a2 0a03 	subge.w	sl, r2, #3
 80114e4:	fb9a f0f0 	sdivge	r0, sl, r0
 80114e8:	fb00 4404 	mla	r4, r0, r4, r4
 80114ec:	1a46      	subs	r6, r0, r1
 80114ee:	4414      	add	r4, r2
 80114f0:	eb09 0c01 	add.w	ip, r9, r1
 80114f4:	ad1a      	add	r5, sp, #104	; 0x68
 80114f6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80114fa:	2200      	movs	r2, #0
 80114fc:	4562      	cmp	r2, ip
 80114fe:	dd10      	ble.n	8011522 <__kernel_rem_pio2+0x7a>
 8011500:	9a01      	ldr	r2, [sp, #4]
 8011502:	ab1a      	add	r3, sp, #104	; 0x68
 8011504:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011508:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 801150c:	f04f 0c00 	mov.w	ip, #0
 8011510:	45cc      	cmp	ip, r9
 8011512:	dc26      	bgt.n	8011562 <__kernel_rem_pio2+0xba>
 8011514:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 80117b8 <__kernel_rem_pio2+0x310>
 8011518:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801151c:	4616      	mov	r6, r2
 801151e:	2500      	movs	r5, #0
 8011520:	e015      	b.n	801154e <__kernel_rem_pio2+0xa6>
 8011522:	42d6      	cmn	r6, r2
 8011524:	d409      	bmi.n	801153a <__kernel_rem_pio2+0x92>
 8011526:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801152a:	ee07 3a90 	vmov	s15, r3
 801152e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011532:	eca5 7b02 	vstmia	r5!, {d7}
 8011536:	3201      	adds	r2, #1
 8011538:	e7e0      	b.n	80114fc <__kernel_rem_pio2+0x54>
 801153a:	eeb0 7b46 	vmov.f64	d7, d6
 801153e:	e7f8      	b.n	8011532 <__kernel_rem_pio2+0x8a>
 8011540:	ecb8 5b02 	vldmia	r8!, {d5}
 8011544:	ed96 6b00 	vldr	d6, [r6]
 8011548:	3501      	adds	r5, #1
 801154a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801154e:	428d      	cmp	r5, r1
 8011550:	f1a6 0608 	sub.w	r6, r6, #8
 8011554:	ddf4      	ble.n	8011540 <__kernel_rem_pio2+0x98>
 8011556:	ecaa 7b02 	vstmia	sl!, {d7}
 801155a:	f10c 0c01 	add.w	ip, ip, #1
 801155e:	3208      	adds	r2, #8
 8011560:	e7d6      	b.n	8011510 <__kernel_rem_pio2+0x68>
 8011562:	ab06      	add	r3, sp, #24
 8011564:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80117c0 <__kernel_rem_pio2+0x318>
 8011568:	ed9f ab97 	vldr	d10, [pc, #604]	; 80117c8 <__kernel_rem_pio2+0x320>
 801156c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8011570:	9303      	str	r3, [sp, #12]
 8011572:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8011576:	464d      	mov	r5, r9
 8011578:	00eb      	lsls	r3, r5, #3
 801157a:	9304      	str	r3, [sp, #16]
 801157c:	ab92      	add	r3, sp, #584	; 0x248
 801157e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011582:	f10d 0b18 	add.w	fp, sp, #24
 8011586:	ab6a      	add	r3, sp, #424	; 0x1a8
 8011588:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801158c:	465e      	mov	r6, fp
 801158e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011592:	4628      	mov	r0, r5
 8011594:	2800      	cmp	r0, #0
 8011596:	f1a2 0208 	sub.w	r2, r2, #8
 801159a:	dc4c      	bgt.n	8011636 <__kernel_rem_pio2+0x18e>
 801159c:	4620      	mov	r0, r4
 801159e:	9105      	str	r1, [sp, #20]
 80115a0:	f000 fbea 	bl	8011d78 <scalbn>
 80115a4:	eeb0 8b40 	vmov.f64	d8, d0
 80115a8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80115ac:	ee28 0b00 	vmul.f64	d0, d8, d0
 80115b0:	f000 fb6e 	bl	8011c90 <floor>
 80115b4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80115b8:	eea0 8b47 	vfms.f64	d8, d0, d7
 80115bc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80115c0:	2c00      	cmp	r4, #0
 80115c2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80115c6:	ee17 8a90 	vmov	r8, s15
 80115ca:	ee38 8b40 	vsub.f64	d8, d8, d0
 80115ce:	9905      	ldr	r1, [sp, #20]
 80115d0:	dd43      	ble.n	801165a <__kernel_rem_pio2+0x1b2>
 80115d2:	1e68      	subs	r0, r5, #1
 80115d4:	ab06      	add	r3, sp, #24
 80115d6:	f1c4 0c18 	rsb	ip, r4, #24
 80115da:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80115de:	fa46 f20c 	asr.w	r2, r6, ip
 80115e2:	4490      	add	r8, r2
 80115e4:	fa02 f20c 	lsl.w	r2, r2, ip
 80115e8:	1ab6      	subs	r6, r6, r2
 80115ea:	f1c4 0217 	rsb	r2, r4, #23
 80115ee:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80115f2:	4116      	asrs	r6, r2
 80115f4:	2e00      	cmp	r6, #0
 80115f6:	dd3f      	ble.n	8011678 <__kernel_rem_pio2+0x1d0>
 80115f8:	f04f 0c00 	mov.w	ip, #0
 80115fc:	f108 0801 	add.w	r8, r8, #1
 8011600:	4660      	mov	r0, ip
 8011602:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8011606:	4565      	cmp	r5, ip
 8011608:	dc6e      	bgt.n	80116e8 <__kernel_rem_pio2+0x240>
 801160a:	2c00      	cmp	r4, #0
 801160c:	dd04      	ble.n	8011618 <__kernel_rem_pio2+0x170>
 801160e:	2c01      	cmp	r4, #1
 8011610:	d07f      	beq.n	8011712 <__kernel_rem_pio2+0x26a>
 8011612:	2c02      	cmp	r4, #2
 8011614:	f000 8087 	beq.w	8011726 <__kernel_rem_pio2+0x27e>
 8011618:	2e02      	cmp	r6, #2
 801161a:	d12d      	bne.n	8011678 <__kernel_rem_pio2+0x1d0>
 801161c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011620:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011624:	b340      	cbz	r0, 8011678 <__kernel_rem_pio2+0x1d0>
 8011626:	4620      	mov	r0, r4
 8011628:	9105      	str	r1, [sp, #20]
 801162a:	f000 fba5 	bl	8011d78 <scalbn>
 801162e:	9905      	ldr	r1, [sp, #20]
 8011630:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011634:	e020      	b.n	8011678 <__kernel_rem_pio2+0x1d0>
 8011636:	ee20 7b09 	vmul.f64	d7, d0, d9
 801163a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801163e:	3801      	subs	r0, #1
 8011640:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011644:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011648:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801164c:	eca6 0a01 	vstmia	r6!, {s0}
 8011650:	ed92 0b00 	vldr	d0, [r2]
 8011654:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011658:	e79c      	b.n	8011594 <__kernel_rem_pio2+0xec>
 801165a:	d105      	bne.n	8011668 <__kernel_rem_pio2+0x1c0>
 801165c:	1e6a      	subs	r2, r5, #1
 801165e:	ab06      	add	r3, sp, #24
 8011660:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8011664:	15f6      	asrs	r6, r6, #23
 8011666:	e7c5      	b.n	80115f4 <__kernel_rem_pio2+0x14c>
 8011668:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801166c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011674:	da36      	bge.n	80116e4 <__kernel_rem_pio2+0x23c>
 8011676:	2600      	movs	r6, #0
 8011678:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011680:	f040 80aa 	bne.w	80117d8 <__kernel_rem_pio2+0x330>
 8011684:	f105 3bff 	add.w	fp, r5, #4294967295
 8011688:	4658      	mov	r0, fp
 801168a:	2200      	movs	r2, #0
 801168c:	4548      	cmp	r0, r9
 801168e:	da52      	bge.n	8011736 <__kernel_rem_pio2+0x28e>
 8011690:	2a00      	cmp	r2, #0
 8011692:	f000 8081 	beq.w	8011798 <__kernel_rem_pio2+0x2f0>
 8011696:	ab06      	add	r3, sp, #24
 8011698:	3c18      	subs	r4, #24
 801169a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	f000 8087 	beq.w	80117b2 <__kernel_rem_pio2+0x30a>
 80116a4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80116a8:	4620      	mov	r0, r4
 80116aa:	f000 fb65 	bl	8011d78 <scalbn>
 80116ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80116b2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80117c0 <__kernel_rem_pio2+0x318>
 80116b6:	a96a      	add	r1, sp, #424	; 0x1a8
 80116b8:	f103 0208 	add.w	r2, r3, #8
 80116bc:	1888      	adds	r0, r1, r2
 80116be:	4659      	mov	r1, fp
 80116c0:	2900      	cmp	r1, #0
 80116c2:	f280 80b7 	bge.w	8011834 <__kernel_rem_pio2+0x38c>
 80116c6:	4659      	mov	r1, fp
 80116c8:	2900      	cmp	r1, #0
 80116ca:	f2c0 80d5 	blt.w	8011878 <__kernel_rem_pio2+0x3d0>
 80116ce:	a86a      	add	r0, sp, #424	; 0x1a8
 80116d0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 80116d4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80117b8 <__kernel_rem_pio2+0x310>
 80116d8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80117d4 <__kernel_rem_pio2+0x32c>
 80116dc:	2400      	movs	r4, #0
 80116de:	ebab 0001 	sub.w	r0, fp, r1
 80116e2:	e0be      	b.n	8011862 <__kernel_rem_pio2+0x3ba>
 80116e4:	2602      	movs	r6, #2
 80116e6:	e787      	b.n	80115f8 <__kernel_rem_pio2+0x150>
 80116e8:	f8db 2000 	ldr.w	r2, [fp]
 80116ec:	b958      	cbnz	r0, 8011706 <__kernel_rem_pio2+0x25e>
 80116ee:	b122      	cbz	r2, 80116fa <__kernel_rem_pio2+0x252>
 80116f0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80116f4:	f8cb 2000 	str.w	r2, [fp]
 80116f8:	2201      	movs	r2, #1
 80116fa:	f10c 0c01 	add.w	ip, ip, #1
 80116fe:	f10b 0b04 	add.w	fp, fp, #4
 8011702:	4610      	mov	r0, r2
 8011704:	e77f      	b.n	8011606 <__kernel_rem_pio2+0x15e>
 8011706:	ebae 0202 	sub.w	r2, lr, r2
 801170a:	f8cb 2000 	str.w	r2, [fp]
 801170e:	4602      	mov	r2, r0
 8011710:	e7f3      	b.n	80116fa <__kernel_rem_pio2+0x252>
 8011712:	f105 3cff 	add.w	ip, r5, #4294967295
 8011716:	ab06      	add	r3, sp, #24
 8011718:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801171c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011720:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8011724:	e778      	b.n	8011618 <__kernel_rem_pio2+0x170>
 8011726:	f105 3cff 	add.w	ip, r5, #4294967295
 801172a:	ab06      	add	r3, sp, #24
 801172c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011730:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8011734:	e7f4      	b.n	8011720 <__kernel_rem_pio2+0x278>
 8011736:	ab06      	add	r3, sp, #24
 8011738:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801173c:	3801      	subs	r0, #1
 801173e:	431a      	orrs	r2, r3
 8011740:	e7a4      	b.n	801168c <__kernel_rem_pio2+0x1e4>
 8011742:	f10c 0c01 	add.w	ip, ip, #1
 8011746:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801174a:	2800      	cmp	r0, #0
 801174c:	d0f9      	beq.n	8011742 <__kernel_rem_pio2+0x29a>
 801174e:	9b04      	ldr	r3, [sp, #16]
 8011750:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8011754:	eb0d 0203 	add.w	r2, sp, r3
 8011758:	9b01      	ldr	r3, [sp, #4]
 801175a:	18e8      	adds	r0, r5, r3
 801175c:	ab1a      	add	r3, sp, #104	; 0x68
 801175e:	1c6e      	adds	r6, r5, #1
 8011760:	3a98      	subs	r2, #152	; 0x98
 8011762:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011766:	4465      	add	r5, ip
 8011768:	42b5      	cmp	r5, r6
 801176a:	f6ff af05 	blt.w	8011578 <__kernel_rem_pio2+0xd0>
 801176e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8011772:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011776:	ee07 3a90 	vmov	s15, r3
 801177a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801177e:	f04f 0c00 	mov.w	ip, #0
 8011782:	eca0 7b02 	vstmia	r0!, {d7}
 8011786:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80117b8 <__kernel_rem_pio2+0x310>
 801178a:	4680      	mov	r8, r0
 801178c:	458c      	cmp	ip, r1
 801178e:	dd07      	ble.n	80117a0 <__kernel_rem_pio2+0x2f8>
 8011790:	eca2 7b02 	vstmia	r2!, {d7}
 8011794:	3601      	adds	r6, #1
 8011796:	e7e7      	b.n	8011768 <__kernel_rem_pio2+0x2c0>
 8011798:	9a03      	ldr	r2, [sp, #12]
 801179a:	f04f 0c01 	mov.w	ip, #1
 801179e:	e7d2      	b.n	8011746 <__kernel_rem_pio2+0x29e>
 80117a0:	ecbe 5b02 	vldmia	lr!, {d5}
 80117a4:	ed38 6b02 	vldmdb	r8!, {d6}
 80117a8:	f10c 0c01 	add.w	ip, ip, #1
 80117ac:	eea5 7b06 	vfma.f64	d7, d5, d6
 80117b0:	e7ec      	b.n	801178c <__kernel_rem_pio2+0x2e4>
 80117b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80117b6:	e76e      	b.n	8011696 <__kernel_rem_pio2+0x1ee>
	...
 80117c4:	3e700000 	.word	0x3e700000
 80117c8:	00000000 	.word	0x00000000
 80117cc:	41700000 	.word	0x41700000
 80117d0:	08013228 	.word	0x08013228
 80117d4:	080131e8 	.word	0x080131e8
 80117d8:	4260      	negs	r0, r4
 80117da:	eeb0 0b48 	vmov.f64	d0, d8
 80117de:	f000 facb 	bl	8011d78 <scalbn>
 80117e2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80119c0 <__kernel_rem_pio2+0x518>
 80117e6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80117ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ee:	db18      	blt.n	8011822 <__kernel_rem_pio2+0x37a>
 80117f0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80119c8 <__kernel_rem_pio2+0x520>
 80117f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80117f8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80117fc:	aa06      	add	r2, sp, #24
 80117fe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011802:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011806:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801180a:	f105 0b01 	add.w	fp, r5, #1
 801180e:	ee10 3a10 	vmov	r3, s0
 8011812:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011816:	ee17 3a10 	vmov	r3, s14
 801181a:	3418      	adds	r4, #24
 801181c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8011820:	e740      	b.n	80116a4 <__kernel_rem_pio2+0x1fc>
 8011822:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011826:	aa06      	add	r2, sp, #24
 8011828:	ee10 3a10 	vmov	r3, s0
 801182c:	46ab      	mov	fp, r5
 801182e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011832:	e737      	b.n	80116a4 <__kernel_rem_pio2+0x1fc>
 8011834:	ac06      	add	r4, sp, #24
 8011836:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801183a:	9401      	str	r4, [sp, #4]
 801183c:	ee07 4a90 	vmov	s15, r4
 8011840:	3901      	subs	r1, #1
 8011842:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011846:	ee27 7b00 	vmul.f64	d7, d7, d0
 801184a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801184e:	ed20 7b02 	vstmdb	r0!, {d7}
 8011852:	e735      	b.n	80116c0 <__kernel_rem_pio2+0x218>
 8011854:	ecbc 5b02 	vldmia	ip!, {d5}
 8011858:	ecb5 6b02 	vldmia	r5!, {d6}
 801185c:	3401      	adds	r4, #1
 801185e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011862:	454c      	cmp	r4, r9
 8011864:	dc01      	bgt.n	801186a <__kernel_rem_pio2+0x3c2>
 8011866:	4284      	cmp	r4, r0
 8011868:	ddf4      	ble.n	8011854 <__kernel_rem_pio2+0x3ac>
 801186a:	ac42      	add	r4, sp, #264	; 0x108
 801186c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8011870:	ed80 7b00 	vstr	d7, [r0]
 8011874:	3901      	subs	r1, #1
 8011876:	e727      	b.n	80116c8 <__kernel_rem_pio2+0x220>
 8011878:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801187a:	2902      	cmp	r1, #2
 801187c:	dc0a      	bgt.n	8011894 <__kernel_rem_pio2+0x3ec>
 801187e:	2900      	cmp	r1, #0
 8011880:	dc2c      	bgt.n	80118dc <__kernel_rem_pio2+0x434>
 8011882:	d045      	beq.n	8011910 <__kernel_rem_pio2+0x468>
 8011884:	f008 0007 	and.w	r0, r8, #7
 8011888:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801188c:	ecbd 8b06 	vpop	{d8-d10}
 8011890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011894:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8011896:	2a03      	cmp	r2, #3
 8011898:	d1f4      	bne.n	8011884 <__kernel_rem_pio2+0x3dc>
 801189a:	aa42      	add	r2, sp, #264	; 0x108
 801189c:	4413      	add	r3, r2
 801189e:	461a      	mov	r2, r3
 80118a0:	4619      	mov	r1, r3
 80118a2:	4658      	mov	r0, fp
 80118a4:	2800      	cmp	r0, #0
 80118a6:	f1a1 0108 	sub.w	r1, r1, #8
 80118aa:	dc54      	bgt.n	8011956 <__kernel_rem_pio2+0x4ae>
 80118ac:	4659      	mov	r1, fp
 80118ae:	2901      	cmp	r1, #1
 80118b0:	f1a2 0208 	sub.w	r2, r2, #8
 80118b4:	dc5f      	bgt.n	8011976 <__kernel_rem_pio2+0x4ce>
 80118b6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80119d0 <__kernel_rem_pio2+0x528>
 80118ba:	3308      	adds	r3, #8
 80118bc:	f1bb 0f01 	cmp.w	fp, #1
 80118c0:	dc69      	bgt.n	8011996 <__kernel_rem_pio2+0x4ee>
 80118c2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80118c6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80118ca:	2e00      	cmp	r6, #0
 80118cc:	d16a      	bne.n	80119a4 <__kernel_rem_pio2+0x4fc>
 80118ce:	ed87 5b00 	vstr	d5, [r7]
 80118d2:	ed87 6b02 	vstr	d6, [r7, #8]
 80118d6:	ed87 7b04 	vstr	d7, [r7, #16]
 80118da:	e7d3      	b.n	8011884 <__kernel_rem_pio2+0x3dc>
 80118dc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80119d0 <__kernel_rem_pio2+0x528>
 80118e0:	ab42      	add	r3, sp, #264	; 0x108
 80118e2:	441a      	add	r2, r3
 80118e4:	465b      	mov	r3, fp
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	da26      	bge.n	8011938 <__kernel_rem_pio2+0x490>
 80118ea:	b35e      	cbz	r6, 8011944 <__kernel_rem_pio2+0x49c>
 80118ec:	eeb1 7b46 	vneg.f64	d7, d6
 80118f0:	ed87 7b00 	vstr	d7, [r7]
 80118f4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80118f8:	aa44      	add	r2, sp, #272	; 0x110
 80118fa:	2301      	movs	r3, #1
 80118fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011900:	459b      	cmp	fp, r3
 8011902:	da22      	bge.n	801194a <__kernel_rem_pio2+0x4a2>
 8011904:	b10e      	cbz	r6, 801190a <__kernel_rem_pio2+0x462>
 8011906:	eeb1 7b47 	vneg.f64	d7, d7
 801190a:	ed87 7b02 	vstr	d7, [r7, #8]
 801190e:	e7b9      	b.n	8011884 <__kernel_rem_pio2+0x3dc>
 8011910:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80119d0 <__kernel_rem_pio2+0x528>
 8011914:	ab42      	add	r3, sp, #264	; 0x108
 8011916:	441a      	add	r2, r3
 8011918:	f1bb 0f00 	cmp.w	fp, #0
 801191c:	da05      	bge.n	801192a <__kernel_rem_pio2+0x482>
 801191e:	b10e      	cbz	r6, 8011924 <__kernel_rem_pio2+0x47c>
 8011920:	eeb1 7b47 	vneg.f64	d7, d7
 8011924:	ed87 7b00 	vstr	d7, [r7]
 8011928:	e7ac      	b.n	8011884 <__kernel_rem_pio2+0x3dc>
 801192a:	ed32 6b02 	vldmdb	r2!, {d6}
 801192e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011932:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011936:	e7ef      	b.n	8011918 <__kernel_rem_pio2+0x470>
 8011938:	ed32 7b02 	vldmdb	r2!, {d7}
 801193c:	3b01      	subs	r3, #1
 801193e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011942:	e7d0      	b.n	80118e6 <__kernel_rem_pio2+0x43e>
 8011944:	eeb0 7b46 	vmov.f64	d7, d6
 8011948:	e7d2      	b.n	80118f0 <__kernel_rem_pio2+0x448>
 801194a:	ecb2 6b02 	vldmia	r2!, {d6}
 801194e:	3301      	adds	r3, #1
 8011950:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011954:	e7d4      	b.n	8011900 <__kernel_rem_pio2+0x458>
 8011956:	ed91 7b00 	vldr	d7, [r1]
 801195a:	ed91 5b02 	vldr	d5, [r1, #8]
 801195e:	3801      	subs	r0, #1
 8011960:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011964:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011968:	ed81 6b00 	vstr	d6, [r1]
 801196c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011970:	ed81 7b02 	vstr	d7, [r1, #8]
 8011974:	e796      	b.n	80118a4 <__kernel_rem_pio2+0x3fc>
 8011976:	ed92 7b00 	vldr	d7, [r2]
 801197a:	ed92 5b02 	vldr	d5, [r2, #8]
 801197e:	3901      	subs	r1, #1
 8011980:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011984:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011988:	ed82 6b00 	vstr	d6, [r2]
 801198c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011990:	ed82 7b02 	vstr	d7, [r2, #8]
 8011994:	e78b      	b.n	80118ae <__kernel_rem_pio2+0x406>
 8011996:	ed33 6b02 	vldmdb	r3!, {d6}
 801199a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801199e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80119a2:	e78b      	b.n	80118bc <__kernel_rem_pio2+0x414>
 80119a4:	eeb1 5b45 	vneg.f64	d5, d5
 80119a8:	eeb1 6b46 	vneg.f64	d6, d6
 80119ac:	ed87 5b00 	vstr	d5, [r7]
 80119b0:	eeb1 7b47 	vneg.f64	d7, d7
 80119b4:	ed87 6b02 	vstr	d6, [r7, #8]
 80119b8:	e78d      	b.n	80118d6 <__kernel_rem_pio2+0x42e>
 80119ba:	bf00      	nop
 80119bc:	f3af 8000 	nop.w
 80119c0:	00000000 	.word	0x00000000
 80119c4:	41700000 	.word	0x41700000
 80119c8:	00000000 	.word	0x00000000
 80119cc:	3e700000 	.word	0x3e700000
	...

080119d8 <__kernel_sin>:
 80119d8:	ee10 3a90 	vmov	r3, s1
 80119dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80119e0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80119e4:	da04      	bge.n	80119f0 <__kernel_sin+0x18>
 80119e6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80119ea:	ee17 3a90 	vmov	r3, s15
 80119ee:	b35b      	cbz	r3, 8011a48 <__kernel_sin+0x70>
 80119f0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80119f4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80119f8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011a50 <__kernel_sin+0x78>
 80119fc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011a58 <__kernel_sin+0x80>
 8011a00:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011a04:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011a60 <__kernel_sin+0x88>
 8011a08:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011a0c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011a68 <__kernel_sin+0x90>
 8011a10:	eea7 4b06 	vfma.f64	d4, d7, d6
 8011a14:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011a70 <__kernel_sin+0x98>
 8011a18:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011a1c:	b930      	cbnz	r0, 8011a2c <__kernel_sin+0x54>
 8011a1e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011a78 <__kernel_sin+0xa0>
 8011a22:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011a26:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011a2a:	4770      	bx	lr
 8011a2c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011a30:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011a34:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011a38:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011a3c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011a80 <__kernel_sin+0xa8>
 8011a40:	eea5 1b07 	vfma.f64	d1, d5, d7
 8011a44:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011a48:	4770      	bx	lr
 8011a4a:	bf00      	nop
 8011a4c:	f3af 8000 	nop.w
 8011a50:	5acfd57c 	.word	0x5acfd57c
 8011a54:	3de5d93a 	.word	0x3de5d93a
 8011a58:	8a2b9ceb 	.word	0x8a2b9ceb
 8011a5c:	be5ae5e6 	.word	0xbe5ae5e6
 8011a60:	57b1fe7d 	.word	0x57b1fe7d
 8011a64:	3ec71de3 	.word	0x3ec71de3
 8011a68:	19c161d5 	.word	0x19c161d5
 8011a6c:	bf2a01a0 	.word	0xbf2a01a0
 8011a70:	1110f8a6 	.word	0x1110f8a6
 8011a74:	3f811111 	.word	0x3f811111
 8011a78:	55555549 	.word	0x55555549
 8011a7c:	bfc55555 	.word	0xbfc55555
 8011a80:	55555549 	.word	0x55555549
 8011a84:	3fc55555 	.word	0x3fc55555

08011a88 <atan>:
 8011a88:	b538      	push	{r3, r4, r5, lr}
 8011a8a:	eeb0 7b40 	vmov.f64	d7, d0
 8011a8e:	ee17 5a90 	vmov	r5, s15
 8011a92:	4b73      	ldr	r3, [pc, #460]	; (8011c60 <atan+0x1d8>)
 8011a94:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011a98:	429c      	cmp	r4, r3
 8011a9a:	dd13      	ble.n	8011ac4 <atan+0x3c>
 8011a9c:	4b71      	ldr	r3, [pc, #452]	; (8011c64 <atan+0x1dc>)
 8011a9e:	429c      	cmp	r4, r3
 8011aa0:	dc03      	bgt.n	8011aaa <atan+0x22>
 8011aa2:	d107      	bne.n	8011ab4 <atan+0x2c>
 8011aa4:	ee10 3a10 	vmov	r3, s0
 8011aa8:	b123      	cbz	r3, 8011ab4 <atan+0x2c>
 8011aaa:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011aae:	eeb0 0b47 	vmov.f64	d0, d7
 8011ab2:	bd38      	pop	{r3, r4, r5, pc}
 8011ab4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011bf0 <atan+0x168>
 8011ab8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011bf8 <atan+0x170>
 8011abc:	2d00      	cmp	r5, #0
 8011abe:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8011ac2:	e7f4      	b.n	8011aae <atan+0x26>
 8011ac4:	4b68      	ldr	r3, [pc, #416]	; (8011c68 <atan+0x1e0>)
 8011ac6:	429c      	cmp	r4, r3
 8011ac8:	dc11      	bgt.n	8011aee <atan+0x66>
 8011aca:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011ace:	429c      	cmp	r4, r3
 8011ad0:	dc0a      	bgt.n	8011ae8 <atan+0x60>
 8011ad2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8011ad6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8011c00 <atan+0x178>
 8011ada:	ee30 6b06 	vadd.f64	d6, d0, d6
 8011ade:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8011ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae6:	dce2      	bgt.n	8011aae <atan+0x26>
 8011ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8011aec:	e013      	b.n	8011b16 <atan+0x8e>
 8011aee:	f000 f8c5 	bl	8011c7c <fabs>
 8011af2:	4b5e      	ldr	r3, [pc, #376]	; (8011c6c <atan+0x1e4>)
 8011af4:	429c      	cmp	r4, r3
 8011af6:	dc4f      	bgt.n	8011b98 <atan+0x110>
 8011af8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011afc:	429c      	cmp	r4, r3
 8011afe:	dc41      	bgt.n	8011b84 <atan+0xfc>
 8011b00:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011b04:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011b08:	2300      	movs	r3, #0
 8011b0a:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011b0e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011b12:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011b16:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011c08 <atan+0x180>
 8011b1a:	ee27 4b07 	vmul.f64	d4, d7, d7
 8011b1e:	ee24 5b04 	vmul.f64	d5, d4, d4
 8011b22:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011c10 <atan+0x188>
 8011b26:	eea5 3b06 	vfma.f64	d3, d5, d6
 8011b2a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011c18 <atan+0x190>
 8011b2e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011b32:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011c20 <atan+0x198>
 8011b36:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011b3a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011c28 <atan+0x1a0>
 8011b3e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011b42:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011c30 <atan+0x1a8>
 8011b46:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011c38 <atan+0x1b0>
 8011b4a:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011b4e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011c40 <atan+0x1b8>
 8011b52:	eea5 2b06 	vfma.f64	d2, d5, d6
 8011b56:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011c48 <atan+0x1c0>
 8011b5a:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011b5e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011c50 <atan+0x1c8>
 8011b62:	eea6 2b05 	vfma.f64	d2, d6, d5
 8011b66:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011c58 <atan+0x1d0>
 8011b6a:	1c5a      	adds	r2, r3, #1
 8011b6c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011b70:	ee26 6b05 	vmul.f64	d6, d6, d5
 8011b74:	eea3 6b04 	vfma.f64	d6, d3, d4
 8011b78:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011b7c:	d121      	bne.n	8011bc2 <atan+0x13a>
 8011b7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011b82:	e794      	b.n	8011aae <atan+0x26>
 8011b84:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011b88:	2301      	movs	r3, #1
 8011b8a:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011b8e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011b92:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011b96:	e7be      	b.n	8011b16 <atan+0x8e>
 8011b98:	4b35      	ldr	r3, [pc, #212]	; (8011c70 <atan+0x1e8>)
 8011b9a:	429c      	cmp	r4, r3
 8011b9c:	da0b      	bge.n	8011bb6 <atan+0x12e>
 8011b9e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011ba2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011ba6:	ee30 5b47 	vsub.f64	d5, d0, d7
 8011baa:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011bae:	2302      	movs	r3, #2
 8011bb0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8011bb4:	e7af      	b.n	8011b16 <atan+0x8e>
 8011bb6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011bba:	2303      	movs	r3, #3
 8011bbc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011bc0:	e7a9      	b.n	8011b16 <atan+0x8e>
 8011bc2:	4a2c      	ldr	r2, [pc, #176]	; (8011c74 <atan+0x1ec>)
 8011bc4:	492c      	ldr	r1, [pc, #176]	; (8011c78 <atan+0x1f0>)
 8011bc6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011bca:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8011bce:	ed93 5b00 	vldr	d5, [r3]
 8011bd2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011bd6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011bda:	ed92 6b00 	vldr	d6, [r2]
 8011bde:	2d00      	cmp	r5, #0
 8011be0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011be4:	bfb8      	it	lt
 8011be6:	eeb1 7b47 	vneglt.f64	d7, d7
 8011bea:	e760      	b.n	8011aae <atan+0x26>
 8011bec:	f3af 8000 	nop.w
 8011bf0:	54442d18 	.word	0x54442d18
 8011bf4:	3ff921fb 	.word	0x3ff921fb
 8011bf8:	54442d18 	.word	0x54442d18
 8011bfc:	bff921fb 	.word	0xbff921fb
 8011c00:	8800759c 	.word	0x8800759c
 8011c04:	7e37e43c 	.word	0x7e37e43c
 8011c08:	e322da11 	.word	0xe322da11
 8011c0c:	3f90ad3a 	.word	0x3f90ad3a
 8011c10:	24760deb 	.word	0x24760deb
 8011c14:	3fa97b4b 	.word	0x3fa97b4b
 8011c18:	a0d03d51 	.word	0xa0d03d51
 8011c1c:	3fb10d66 	.word	0x3fb10d66
 8011c20:	c54c206e 	.word	0xc54c206e
 8011c24:	3fb745cd 	.word	0x3fb745cd
 8011c28:	920083ff 	.word	0x920083ff
 8011c2c:	3fc24924 	.word	0x3fc24924
 8011c30:	5555550d 	.word	0x5555550d
 8011c34:	3fd55555 	.word	0x3fd55555
 8011c38:	52defd9a 	.word	0x52defd9a
 8011c3c:	bfadde2d 	.word	0xbfadde2d
 8011c40:	2c6a6c2f 	.word	0x2c6a6c2f
 8011c44:	bfa2b444 	.word	0xbfa2b444
 8011c48:	af749a6d 	.word	0xaf749a6d
 8011c4c:	bfb3b0f2 	.word	0xbfb3b0f2
 8011c50:	fe231671 	.word	0xfe231671
 8011c54:	bfbc71c6 	.word	0xbfbc71c6
 8011c58:	9998ebc4 	.word	0x9998ebc4
 8011c5c:	bfc99999 	.word	0xbfc99999
 8011c60:	440fffff 	.word	0x440fffff
 8011c64:	7ff00000 	.word	0x7ff00000
 8011c68:	3fdbffff 	.word	0x3fdbffff
 8011c6c:	3ff2ffff 	.word	0x3ff2ffff
 8011c70:	40038000 	.word	0x40038000
 8011c74:	08013238 	.word	0x08013238
 8011c78:	08013258 	.word	0x08013258

08011c7c <fabs>:
 8011c7c:	ec51 0b10 	vmov	r0, r1, d0
 8011c80:	ee10 2a10 	vmov	r2, s0
 8011c84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011c88:	ec43 2b10 	vmov	d0, r2, r3
 8011c8c:	4770      	bx	lr
	...

08011c90 <floor>:
 8011c90:	ee10 1a90 	vmov	r1, s1
 8011c94:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011c98:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011c9c:	2b13      	cmp	r3, #19
 8011c9e:	b530      	push	{r4, r5, lr}
 8011ca0:	ee10 0a10 	vmov	r0, s0
 8011ca4:	ee10 5a10 	vmov	r5, s0
 8011ca8:	dc31      	bgt.n	8011d0e <floor+0x7e>
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	da15      	bge.n	8011cda <floor+0x4a>
 8011cae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011d68 <floor+0xd8>
 8011cb2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011cb6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cbe:	dd07      	ble.n	8011cd0 <floor+0x40>
 8011cc0:	2900      	cmp	r1, #0
 8011cc2:	da4e      	bge.n	8011d62 <floor+0xd2>
 8011cc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011cc8:	4318      	orrs	r0, r3
 8011cca:	d001      	beq.n	8011cd0 <floor+0x40>
 8011ccc:	4928      	ldr	r1, [pc, #160]	; (8011d70 <floor+0xe0>)
 8011cce:	2000      	movs	r0, #0
 8011cd0:	460b      	mov	r3, r1
 8011cd2:	4602      	mov	r2, r0
 8011cd4:	ec43 2b10 	vmov	d0, r2, r3
 8011cd8:	e020      	b.n	8011d1c <floor+0x8c>
 8011cda:	4a26      	ldr	r2, [pc, #152]	; (8011d74 <floor+0xe4>)
 8011cdc:	411a      	asrs	r2, r3
 8011cde:	ea01 0402 	and.w	r4, r1, r2
 8011ce2:	4304      	orrs	r4, r0
 8011ce4:	d01a      	beq.n	8011d1c <floor+0x8c>
 8011ce6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011d68 <floor+0xd8>
 8011cea:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011cee:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cf6:	ddeb      	ble.n	8011cd0 <floor+0x40>
 8011cf8:	2900      	cmp	r1, #0
 8011cfa:	bfbe      	ittt	lt
 8011cfc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011d00:	fa40 f303 	asrlt.w	r3, r0, r3
 8011d04:	18c9      	addlt	r1, r1, r3
 8011d06:	ea21 0102 	bic.w	r1, r1, r2
 8011d0a:	2000      	movs	r0, #0
 8011d0c:	e7e0      	b.n	8011cd0 <floor+0x40>
 8011d0e:	2b33      	cmp	r3, #51	; 0x33
 8011d10:	dd05      	ble.n	8011d1e <floor+0x8e>
 8011d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011d16:	d101      	bne.n	8011d1c <floor+0x8c>
 8011d18:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011d1c:	bd30      	pop	{r4, r5, pc}
 8011d1e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011d22:	f04f 32ff 	mov.w	r2, #4294967295
 8011d26:	40e2      	lsrs	r2, r4
 8011d28:	4202      	tst	r2, r0
 8011d2a:	d0f7      	beq.n	8011d1c <floor+0x8c>
 8011d2c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011d68 <floor+0xd8>
 8011d30:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011d34:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d3c:	ddc8      	ble.n	8011cd0 <floor+0x40>
 8011d3e:	2900      	cmp	r1, #0
 8011d40:	da02      	bge.n	8011d48 <floor+0xb8>
 8011d42:	2b14      	cmp	r3, #20
 8011d44:	d103      	bne.n	8011d4e <floor+0xbe>
 8011d46:	3101      	adds	r1, #1
 8011d48:	ea20 0002 	bic.w	r0, r0, r2
 8011d4c:	e7c0      	b.n	8011cd0 <floor+0x40>
 8011d4e:	2401      	movs	r4, #1
 8011d50:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011d54:	fa04 f303 	lsl.w	r3, r4, r3
 8011d58:	4418      	add	r0, r3
 8011d5a:	42a8      	cmp	r0, r5
 8011d5c:	bf38      	it	cc
 8011d5e:	1909      	addcc	r1, r1, r4
 8011d60:	e7f2      	b.n	8011d48 <floor+0xb8>
 8011d62:	2000      	movs	r0, #0
 8011d64:	4601      	mov	r1, r0
 8011d66:	e7b3      	b.n	8011cd0 <floor+0x40>
 8011d68:	8800759c 	.word	0x8800759c
 8011d6c:	7e37e43c 	.word	0x7e37e43c
 8011d70:	bff00000 	.word	0xbff00000
 8011d74:	000fffff 	.word	0x000fffff

08011d78 <scalbn>:
 8011d78:	ee10 1a90 	vmov	r1, s1
 8011d7c:	b510      	push	{r4, lr}
 8011d7e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8011d82:	b98c      	cbnz	r4, 8011da8 <scalbn+0x30>
 8011d84:	ee10 3a10 	vmov	r3, s0
 8011d88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011d8c:	430b      	orrs	r3, r1
 8011d8e:	d011      	beq.n	8011db4 <scalbn+0x3c>
 8011d90:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8011e58 <scalbn+0xe0>
 8011d94:	4b3c      	ldr	r3, [pc, #240]	; (8011e88 <scalbn+0x110>)
 8011d96:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011d9a:	4298      	cmp	r0, r3
 8011d9c:	da0b      	bge.n	8011db6 <scalbn+0x3e>
 8011d9e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011e60 <scalbn+0xe8>
 8011da2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011da6:	e005      	b.n	8011db4 <scalbn+0x3c>
 8011da8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8011dac:	429c      	cmp	r4, r3
 8011dae:	d107      	bne.n	8011dc0 <scalbn+0x48>
 8011db0:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011db4:	bd10      	pop	{r4, pc}
 8011db6:	ee10 1a90 	vmov	r1, s1
 8011dba:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8011dbe:	3c36      	subs	r4, #54	; 0x36
 8011dc0:	4404      	add	r4, r0
 8011dc2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8011dc6:	429c      	cmp	r4, r3
 8011dc8:	dd0d      	ble.n	8011de6 <scalbn+0x6e>
 8011dca:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011e68 <scalbn+0xf0>
 8011dce:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011e70 <scalbn+0xf8>
 8011dd2:	eeb0 6b47 	vmov.f64	d6, d7
 8011dd6:	ee10 3a90 	vmov	r3, s1
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011de0:	ee27 0b06 	vmul.f64	d0, d7, d6
 8011de4:	e7e6      	b.n	8011db4 <scalbn+0x3c>
 8011de6:	2c00      	cmp	r4, #0
 8011de8:	dd0a      	ble.n	8011e00 <scalbn+0x88>
 8011dea:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011dee:	ec53 2b10 	vmov	r2, r3, d0
 8011df2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011df6:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8011dfa:	ec43 2b10 	vmov	d0, r2, r3
 8011dfe:	e7d9      	b.n	8011db4 <scalbn+0x3c>
 8011e00:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8011e04:	da19      	bge.n	8011e3a <scalbn+0xc2>
 8011e06:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011e0a:	4298      	cmp	r0, r3
 8011e0c:	ee10 3a90 	vmov	r3, s1
 8011e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011e14:	dd09      	ble.n	8011e2a <scalbn+0xb2>
 8011e16:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8011e68 <scalbn+0xf0>
 8011e1a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8011e70 <scalbn+0xf8>
 8011e1e:	eeb0 7b40 	vmov.f64	d7, d0
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8011e28:	e7bb      	b.n	8011da2 <scalbn+0x2a>
 8011e2a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8011e60 <scalbn+0xe8>
 8011e2e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8011e78 <scalbn+0x100>
 8011e32:	eeb0 7b40 	vmov.f64	d7, d0
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	e7f4      	b.n	8011e24 <scalbn+0xac>
 8011e3a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011e3e:	ec53 2b10 	vmov	r2, r3, d0
 8011e42:	3436      	adds	r4, #54	; 0x36
 8011e44:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011e48:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8011e4c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011e80 <scalbn+0x108>
 8011e50:	ec43 2b10 	vmov	d0, r2, r3
 8011e54:	e7a5      	b.n	8011da2 <scalbn+0x2a>
 8011e56:	bf00      	nop
 8011e58:	00000000 	.word	0x00000000
 8011e5c:	43500000 	.word	0x43500000
 8011e60:	c2f8f359 	.word	0xc2f8f359
 8011e64:	01a56e1f 	.word	0x01a56e1f
 8011e68:	8800759c 	.word	0x8800759c
 8011e6c:	7e37e43c 	.word	0x7e37e43c
 8011e70:	8800759c 	.word	0x8800759c
 8011e74:	fe37e43c 	.word	0xfe37e43c
 8011e78:	c2f8f359 	.word	0xc2f8f359
 8011e7c:	81a56e1f 	.word	0x81a56e1f
 8011e80:	00000000 	.word	0x00000000
 8011e84:	3c900000 	.word	0x3c900000
 8011e88:	ffff3cb0 	.word	0xffff3cb0

08011e8c <finitef>:
 8011e8c:	b082      	sub	sp, #8
 8011e8e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011e92:	9801      	ldr	r0, [sp, #4]
 8011e94:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011e98:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8011e9c:	bfac      	ite	ge
 8011e9e:	2000      	movge	r0, #0
 8011ea0:	2001      	movlt	r0, #1
 8011ea2:	b002      	add	sp, #8
 8011ea4:	4770      	bx	lr
	...

08011ea8 <_init>:
 8011ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eaa:	bf00      	nop
 8011eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011eae:	bc08      	pop	{r3}
 8011eb0:	469e      	mov	lr, r3
 8011eb2:	4770      	bx	lr

08011eb4 <_fini>:
 8011eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eb6:	bf00      	nop
 8011eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011eba:	bc08      	pop	{r3}
 8011ebc:	469e      	mov	lr, r3
 8011ebe:	4770      	bx	lr
